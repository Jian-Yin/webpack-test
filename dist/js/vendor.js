/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/ 		if(executeModules) {
/******/ 			for(i=0; i < executeModules.length; i++) {
/******/ 				result = __webpack_require__(__webpack_require__.s = executeModules[i]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		4: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * jQuery JavaScript Library v1.11.2\r\n * http://jquery.com/\r\n *\r\n * Includes Sizzle.js\r\n * http://sizzlejs.com/\r\n *\r\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors\r\n * Released under the MIT license\r\n * http://jquery.org/license\r\n *\r\n * Date: 2014-12-17T15:27Z\r\n */\n\n(function (global, factory) {\n\n\tif (typeof module === \"object\" && typeof module.exports === \"object\") {\n\t\t// For CommonJS and CommonJS-like environments where a proper window is present,\n\t\t// execute the factory and get jQuery\n\t\t// For environments that do not inherently posses a window with a document\n\t\t// (such as Node.js), expose a jQuery-making factory as module.exports\n\t\t// This accentuates the need for the creation of a real window\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info\n\t\tmodule.exports = global.document ? factory(global, true) : function (w) {\n\t\t\tif (!w.document) {\n\t\t\t\tthrow new Error(\"jQuery requires a window with a document\");\n\t\t\t}\n\t\t\treturn factory(w);\n\t\t};\n\t} else {\n\t\tfactory(global);\n\t}\n\n\t// Pass this if window is not defined yet\n})(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n\n\t// Can't do this because several apps including ASP.NET trace\n\t// the stack via arguments.caller.callee and Firefox dies if\n\t// you try to trace through \"use strict\" call chains. (#13335)\n\t// Support: Firefox 18+\n\t//\n\n\tvar deletedIds = [];\n\n\tvar slice = deletedIds.slice;\n\n\tvar concat = deletedIds.concat;\n\n\tvar push = deletedIds.push;\n\n\tvar indexOf = deletedIds.indexOf;\n\n\tvar class2type = {};\n\n\tvar toString = class2type.toString;\n\n\tvar hasOwn = class2type.hasOwnProperty;\n\n\tvar support = {};\n\n\tvar version = \"1.11.2\",\n\n\n\t// Define a local copy of jQuery\n\tjQuery = function (selector, context) {\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init(selector, context);\n\t},\n\n\n\t// Support: Android<4.1, IE<9\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\t    rdashAlpha = /-([\\da-z])/gi,\n\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function (all, letter) {\n\t\treturn letter.toUpperCase();\n\t};\n\n\tjQuery.fn = jQuery.prototype = {\n\t\t// The current version of jQuery being used\n\t\tjquery: version,\n\n\t\tconstructor: jQuery,\n\n\t\t// Start with an empty selector\n\t\tselector: \"\",\n\n\t\t// The default length of a jQuery object is 0\n\t\tlength: 0,\n\n\t\ttoArray: function () {\n\t\t\treturn slice.call(this);\n\t\t},\n\n\t\t// Get the Nth element in the matched element set OR\n\t\t// Get the whole matched element set as a clean array\n\t\tget: function (num) {\n\t\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\tnum < 0 ? this[num + this.length] : this[num] :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call(this);\n\t\t},\n\n\t\t// Take an array of elements and push it onto the stack\n\t\t// (returning the new matched element set)\n\t\tpushStack: function (elems) {\n\n\t\t\t// Build a new jQuery matched element set\n\t\t\tvar ret = jQuery.merge(this.constructor(), elems);\n\n\t\t\t// Add the old object onto the stack (as a reference)\n\t\t\tret.prevObject = this;\n\t\t\tret.context = this.context;\n\n\t\t\t// Return the newly-formed element set\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Execute a callback for every element in the matched set.\n\t\t// (You can seed the arguments with an array of args, but this is\n\t\t// only used internally.)\n\t\teach: function (callback, args) {\n\t\t\treturn jQuery.each(this, callback, args);\n\t\t},\n\n\t\tmap: function (callback) {\n\t\t\treturn this.pushStack(jQuery.map(this, function (elem, i) {\n\t\t\t\treturn callback.call(elem, i, elem);\n\t\t\t}));\n\t\t},\n\n\t\tslice: function () {\n\t\t\treturn this.pushStack(slice.apply(this, arguments));\n\t\t},\n\n\t\tfirst: function () {\n\t\t\treturn this.eq(0);\n\t\t},\n\n\t\tlast: function () {\n\t\t\treturn this.eq(-1);\n\t\t},\n\n\t\teq: function (i) {\n\t\t\tvar len = this.length,\n\t\t\t    j = +i + (i < 0 ? len : 0);\n\t\t\treturn this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n\t\t},\n\n\t\tend: function () {\n\t\t\treturn this.prevObject || this.constructor(null);\n\t\t},\n\n\t\t// For internal use only.\n\t\t// Behaves like an Array's method, not like a jQuery method.\n\t\tpush: push,\n\t\tsort: deletedIds.sort,\n\t\tsplice: deletedIds.splice\n\t};\n\n\tjQuery.extend = jQuery.fn.extend = function () {\n\t\tvar src,\n\t\t    copyIsArray,\n\t\t    copy,\n\t\t    name,\n\t\t    options,\n\t\t    clone,\n\t\t    target = arguments[0] || {},\n\t\t    i = 1,\n\t\t    length = arguments.length,\n\t\t    deep = false;\n\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === \"boolean\") {\n\t\t\tdeep = target;\n\n\t\t\t// skip the boolean and the target\n\t\t\ttarget = arguments[i] || {};\n\t\t\ti++;\n\t\t}\n\n\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\tif (typeof target !== \"object\" && !jQuery.isFunction(target)) {\n\t\t\ttarget = {};\n\t\t}\n\n\t\t// extend jQuery itself if only one argument is passed\n\t\tif (i === length) {\n\t\t\ttarget = this;\n\t\t\ti--;\n\t\t}\n\n\t\tfor (; i < length; i++) {\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif ((options = arguments[i]) != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target === copy) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (copy !== undefined) {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\tjQuery.extend({\n\t\t// Unique for each copy of jQuery on the page\n\t\texpando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n\n\t\t// Assume jQuery is ready without the ready module\n\t\tisReady: true,\n\n\t\terror: function (msg) {\n\t\t\tthrow new Error(msg);\n\t\t},\n\n\t\tnoop: function () {},\n\n\t\t// See test/unit/core.js for details concerning isFunction.\n\t\t// Since version 1.3, DOM methods and functions like alert\n\t\t// aren't supported. They return false on IE (#2968).\n\t\tisFunction: function (obj) {\n\t\t\treturn jQuery.type(obj) === \"function\";\n\t\t},\n\n\t\tisArray: Array.isArray || function (obj) {\n\t\t\treturn jQuery.type(obj) === \"array\";\n\t\t},\n\n\t\tisWindow: function (obj) {\n\t\t\t/* jshint eqeqeq: false */\n\t\t\treturn obj != null && obj == obj.window;\n\t\t},\n\n\t\tisNumeric: function (obj) {\n\t\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\t\treturn !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;\n\t\t},\n\n\t\tisEmptyObject: function (obj) {\n\t\t\tvar name;\n\t\t\tfor (name in obj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tisPlainObject: function (obj) {\n\t\t\tvar key;\n\n\t\t\t// Must be an Object.\n\t\t\t// Because of IE, we also have to check the presence of the constructor property.\n\t\t\t// Make sure that DOM nodes and window objects don't pass through, as well\n\t\t\tif (!obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Not own constructor property must be Object\n\t\t\t\tif (obj.constructor && !hasOwn.call(obj, \"constructor\") && !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// IE8,9 Will throw exceptions on certain host objects #9897\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// Handle iteration over inherited properties before own properties.\n\t\t\tif (support.ownLast) {\n\t\t\t\tfor (key in obj) {\n\t\t\t\t\treturn hasOwn.call(obj, key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t\t// if last one is own, then all properties are own.\n\t\t\tfor (key in obj) {}\n\n\t\t\treturn key === undefined || hasOwn.call(obj, key);\n\t\t},\n\n\t\ttype: function (obj) {\n\t\t\tif (obj == null) {\n\t\t\t\treturn obj + \"\";\n\t\t\t}\n\t\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj;\n\t\t},\n\n\t\t// Evaluates a script in a global context\n\t\t// Workarounds based on findings by Jim Driscoll\n\t\t// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n\t\tglobalEval: function (data) {\n\t\t\tif (data && jQuery.trim(data)) {\n\t\t\t\t// We use execScript on Internet Explorer\n\t\t\t\t// We use an anonymous function so that context is window\n\t\t\t\t// rather than jQuery in Firefox\n\t\t\t\t(window.execScript || function (data) {\n\t\t\t\t\twindow[\"eval\"].call(window, data);\n\t\t\t\t})(data);\n\t\t\t}\n\t\t},\n\n\t\t// Convert dashed to camelCase; used by the css and data modules\n\t\t// Microsoft forgot to hump their vendor prefix (#9572)\n\t\tcamelCase: function (string) {\n\t\t\treturn string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n\t\t},\n\n\t\tnodeName: function (elem, name) {\n\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t\t},\n\n\t\t// args is for internal usage only\n\t\teach: function (obj, callback, args) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = obj.length,\n\t\t\t    isArray = isArraylike(obj);\n\n\t\t\tif (args) {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// A special, fast, case for the most common use of each\n\t\t\t} else {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t// Support: Android<4.1, IE<9\n\t\ttrim: function (text) {\n\t\t\treturn text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n\t\t},\n\n\t\t// results is for internal usage only\n\t\tmakeArray: function (arr, results) {\n\t\t\tvar ret = results || [];\n\n\t\t\tif (arr != null) {\n\t\t\t\tif (isArraylike(Object(arr))) {\n\t\t\t\t\tjQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n\t\t\t\t} else {\n\t\t\t\t\tpush.call(ret, arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\tinArray: function (elem, arr, i) {\n\t\t\tvar len;\n\n\t\t\tif (arr) {\n\t\t\t\tif (indexOf) {\n\t\t\t\t\treturn indexOf.call(arr, elem, i);\n\t\t\t\t}\n\n\t\t\t\tlen = arr.length;\n\t\t\t\ti = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t// Skip accessing in sparse arrays\n\t\t\t\t\tif (i in arr && arr[i] === elem) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t},\n\n\t\tmerge: function (first, second) {\n\t\t\tvar len = +second.length,\n\t\t\t    j = 0,\n\t\t\t    i = first.length;\n\n\t\t\twhile (j < len) {\n\t\t\t\tfirst[i++] = second[j++];\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)\n\t\t\tif (len !== len) {\n\t\t\t\twhile (second[j] !== undefined) {\n\t\t\t\t\tfirst[i++] = second[j++];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfirst.length = i;\n\n\t\t\treturn first;\n\t\t},\n\n\t\tgrep: function (elems, callback, invert) {\n\t\t\tvar callbackInverse,\n\t\t\t    matches = [],\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    callbackExpect = !invert;\n\n\t\t\t// Go through the array, only saving the items\n\t\t\t// that pass the validator function\n\t\t\tfor (; i < length; i++) {\n\t\t\t\tcallbackInverse = !callback(elems[i], i);\n\t\t\t\tif (callbackInverse !== callbackExpect) {\n\t\t\t\t\tmatches.push(elems[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t// arg is for internal usage only\n\t\tmap: function (elems, callback, arg) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    isArray = isArraylike(elems),\n\t\t\t    ret = [];\n\n\t\t\t// Go through the array, translating each of the items to their new values\n\t\t\tif (isArray) {\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Go through every key on the object,\n\t\t\t} else {\n\t\t\t\tfor (i in elems) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Flatten any nested arrays\n\t\t\treturn concat.apply([], ret);\n\t\t},\n\n\t\t// A global GUID counter for objects\n\t\tguid: 1,\n\n\t\t// Bind a function to a context, optionally partially applying any\n\t\t// arguments.\n\t\tproxy: function (fn, context) {\n\t\t\tvar args, proxy, tmp;\n\n\t\t\tif (typeof context === \"string\") {\n\t\t\t\ttmp = fn[context];\n\t\t\t\tcontext = fn;\n\t\t\t\tfn = tmp;\n\t\t\t}\n\n\t\t\t// Quick check to determine if target is callable, in the spec\n\t\t\t// this throws a TypeError, but we will just return undefined.\n\t\t\tif (!jQuery.isFunction(fn)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Simulated bind\n\t\t\targs = slice.call(arguments, 2);\n\t\t\tproxy = function () {\n\t\t\t\treturn fn.apply(context || this, args.concat(slice.call(arguments)));\n\t\t\t};\n\n\t\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\t\treturn proxy;\n\t\t},\n\n\t\tnow: function () {\n\t\t\treturn +new Date();\n\t\t},\n\n\t\t// jQuery.support is not used in Core but other projects attach their\n\t\t// properties to it so it needs to exist.\n\t\tsupport: support\n\t});\n\n\t// Populate the class2type map\n\tjQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\n\t\tclass2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n\t});\n\n\tfunction isArraylike(obj) {\n\t\tvar length = obj.length,\n\t\t    type = jQuery.type(obj);\n\n\t\tif (type === \"function\" || jQuery.isWindow(obj)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (obj.nodeType === 1 && length) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n\t}\n\tvar Sizzle =\n\t/*!\r\n  * Sizzle CSS Selector Engine v2.2.0-pre\r\n  * http://sizzlejs.com/\r\n  *\r\n  * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors\r\n  * Released under the MIT license\r\n  * http://jquery.org/license\r\n  *\r\n  * Date: 2014-12-16\r\n  */\n\tfunction (window) {\n\n\t\tvar i,\n\t\t    support,\n\t\t    Expr,\n\t\t    getText,\n\t\t    isXML,\n\t\t    tokenize,\n\t\t    compile,\n\t\t    select,\n\t\t    outermostContext,\n\t\t    sortInput,\n\t\t    hasDuplicate,\n\n\n\t\t// Local document vars\n\t\tsetDocument,\n\t\t    document,\n\t\t    docElem,\n\t\t    documentIsHTML,\n\t\t    rbuggyQSA,\n\t\t    rbuggyMatches,\n\t\t    matches,\n\t\t    contains,\n\n\n\t\t// Instance-specific data\n\t\texpando = \"sizzle\" + 1 * new Date(),\n\t\t    preferredDoc = window.document,\n\t\t    dirruns = 0,\n\t\t    done = 0,\n\t\t    classCache = createCache(),\n\t\t    tokenCache = createCache(),\n\t\t    compilerCache = createCache(),\n\t\t    sortOrder = function (a, b) {\n\t\t\tif (a === b) {\n\t\t\t\thasDuplicate = true;\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\n\t\t// General-purpose constants\n\t\tMAX_NEGATIVE = 1 << 31,\n\n\n\t\t// Instance methods\n\t\thasOwn = {}.hasOwnProperty,\n\t\t    arr = [],\n\t\t    pop = arr.pop,\n\t\t    push_native = arr.push,\n\t\t    push = arr.push,\n\t\t    slice = arr.slice,\n\n\t\t// Use a stripped-down indexOf as it's faster than native\n\t\t// http://jsperf.com/thor-indexof-vs-for/5\n\t\tindexOf = function (list, elem) {\n\t\t\tvar i = 0,\n\t\t\t    len = list.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (list[i] === elem) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\t    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\n\t\t// Regular expressions\n\n\t\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n\t\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t\t// http://www.w3.org/TR/css3-syntax/#characters\n\t\tcharacterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\n\t\t// Loosely modeled on CSS identifier characters\n\t\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n\t\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\t\tidentifier = characterEncoding.replace(\"w\", \"w#\"),\n\n\n\t\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\t\tattributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n\t\t    pseudos = \":(\" + characterEncoding + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" + \")\\\\)|)\",\n\n\n\t\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\t\trwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n\t\t    rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n\t\t    rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n\t\t    rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n\t\t    rattributeQuotes = new RegExp(\"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\"),\n\t\t    rpseudo = new RegExp(pseudos),\n\t\t    ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n\t\t    matchExpr = {\n\t\t\t\"ID\": new RegExp(\"^#(\" + characterEncoding + \")\"),\n\t\t\t\"CLASS\": new RegExp(\"^\\\\.(\" + characterEncoding + \")\"),\n\t\t\t\"TAG\": new RegExp(\"^(\" + characterEncoding.replace(\"w\", \"w*\") + \")\"),\n\t\t\t\"ATTR\": new RegExp(\"^\" + attributes),\n\t\t\t\"PSEUDO\": new RegExp(\"^\" + pseudos),\n\t\t\t\"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n\t\t\t\"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n\t\t\t// For use in libraries implementing .is()\n\t\t\t// We use this for POS matching in `select`\n\t\t\t\"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n\t\t},\n\t\t    rinputs = /^(?:input|select|textarea|button)$/i,\n\t\t    rheader = /^h\\d$/i,\n\t\t    rnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\n\t\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\t\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\t\t    rsibling = /[+~]/,\n\t\t    rescape = /'|\\\\/g,\n\n\n\t\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\t\trunescape = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\n\t\t    funescape = function (_, escaped, escapedWhitespace) {\n\t\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t\t// NaN means non-codepoint\n\t\t\t// Support: Firefox<24\n\t\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\t\treturn high !== high || escapedWhitespace ? escaped : high < 0 ?\n\t\t\t// BMP codepoint\n\t\t\tString.fromCharCode(high + 0x10000) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n\t\t},\n\n\n\t\t// Used for iframes\n\t\t// See setDocument()\n\t\t// Removing the function wrapper causes a \"Permission Denied\"\n\t\t// error in IE\n\t\tunloadHandler = function () {\n\t\t\tsetDocument();\n\t\t};\n\n\t\t// Optimize for push.apply( _, NodeList )\n\t\ttry {\n\t\t\tpush.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\n\t\t\t// Support: Android<4.0\n\t\t\t// Detect silently failing push.apply\n\t\t\tarr[preferredDoc.childNodes.length].nodeType;\n\t\t} catch (e) {\n\t\t\tpush = { apply: arr.length ?\n\n\t\t\t\t// Leverage slice if possible\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tpush_native.apply(target, slice.call(els));\n\t\t\t\t} :\n\n\t\t\t\t// Support: IE<9\n\t\t\t\t// Otherwise append directly\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tvar j = target.length,\n\t\t\t\t\t    i = 0;\n\t\t\t\t\t// Can't trust NodeList.length\n\t\t\t\t\twhile (target[j++] = els[i++]) {}\n\t\t\t\t\ttarget.length = j - 1;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction Sizzle(selector, context, results, seed) {\n\t\t\tvar match, elem, m, nodeType,\n\t\t\t// QSA vars\n\t\t\ti, groups, old, nid, newContext, newSelector;\n\n\t\t\tif ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\n\t\t\tcontext = context || document;\n\t\t\tresults = results || [];\n\t\t\tnodeType = context.nodeType;\n\n\t\t\tif (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n\n\t\t\t\treturn results;\n\t\t\t}\n\n\t\t\tif (!seed && documentIsHTML) {\n\n\t\t\t\t// Try to shortcut find operations when possible (e.g., not under DocumentFragment)\n\t\t\t\tif (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n\t\t\t\t\t// Speed-up: Sizzle(\"#ID\")\n\t\t\t\t\tif (m = match[1]) {\n\t\t\t\t\t\tif (nodeType === 9) {\n\t\t\t\t\t\t\telem = context.getElementById(m);\n\t\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t\t// nodes that are no longer in the document (jQuery #6963)\n\t\t\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items\n\t\t\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\t\t\tif (elem.id === m) {\n\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Context is not a document\n\t\t\t\t\t\t\tif (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Speed-up: Sizzle(\"TAG\")\n\t\t\t\t\t} else if (match[2]) {\n\t\t\t\t\t\tpush.apply(results, context.getElementsByTagName(selector));\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Speed-up: Sizzle(\".CLASS\")\n\t\t\t\t\t} else if ((m = match[3]) && support.getElementsByClassName) {\n\t\t\t\t\t\tpush.apply(results, context.getElementsByClassName(m));\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// QSA path\n\t\t\t\tif (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n\t\t\t\t\tnid = old = expando;\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = nodeType !== 1 && selector;\n\n\t\t\t\t\t// qSA works strangely on Element-rooted queries\n\t\t\t\t\t// We can work around this by specifying an extra ID on the root\n\t\t\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)\n\t\t\t\t\t// IE 8 doesn't work on object elements\n\t\t\t\t\tif (nodeType === 1 && context.nodeName.toLowerCase() !== \"object\") {\n\t\t\t\t\t\tgroups = tokenize(selector);\n\n\t\t\t\t\t\tif (old = context.getAttribute(\"id\")) {\n\t\t\t\t\t\t\tnid = old.replace(rescape, \"\\\\$&\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute(\"id\", nid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnid = \"[id='\" + nid + \"'] \";\n\n\t\t\t\t\t\ti = groups.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tgroups[i] = nid + toSelector(groups[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n\t\t\t\t\t\tnewSelector = groups.join(\",\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newSelector) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpush.apply(results, newContext.querySelectorAll(newSelector));\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t} catch (qsaError) {} finally {\n\t\t\t\t\t\t\tif (!old) {\n\t\t\t\t\t\t\t\tcontext.removeAttribute(\"id\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All others\n\t\t\treturn select(selector.replace(rtrim, \"$1\"), context, results, seed);\n\t\t}\n\n\t\t/**\r\n   * Create key-value caches of limited size\r\n   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\r\n   *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\r\n   *\tdeleting the oldest entry\r\n   */\n\t\tfunction createCache() {\n\t\t\tvar keys = [];\n\n\t\t\tfunction cache(key, value) {\n\t\t\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\t\t\tif (keys.push(key + \" \") > Expr.cacheLength) {\n\t\t\t\t\t// Only keep the most recent entries\n\t\t\t\t\tdelete cache[keys.shift()];\n\t\t\t\t}\n\t\t\t\treturn cache[key + \" \"] = value;\n\t\t\t}\n\t\t\treturn cache;\n\t\t}\n\n\t\t/**\r\n   * Mark a function for special use by Sizzle\r\n   * @param {Function} fn The function to mark\r\n   */\n\t\tfunction markFunction(fn) {\n\t\t\tfn[expando] = true;\n\t\t\treturn fn;\n\t\t}\n\n\t\t/**\r\n   * Support testing using an element\r\n   * @param {Function} fn Passed the created div and expects a boolean result\r\n   */\n\t\tfunction assert(fn) {\n\t\t\tvar div = document.createElement(\"div\");\n\n\t\t\ttry {\n\t\t\t\treturn !!fn(div);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t} finally {\n\t\t\t\t// Remove from its parent by default\n\t\t\t\tif (div.parentNode) {\n\t\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\t}\n\t\t\t\t// release memory in IE\n\t\t\t\tdiv = null;\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * Adds the same handler for all of the specified attrs\r\n   * @param {String} attrs Pipe-separated list of attributes\r\n   * @param {Function} handler The method that will be applied\r\n   */\n\t\tfunction addHandle(attrs, handler) {\n\t\t\tvar arr = attrs.split(\"|\"),\n\t\t\t    i = attrs.length;\n\n\t\t\twhile (i--) {\n\t\t\t\tExpr.attrHandle[arr[i]] = handler;\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * Checks document order of two siblings\r\n   * @param {Element} a\r\n   * @param {Element} b\r\n   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\r\n   */\n\t\tfunction siblingCheck(a, b) {\n\t\t\tvar cur = b && a,\n\t\t\t    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);\n\n\t\t\t// Use IE sourceIndex if available on both nodes\n\t\t\tif (diff) {\n\t\t\t\treturn diff;\n\t\t\t}\n\n\t\t\t// Check if b follows a\n\t\t\tif (cur) {\n\t\t\t\twhile (cur = cur.nextSibling) {\n\t\t\t\t\tif (cur === b) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a ? 1 : -1;\n\t\t}\n\n\t\t/**\r\n   * Returns a function to use in pseudos for input types\r\n   * @param {String} type\r\n   */\n\t\tfunction createInputPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn name === \"input\" && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\r\n   * Returns a function to use in pseudos for buttons\r\n   * @param {String} type\r\n   */\n\t\tfunction createButtonPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\r\n   * Returns a function to use in pseudos for positionals\r\n   * @param {Function} fn\r\n   */\n\t\tfunction createPositionalPseudo(fn) {\n\t\t\treturn markFunction(function (argument) {\n\t\t\t\targument = +argument;\n\t\t\t\treturn markFunction(function (seed, matches) {\n\t\t\t\t\tvar j,\n\t\t\t\t\t    matchIndexes = fn([], seed.length, argument),\n\t\t\t\t\t    i = matchIndexes.length;\n\n\t\t\t\t\t// Match elements found at the specified indexes\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (seed[j = matchIndexes[i]]) {\n\t\t\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\r\n   * Checks a node for validity as a Sizzle context\r\n   * @param {Element|Object=} context\r\n   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\r\n   */\n\t\tfunction testContext(context) {\n\t\t\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n\t\t}\n\n\t\t// Expose support vars for convenience\n\t\tsupport = Sizzle.support = {};\n\n\t\t/**\r\n   * Detects XML nodes\r\n   * @param {Element|Object} elem An element or a document\r\n   * @returns {Boolean} True iff elem is a non-HTML XML node\r\n   */\n\t\tisXML = Sizzle.isXML = function (elem) {\n\t\t\t// documentElement is verified for cases where it doesn't yet exist\n\t\t\t// (such as loading iframes in IE - #4833)\n\t\t\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\t\t\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n\t\t};\n\n\t\t/**\r\n   * Sets document-related variables once based on the current document\r\n   * @param {Element|Object} [doc] An element or document object to use to set the document\r\n   * @returns {Object} Returns the current document\r\n   */\n\t\tsetDocument = Sizzle.setDocument = function (node) {\n\t\t\tvar hasCompare,\n\t\t\t    parent,\n\t\t\t    doc = node ? node.ownerDocument || node : preferredDoc;\n\n\t\t\t// If no document and documentElement is available, return\n\t\t\tif (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n\t\t\t\treturn document;\n\t\t\t}\n\n\t\t\t// Set our document\n\t\t\tdocument = doc;\n\t\t\tdocElem = doc.documentElement;\n\t\t\tparent = doc.defaultView;\n\n\t\t\t// Support: IE>8\n\t\t\t// If iframe document is assigned to \"document\" variable and if iframe has been reloaded,\n\t\t\t// IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936\n\t\t\t// IE6-8 do not support the defaultView property so parent will be undefined\n\t\t\tif (parent && parent !== parent.top) {\n\t\t\t\t// IE11 does not have attachEvent, so all must suffer\n\t\t\t\tif (parent.addEventListener) {\n\t\t\t\t\tparent.addEventListener(\"unload\", unloadHandler, false);\n\t\t\t\t} else if (parent.attachEvent) {\n\t\t\t\t\tparent.attachEvent(\"onunload\", unloadHandler);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Support tests\r\n   ---------------------------------------------------------------------- */\n\t\t\tdocumentIsHTML = !isXML(doc);\n\n\t\t\t/* Attributes\r\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Support: IE<8\n\t\t\t// Verify that getAttribute really returns attributes and not properties\n\t\t\t// (excepting IE8 booleans)\n\t\t\tsupport.attributes = assert(function (div) {\n\t\t\t\tdiv.className = \"i\";\n\t\t\t\treturn !div.getAttribute(\"className\");\n\t\t\t});\n\n\t\t\t/* getElement(s)By*\r\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Check if getElementsByTagName(\"*\") returns only elements\n\t\t\tsupport.getElementsByTagName = assert(function (div) {\n\t\t\t\tdiv.appendChild(doc.createComment(\"\"));\n\t\t\t\treturn !div.getElementsByTagName(\"*\").length;\n\t\t\t});\n\n\t\t\t// Support: IE<9\n\t\t\tsupport.getElementsByClassName = rnative.test(doc.getElementsByClassName);\n\n\t\t\t// Support: IE<10\n\t\t\t// Check if getElementById returns elements by name\n\t\t\t// The broken getElementById methods don't pick up programatically-set names,\n\t\t\t// so use a roundabout getElementsByName test\n\t\t\tsupport.getById = assert(function (div) {\n\t\t\t\tdocElem.appendChild(div).id = expando;\n\t\t\t\treturn !doc.getElementsByName || !doc.getElementsByName(expando).length;\n\t\t\t});\n\n\t\t\t// ID find and filter\n\t\t\tif (support.getById) {\n\t\t\t\tExpr.find[\"ID\"] = function (id, context) {\n\t\t\t\t\tif (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n\t\t\t\t\t\tvar m = context.getElementById(id);\n\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\treturn m && m.parentNode ? [m] : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Support: IE6/7\n\t\t\t\t// getElementById is not reliable as a find shortcut\n\t\t\t\tdelete Expr.find[\"ID\"];\n\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n\t\t\t\t\t\treturn node && node.value === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Tag\n\t\t\tExpr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n\t\t\t\tif (typeof context.getElementsByTagName !== \"undefined\") {\n\t\t\t\t\treturn context.getElementsByTagName(tag);\n\n\t\t\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t\t} else if (support.qsa) {\n\t\t\t\t\treturn context.querySelectorAll(tag);\n\t\t\t\t}\n\t\t\t} : function (tag, context) {\n\t\t\t\tvar elem,\n\t\t\t\t    tmp = [],\n\t\t\t\t    i = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName(tag);\n\n\t\t\t\t// Filter out possible comments\n\t\t\t\tif (tag === \"*\") {\n\t\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\ttmp.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tmp;\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\n\t\t\t// Class\n\t\t\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n\t\t\t\tif (documentIsHTML) {\n\t\t\t\t\treturn context.getElementsByClassName(className);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/* QSA/matchesSelector\r\n   ---------------------------------------------------------------------- */\n\n\t\t\t// QSA and matchesSelector support\n\n\t\t\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\t\t\trbuggyMatches = [];\n\n\t\t\t// qSa(:focus) reports false when true (Chrome 21)\n\t\t\t// We allow this because of a bug in IE8/9 that throws an error\n\t\t\t// whenever `document.activeElement` is accessed on an iframe\n\t\t\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t\t\t// See http://bugs.jquery.com/ticket/13378\n\t\t\trbuggyQSA = [];\n\n\t\t\tif (support.qsa = rnative.test(doc.querySelectorAll)) {\n\t\t\t\t// Build QSA regex\n\t\t\t\t// Regex strategy adopted from Diego Perini\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Select is set to empty string on purpose\n\t\t\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t\t\t// setting a boolean content attribute,\n\t\t\t\t\t// since its presence should be enough\n\t\t\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\t\t\tdocElem.appendChild(div).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\f]' msallowcapture=''>\" + \"<option selected=''></option></select>\";\n\n\t\t\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\t\t\tif (div.querySelectorAll(\"[msallowcapture^='']\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\t\t\tif (!div.querySelectorAll(\"[selected]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+\n\t\t\t\t\tif (!div.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(\":checked\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\t\t\tif (!div.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Support: Windows 8 Native Apps\n\t\t\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\t\t\tvar input = doc.createElement(\"input\");\n\t\t\t\t\tinput.setAttribute(\"type\", \"hidden\");\n\t\t\t\t\tdiv.appendChild(input).setAttribute(\"name\", \"D\");\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\t\t\tif (div.querySelectorAll(\"[name=d]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(\":enabled\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":enabled\", \":disabled\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\t\t\trbuggyQSA.push(\",.*:\");\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t\t\t// on a disconnected node (IE 9)\n\t\t\t\t\tsupport.disconnectedMatch = matches.call(div, \"div\");\n\n\t\t\t\t\t// This should fail with an exception\n\t\t\t\t\t// Gecko does not error, returns false instead\n\t\t\t\t\tmatches.call(div, \"[s!='']:x\");\n\t\t\t\t\trbuggyMatches.push(\"!=\", pseudos);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\trbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n\t\t\trbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n\n\t\t\t/* Contains\r\n   ---------------------------------------------------------------------- */\n\t\t\thasCompare = rnative.test(docElem.compareDocumentPosition);\n\n\t\t\t// Element contains another\n\t\t\t// Purposefully does not implement inclusive descendent\n\t\t\t// As in, an element does not contain itself\n\t\t\tcontains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n\t\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\t    bup = b && b.parentNode;\n\t\t\t\treturn a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t\t\t} : function (a, b) {\n\t\t\t\tif (b) {\n\t\t\t\t\twhile (b = b.parentNode) {\n\t\t\t\t\t\tif (b === a) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\t/* Sorting\r\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Document order sorting\n\t\t\tsortOrder = hasCompare ? function (a, b) {\n\n\t\t\t\t// Flag for duplicate removal\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\t\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\t\t\tif (compare) {\n\t\t\t\t\treturn compare;\n\t\t\t\t}\n\n\t\t\t\t// Calculate position if both inputs belong to the same document\n\t\t\t\tcompare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\n\n\t\t\t\t// Otherwise we know they are disconnected\n\t\t\t\t1;\n\n\t\t\t\t// Disconnected nodes\n\t\t\t\tif (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n\n\t\t\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t\t\tif (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Maintain original order\n\t\t\t\t\treturn sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\t\t\t\t}\n\n\t\t\t\treturn compare & 4 ? -1 : 1;\n\t\t\t} : function (a, b) {\n\t\t\t\t// Exit early if the nodes are identical\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tvar cur,\n\t\t\t\t    i = 0,\n\t\t\t\t    aup = a.parentNode,\n\t\t\t\t    bup = b.parentNode,\n\t\t\t\t    ap = [a],\n\t\t\t\t    bp = [b];\n\n\t\t\t\t// Parentless nodes are either documents or disconnected\n\t\t\t\tif (!aup || !bup) {\n\t\t\t\t\treturn a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\n\t\t\t\t\t// If the nodes are siblings, we can do a quick check\n\t\t\t\t} else if (aup === bup) {\n\t\t\t\t\treturn siblingCheck(a, b);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\t\t\tcur = a;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tap.unshift(cur);\n\t\t\t\t}\n\t\t\t\tcur = b;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tbp.unshift(cur);\n\t\t\t\t}\n\n\t\t\t\t// Walk down the tree looking for a discrepancy\n\t\t\t\twhile (ap[i] === bp[i]) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\treturn i ?\n\t\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\t\tsiblingCheck(ap[i], bp[i]) :\n\n\t\t\t\t// Otherwise nodes in our document sort first\n\t\t\t\tap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n\t\t\t};\n\n\t\t\treturn doc;\n\t\t};\n\n\t\tSizzle.matches = function (expr, elements) {\n\t\t\treturn Sizzle(expr, null, null, elements);\n\t\t};\n\n\t\tSizzle.matchesSelector = function (elem, expr) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\t// Make sure that attribute selectors are quoted\n\t\t\texpr = expr.replace(rattributeQuotes, \"='$1']\");\n\n\t\t\tif (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n\n\t\t\t\ttry {\n\t\t\t\t\tvar ret = matches.call(elem, expr);\n\n\t\t\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\t\t\tif (ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn Sizzle(expr, document, null, [elem]).length > 0;\n\t\t};\n\n\t\tSizzle.contains = function (context, elem) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((context.ownerDocument || context) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\t\t\treturn contains(context, elem);\n\t\t};\n\n\t\tSizzle.attr = function (elem, name) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\tvar fn = Expr.attrHandle[name.toLowerCase()],\n\n\t\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\t\tval = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n\n\t\t\treturn val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t};\n\n\t\tSizzle.error = function (msg) {\n\t\t\tthrow new Error(\"Syntax error, unrecognized expression: \" + msg);\n\t\t};\n\n\t\t/**\r\n   * Document sorting and removing duplicates\r\n   * @param {ArrayLike} results\r\n   */\n\t\tSizzle.uniqueSort = function (results) {\n\t\t\tvar elem,\n\t\t\t    duplicates = [],\n\t\t\t    j = 0,\n\t\t\t    i = 0;\n\n\t\t\t// Unless we *know* we can detect duplicates, assume their presence\n\t\t\thasDuplicate = !support.detectDuplicates;\n\t\t\tsortInput = !support.sortStable && results.slice(0);\n\t\t\tresults.sort(sortOrder);\n\n\t\t\tif (hasDuplicate) {\n\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\tif (elem === results[i]) {\n\t\t\t\t\t\tj = duplicates.push(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (j--) {\n\t\t\t\t\tresults.splice(duplicates[j], 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clear input after sorting to release objects\n\t\t\t// See https://github.com/jquery/sizzle/pull/225\n\t\t\tsortInput = null;\n\n\t\t\treturn results;\n\t\t};\n\n\t\t/**\r\n   * Utility function for retrieving the text value of an array of DOM nodes\r\n   * @param {Array|Element} elem\r\n   */\n\t\tgetText = Sizzle.getText = function (elem) {\n\t\t\tvar node,\n\t\t\t    ret = \"\",\n\t\t\t    i = 0,\n\t\t\t    nodeType = elem.nodeType;\n\n\t\t\tif (!nodeType) {\n\t\t\t\t// If no nodeType, this is expected to be an array\n\t\t\t\twhile (node = elem[i++]) {\n\t\t\t\t\t// Do not traverse comment nodes\n\t\t\t\t\tret += getText(node);\n\t\t\t\t}\n\t\t\t} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n\t\t\t\t// Use textContent for elements\n\t\t\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\t\t\tif (typeof elem.textContent === \"string\") {\n\t\t\t\t\treturn elem.textContent;\n\t\t\t\t} else {\n\t\t\t\t\t// Traverse its children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tret += getText(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (nodeType === 3 || nodeType === 4) {\n\t\t\t\treturn elem.nodeValue;\n\t\t\t}\n\t\t\t// Do not include comment or processing instruction nodes\n\n\t\t\treturn ret;\n\t\t};\n\n\t\tExpr = Sizzle.selectors = {\n\n\t\t\t// Can be adjusted by the user\n\t\t\tcacheLength: 50,\n\n\t\t\tcreatePseudo: markFunction,\n\n\t\t\tmatch: matchExpr,\n\n\t\t\tattrHandle: {},\n\n\t\t\tfind: {},\n\n\t\t\trelative: {\n\t\t\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\t\t\" \": { dir: \"parentNode\" },\n\t\t\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\t\t\"~\": { dir: \"previousSibling\" }\n\t\t\t},\n\n\t\t\tpreFilter: {\n\t\t\t\t\"ATTR\": function (match) {\n\t\t\t\t\tmatch[1] = match[1].replace(runescape, funescape);\n\n\t\t\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\t\t\tmatch[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n\t\t\t\t\tif (match[2] === \"~=\") {\n\t\t\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match.slice(0, 4);\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function (match) {\n\t\t\t\t\t/* matches from matchExpr[\"CHILD\"]\r\n     \t1 type (only|nth|...)\r\n     \t2 what (child|of-type)\r\n     \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\r\n     \t4 xn-component of xn+y argument ([+-]?\\d*n|)\r\n     \t5 sign of xn-component\r\n     \t6 x of xn-component\r\n     \t7 sign of y-component\r\n     \t8 y of y-component\r\n     */\n\t\t\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\t\t\tif (match[1].slice(0, 3) === \"nth\") {\n\t\t\t\t\t\t// nth-* requires argument\n\t\t\t\t\t\tif (!match[3]) {\n\t\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\t\t\tmatch[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n\t\t\t\t\t\tmatch[5] = +(match[7] + match[8] || match[3] === \"odd\");\n\n\t\t\t\t\t\t// other types prohibit arguments\n\t\t\t\t\t} else if (match[3]) {\n\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function (match) {\n\t\t\t\t\tvar excess,\n\t\t\t\t\t    unquoted = !match[6] && match[2];\n\n\t\t\t\t\tif (matchExpr[\"CHILD\"].test(match[0])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accept quoted arguments as-is\n\t\t\t\t\tif (match[3]) {\n\t\t\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t\t\t} else if (unquoted && rpseudo.test(unquoted) && (\n\t\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t\texcess = tokenize(unquoted, true)) && (\n\t\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t\texcess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n\n\t\t\t\t\t\t// excess is a negative index\n\t\t\t\t\t\tmatch[0] = match[0].slice(0, excess);\n\t\t\t\t\t\tmatch[2] = unquoted.slice(0, excess);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\t\t\treturn match.slice(0, 3);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfilter: {\n\n\t\t\t\t\"TAG\": function (nodeNameSelector) {\n\t\t\t\t\tvar nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn nodeNameSelector === \"*\" ? function () {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} : function (elem) {\n\t\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CLASS\": function (className) {\n\t\t\t\t\tvar pattern = classCache[className + \" \"];\n\n\t\t\t\t\treturn pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n\t\t\t\t\t\treturn pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t\"ATTR\": function (name, operator, check) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar result = Sizzle.attr(elem, name);\n\n\t\t\t\t\t\tif (result == null) {\n\t\t\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!operator) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult += \"\";\n\n\t\t\t\t\t\treturn operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function (type, what, argument, first, last) {\n\t\t\t\t\tvar simple = type.slice(0, 3) !== \"nth\",\n\t\t\t\t\t    forward = type.slice(-4) !== \"last\",\n\t\t\t\t\t    ofType = what === \"of-type\";\n\n\t\t\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\t\tfunction (elem) {\n\t\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t\t} : function (elem, context, xml) {\n\t\t\t\t\t\tvar cache,\n\t\t\t\t\t\t    outerCache,\n\t\t\t\t\t\t    node,\n\t\t\t\t\t\t    diff,\n\t\t\t\t\t\t    nodeIndex,\n\t\t\t\t\t\t    start,\n\t\t\t\t\t\t    dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\t    parent = elem.parentNode,\n\t\t\t\t\t\t    name = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\t    useCache = !xml && !ofType;\n\n\t\t\t\t\t\tif (parent) {\n\n\t\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\t\twhile (dir) {\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\twhile (node = node[dir]) {\n\t\t\t\t\t\t\t\t\t\tif (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstart = [forward ? parent.firstChild : parent.lastChild];\n\n\t\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\t\tif (forward && useCache) {\n\t\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\t\touterCache = parent[expando] || (parent[expando] = {});\n\t\t\t\t\t\t\t\tcache = outerCache[type] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];\n\t\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[nodeIndex];\n\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\tdiff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\t\tif (node.nodeType === 1 && ++diff && node === elem) {\n\t\t\t\t\t\t\t\t\t\touterCache[type] = [dirruns, nodeIndex, diff];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\t} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {\n\t\t\t\t\t\t\t\tdiff = cache[1];\n\n\t\t\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\tif ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t\t\t(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (node === elem) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\t\treturn diff === first || diff % first === 0 && diff / first >= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function (pseudo, argument) {\n\t\t\t\t\t// pseudo-class names are case-insensitive\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\t\t\tvar args,\n\t\t\t\t\t    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\n\n\t\t\t\t\t// The user may use createPseudo to indicate that\n\t\t\t\t\t// arguments are needed to create the filter function\n\t\t\t\t\t// just as Sizzle does\n\t\t\t\t\tif (fn[expando]) {\n\t\t\t\t\t\treturn fn(argument);\n\t\t\t\t\t}\n\n\t\t\t\t\t// But maintain support for old signatures\n\t\t\t\t\tif (fn.length > 1) {\n\t\t\t\t\t\targs = [pseudo, pseudo, \"\", argument];\n\t\t\t\t\t\treturn Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n\t\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\t    matched = fn(seed, argument),\n\t\t\t\t\t\t\t    i = matched.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tidx = indexOf(seed, matched[i]);\n\t\t\t\t\t\t\t\tseed[idx] = !(matches[idx] = matched[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}) : function (elem) {\n\t\t\t\t\t\t\treturn fn(elem, 0, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fn;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpseudos: {\n\t\t\t\t// Potentially complex pseudos\n\t\t\t\t\"not\": markFunction(function (selector) {\n\t\t\t\t\t// Trim the selector passed to compile\n\t\t\t\t\t// to avoid treating leading and trailing\n\t\t\t\t\t// spaces as combinators\n\t\t\t\t\tvar input = [],\n\t\t\t\t\t    results = [],\n\t\t\t\t\t    matcher = compile(selector.replace(rtrim, \"$1\"));\n\n\t\t\t\t\treturn matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n\t\t\t\t\t\tvar elem,\n\t\t\t\t\t\t    unmatched = matcher(seed, null, xml, []),\n\t\t\t\t\t\t    i = seed.length;\n\n\t\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}) : function (elem, context, xml) {\n\t\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\t\tmatcher(input, null, xml, results);\n\t\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\t\tinput[0] = null;\n\t\t\t\t\t\treturn !results.pop();\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"has\": markFunction(function (selector) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn Sizzle(selector, elem).length > 0;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"contains\": markFunction(function (text) {\n\t\t\t\t\ttext = text.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// \"Whether an element is represented by a :lang() selector\n\t\t\t\t// is based solely on the element's language value\n\t\t\t\t// being equal to the identifier C,\n\t\t\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t\t\t// The identifier C does not have to be a valid language name.\"\n\t\t\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\t\t\"lang\": markFunction(function (lang) {\n\t\t\t\t\t// lang value must be a valid identifier\n\t\t\t\t\tif (!ridentifier.test(lang || \"\")) {\n\t\t\t\t\t\tSizzle.error(\"unsupported lang: \" + lang);\n\t\t\t\t\t}\n\t\t\t\t\tlang = lang.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar elemLang;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n\n\t\t\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while ((elem = elem.parentNode) && elem.nodeType === 1);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// Miscellaneous\n\t\t\t\t\"target\": function (elem) {\n\t\t\t\t\tvar hash = window.location && window.location.hash;\n\t\t\t\t\treturn hash && hash.slice(1) === elem.id;\n\t\t\t\t},\n\n\t\t\t\t\"root\": function (elem) {\n\t\t\t\t\treturn elem === docElem;\n\t\t\t\t},\n\n\t\t\t\t\"focus\": function (elem) {\n\t\t\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t\t\t},\n\n\t\t\t\t// Boolean properties\n\t\t\t\t\"enabled\": function (elem) {\n\t\t\t\t\treturn elem.disabled === false;\n\t\t\t\t},\n\n\t\t\t\t\"disabled\": function (elem) {\n\t\t\t\t\treturn elem.disabled === true;\n\t\t\t\t},\n\n\t\t\t\t\"checked\": function (elem) {\n\t\t\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n\t\t\t\t},\n\n\t\t\t\t\"selected\": function (elem) {\n\t\t\t\t\t// Accessing this property makes selected-by-default\n\t\t\t\t\t// options in Safari work properly\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem.selected === true;\n\t\t\t\t},\n\n\t\t\t\t// Contents\n\t\t\t\t\"empty\": function (elem) {\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tif (elem.nodeType < 6) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t\"parent\": function (elem) {\n\t\t\t\t\treturn !Expr.pseudos[\"empty\"](elem);\n\t\t\t\t},\n\n\t\t\t\t// Element/input types\n\t\t\t\t\"header\": function (elem) {\n\t\t\t\t\treturn rheader.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"input\": function (elem) {\n\t\t\t\t\treturn rinputs.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"button\": function (elem) {\n\t\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t\t\t},\n\n\t\t\t\t\"text\": function (elem) {\n\t\t\t\t\tvar attr;\n\t\t\t\t\treturn elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && (\n\n\t\t\t\t\t// Support: IE<8\n\t\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t\t(attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n\t\t\t\t},\n\n\t\t\t\t// Position-in-collection\n\t\t\t\t\"first\": createPositionalPseudo(function () {\n\t\t\t\t\treturn [0];\n\t\t\t\t}),\n\n\t\t\t\t\"last\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\treturn [length - 1];\n\t\t\t\t}),\n\n\t\t\t\t\"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\treturn [argument < 0 ? argument + length : argument];\n\t\t\t\t}),\n\n\t\t\t\t\"even\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"odd\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 1;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; --i >= 0;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; ++i < length;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\n\t\tExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n\t\t// Add button/input type pseudos\n\t\tfor (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\n\t\t\tExpr.pseudos[i] = createInputPseudo(i);\n\t\t}\n\t\tfor (i in { submit: true, reset: true }) {\n\t\t\tExpr.pseudos[i] = createButtonPseudo(i);\n\t\t}\n\n\t\t// Easy API for creating new setFilters\n\t\tfunction setFilters() {}\n\t\tsetFilters.prototype = Expr.filters = Expr.pseudos;\n\t\tExpr.setFilters = new setFilters();\n\n\t\ttokenize = Sizzle.tokenize = function (selector, parseOnly) {\n\t\t\tvar matched,\n\t\t\t    match,\n\t\t\t    tokens,\n\t\t\t    type,\n\t\t\t    soFar,\n\t\t\t    groups,\n\t\t\t    preFilters,\n\t\t\t    cached = tokenCache[selector + \" \"];\n\n\t\t\tif (cached) {\n\t\t\t\treturn parseOnly ? 0 : cached.slice(0);\n\t\t\t}\n\n\t\t\tsoFar = selector;\n\t\t\tgroups = [];\n\t\t\tpreFilters = Expr.preFilter;\n\n\t\t\twhile (soFar) {\n\n\t\t\t\t// Comma and first run\n\t\t\t\tif (!matched || (match = rcomma.exec(soFar))) {\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\t\t\tsoFar = soFar.slice(match[0].length) || soFar;\n\t\t\t\t\t}\n\t\t\t\t\tgroups.push(tokens = []);\n\t\t\t\t}\n\n\t\t\t\tmatched = false;\n\n\t\t\t\t// Combinators\n\t\t\t\tif (match = rcombinators.exec(soFar)) {\n\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t// Cast descendant combinators to space\n\t\t\t\t\t\ttype: match[0].replace(rtrim, \" \")\n\t\t\t\t\t});\n\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t}\n\n\t\t\t\t// Filters\n\t\t\t\tfor (type in Expr.filter) {\n\t\t\t\t\tif ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n\t\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tmatches: match\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!matched) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the length of the invalid excess\n\t\t\t// if we're just parsing\n\t\t\t// Otherwise, throw an error or return tokens\n\t\t\treturn parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache(selector, groups).slice(0);\n\t\t};\n\n\t\tfunction toSelector(tokens) {\n\t\t\tvar i = 0,\n\t\t\t    len = tokens.length,\n\t\t\t    selector = \"\";\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tselector += tokens[i].value;\n\t\t\t}\n\t\t\treturn selector;\n\t\t}\n\n\t\tfunction addCombinator(matcher, combinator, base) {\n\t\t\tvar dir = combinator.dir,\n\t\t\t    checkNonElements = base && dir === \"parentNode\",\n\t\t\t    doneName = done++;\n\n\t\t\treturn combinator.first ?\n\t\t\t// Check against closest ancestor/preceding element\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\treturn matcher(elem, context, xml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} :\n\n\t\t\t// Check against all ancestor/preceding elements\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\tvar oldCache,\n\t\t\t\t    outerCache,\n\t\t\t\t    newCache = [dirruns, doneName];\n\n\t\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n\t\t\t\tif (xml) {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\touterCache = elem[expando] || (elem[expando] = {});\n\t\t\t\t\t\t\tif ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n\n\t\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\treturn newCache[2] = oldCache[2];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\touterCache[dir] = newCache;\n\n\t\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\t\tif (newCache[2] = matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction elementMatcher(matchers) {\n\t\t\treturn matchers.length > 1 ? function (elem, context, xml) {\n\t\t\t\tvar i = matchers.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (!matchers[i](elem, context, xml)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} : matchers[0];\n\t\t}\n\n\t\tfunction multipleContexts(selector, contexts, results) {\n\t\t\tvar i = 0,\n\t\t\t    len = contexts.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tSizzle(selector, contexts[i], results);\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\n\t\tfunction condense(unmatched, map, filter, context, xml) {\n\t\t\tvar elem,\n\t\t\t    newUnmatched = [],\n\t\t\t    i = 0,\n\t\t\t    len = unmatched.length,\n\t\t\t    mapped = map != null;\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\tif (!filter || filter(elem, context, xml)) {\n\t\t\t\t\t\tnewUnmatched.push(elem);\n\t\t\t\t\t\tif (mapped) {\n\t\t\t\t\t\t\tmap.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newUnmatched;\n\t\t}\n\n\t\tfunction setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n\t\t\tif (postFilter && !postFilter[expando]) {\n\t\t\t\tpostFilter = setMatcher(postFilter);\n\t\t\t}\n\t\t\tif (postFinder && !postFinder[expando]) {\n\t\t\t\tpostFinder = setMatcher(postFinder, postSelector);\n\t\t\t}\n\t\t\treturn markFunction(function (seed, results, context, xml) {\n\t\t\t\tvar temp,\n\t\t\t\t    i,\n\t\t\t\t    elem,\n\t\t\t\t    preMap = [],\n\t\t\t\t    postMap = [],\n\t\t\t\t    preexisting = results.length,\n\n\n\t\t\t\t// Get initial elements from seed or context\n\t\t\t\telems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n\n\n\t\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\t\tmatcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n\t\t\t\t    matcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || (seed ? preFilter : preexisting || postFilter) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults : matcherIn;\n\n\t\t\t\t// Find primary matches\n\t\t\t\tif (matcher) {\n\t\t\t\t\tmatcher(matcherIn, matcherOut, context, xml);\n\t\t\t\t}\n\n\t\t\t\t// Apply postFilter\n\t\t\t\tif (postFilter) {\n\t\t\t\t\ttemp = condense(matcherOut, postMap);\n\t\t\t\t\tpostFilter(temp, [], context, xml);\n\n\t\t\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\t\t\ti = temp.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (elem = temp[i]) {\n\t\t\t\t\t\t\tmatcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (seed) {\n\t\t\t\t\tif (postFinder || preFilter) {\n\t\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (elem = matcherOut[i]) {\n\t\t\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\t\t\ttemp.push(matcherIn[i] = elem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpostFinder(null, matcherOut = [], temp, xml);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n\n\t\t\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add elements to results, through postFinder if defined\n\t\t\t\t} else {\n\t\t\t\t\tmatcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\tpostFinder(null, results, matcherOut, xml);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpush.apply(results, matcherOut);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction matcherFromTokens(tokens) {\n\t\t\tvar checkContext,\n\t\t\t    matcher,\n\t\t\t    j,\n\t\t\t    len = tokens.length,\n\t\t\t    leadingRelative = Expr.relative[tokens[0].type],\n\t\t\t    implicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\t\t    i = leadingRelative ? 1 : 0,\n\n\n\t\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\t\tmatchContext = addCombinator(function (elem) {\n\t\t\t\treturn elem === checkContext;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchAnyContext = addCombinator(function (elem) {\n\t\t\t\treturn indexOf(checkContext, elem) > -1;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchers = [function (elem, context, xml) {\n\t\t\t\tvar ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\t\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\t\tcheckContext = null;\n\t\t\t\treturn ret;\n\t\t\t}];\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (matcher = Expr.relative[tokens[i].type]) {\n\t\t\t\t\tmatchers = [addCombinator(elementMatcher(matchers), matcher)];\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n\t\t\t\t\t// Return special upon seeing a positional matcher\n\t\t\t\t\tif (matcher[expando]) {\n\t\t\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\t\t\tj = ++i;\n\t\t\t\t\t\tfor (; j < len; j++) {\n\t\t\t\t\t\t\tif (Expr.relative[tokens[j].type]) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === \" \" ? \"*\" : \"\" })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n\t\t\t\t\t}\n\t\t\t\t\tmatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn elementMatcher(matchers);\n\t\t}\n\n\t\tfunction matcherFromGroupMatchers(elementMatchers, setMatchers) {\n\t\t\tvar bySet = setMatchers.length > 0,\n\t\t\t    byElement = elementMatchers.length > 0,\n\t\t\t    superMatcher = function (seed, context, xml, results, outermost) {\n\t\t\t\tvar elem,\n\t\t\t\t    j,\n\t\t\t\t    matcher,\n\t\t\t\t    matchedCount = 0,\n\t\t\t\t    i = \"0\",\n\t\t\t\t    unmatched = seed && [],\n\t\t\t\t    setMatched = [],\n\t\t\t\t    contextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n\t\t\t\t    len = elems.length;\n\n\t\t\t\tif (outermost) {\n\t\t\t\t\toutermostContext = context !== document && context;\n\t\t\t\t}\n\n\t\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n\t\t\t\t// Support: IE<9, Safari\n\t\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\t\tfor (; i !== len && (elem = elems[i]) != null; i++) {\n\t\t\t\t\tif (byElement && elem) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (matcher = elementMatchers[j++]) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (outermost) {\n\t\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\t\tif (bySet) {\n\t\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\t\tif (elem = !matcher && elem) {\n\t\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t\tunmatched.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply set filters to unmatched elements\n\t\t\t\tmatchedCount += i;\n\t\t\t\tif (bySet && i !== matchedCount) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (matcher = setMatchers[j++]) {\n\t\t\t\t\t\tmatcher(unmatched, setMatched, context, xml);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\t\tif (matchedCount > 0) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (!(unmatched[i] || setMatched[i])) {\n\t\t\t\t\t\t\t\t\tsetMatched[i] = pop.call(results);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\t\tsetMatched = condense(setMatched);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add matches to results\n\t\t\t\t\tpush.apply(results, setMatched);\n\n\t\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\t\tif (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n\n\t\t\t\t\t\tSizzle.uniqueSort(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override manipulation of globals by nested matchers\n\t\t\t\tif (outermost) {\n\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\toutermostContext = contextBackup;\n\t\t\t\t}\n\n\t\t\t\treturn unmatched;\n\t\t\t};\n\n\t\t\treturn bySet ? markFunction(superMatcher) : superMatcher;\n\t\t}\n\n\t\tcompile = Sizzle.compile = function (selector, match /* Internal Use Only */) {\n\t\t\tvar i,\n\t\t\t    setMatchers = [],\n\t\t\t    elementMatchers = [],\n\t\t\t    cached = compilerCache[selector + \" \"];\n\n\t\t\tif (!cached) {\n\t\t\t\t// Generate a function of recursive functions that can be used to check each element\n\t\t\t\tif (!match) {\n\t\t\t\t\tmatch = tokenize(selector);\n\t\t\t\t}\n\t\t\t\ti = match.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcached = matcherFromTokens(match[i]);\n\t\t\t\t\tif (cached[expando]) {\n\t\t\t\t\t\tsetMatchers.push(cached);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementMatchers.push(cached);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache the compiled function\n\t\t\t\tcached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\n\t\t\t\t// Save selector and tokenization\n\t\t\t\tcached.selector = selector;\n\t\t\t}\n\t\t\treturn cached;\n\t\t};\n\n\t\t/**\r\n   * A low-level selection function that works with Sizzle's compiled\r\n   *  selector functions\r\n   * @param {String|Function} selector A selector or a pre-compiled\r\n   *  selector function built with Sizzle.compile\r\n   * @param {Element} context\r\n   * @param {Array} [results]\r\n   * @param {Array} [seed] A set of elements to match against\r\n   */\n\t\tselect = Sizzle.select = function (selector, context, results, seed) {\n\t\t\tvar i,\n\t\t\t    tokens,\n\t\t\t    token,\n\t\t\t    type,\n\t\t\t    find,\n\t\t\t    compiled = typeof selector === \"function\" && selector,\n\t\t\t    match = !seed && tokenize(selector = compiled.selector || selector);\n\n\t\t\tresults = results || [];\n\n\t\t\t// Try to minimize operations if there is no seed and only one group\n\t\t\tif (match.length === 1) {\n\n\t\t\t\t// Take a shortcut and set the context if the root selector is an ID\n\t\t\t\ttokens = match[0] = match[0].slice(0);\n\t\t\t\tif (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n\n\t\t\t\t\tcontext = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\t\t\t\t\tif (!context) {\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t\t\t} else if (compiled) {\n\t\t\t\t\t\tcontext = context.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = selector.slice(tokens.shift().value.length);\n\t\t\t\t}\n\n\t\t\t\t// Fetch a seed set for right-to-left matching\n\t\t\t\ti = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\ttoken = tokens[i];\n\n\t\t\t\t\t// Abort if we hit a combinator\n\t\t\t\t\tif (Expr.relative[type = token.type]) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (find = Expr.find[type]) {\n\t\t\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\t\t\tif (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n\n\t\t\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\t\t\ttokens.splice(i, 1);\n\t\t\t\t\t\t\tselector = seed.length && toSelector(tokens);\n\t\t\t\t\t\t\tif (!selector) {\n\t\t\t\t\t\t\t\tpush.apply(results, seed);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compile and execute a filtering function if one is not provided\n\t\t\t// Provide `match` to avoid retokenization if we modified the selector above\n\t\t\t(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);\n\t\t\treturn results;\n\t\t};\n\n\t\t// One-time assignments\n\n\t\t// Sort stability\n\t\tsupport.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando;\n\n\t\t// Support: Chrome 14-35+\n\t\t// Always assume duplicates if they aren't passed to the comparison function\n\t\tsupport.detectDuplicates = !!hasDuplicate;\n\n\t\t// Initialize against the default document\n\t\tsetDocument();\n\n\t\t// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n\t\t// Detached nodes confoundingly follow *each other*\n\t\tsupport.sortDetached = assert(function (div1) {\n\t\t\t// Should return 1, but returns 4 (following)\n\t\t\treturn div1.compareDocumentPosition(document.createElement(\"div\")) & 1;\n\t\t});\n\n\t\t// Support: IE<8\n\t\t// Prevent attribute/property \"interpolation\"\n\t\t// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\t\tif (!assert(function (div) {\n\t\t\tdiv.innerHTML = \"<a href='#'></a>\";\n\t\t\treturn div.firstChild.getAttribute(\"href\") === \"#\";\n\t\t})) {\n\t\t\taddHandle(\"type|href|height|width\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use defaultValue in place of getAttribute(\"value\")\n\t\tif (!support.attributes || !assert(function (div) {\n\t\t\tdiv.innerHTML = \"<input/>\";\n\t\t\tdiv.firstChild.setAttribute(\"value\", \"\");\n\t\t\treturn div.firstChild.getAttribute(\"value\") === \"\";\n\t\t})) {\n\t\t\taddHandle(\"value\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n\t\t\t\t\treturn elem.defaultValue;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use getAttributeNode to fetch booleans when getAttribute lies\n\t\tif (!assert(function (div) {\n\t\t\treturn div.getAttribute(\"disabled\") == null;\n\t\t})) {\n\t\t\taddHandle(booleans, function (elem, name, isXML) {\n\t\t\t\tvar val;\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn Sizzle;\n\t}(window);\n\n\tjQuery.find = Sizzle;\n\tjQuery.expr = Sizzle.selectors;\n\tjQuery.expr[\":\"] = jQuery.expr.pseudos;\n\tjQuery.unique = Sizzle.uniqueSort;\n\tjQuery.text = Sizzle.getText;\n\tjQuery.isXMLDoc = Sizzle.isXML;\n\tjQuery.contains = Sizzle.contains;\n\n\tvar rneedsContext = jQuery.expr.match.needsContext;\n\n\tvar rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/;\n\n\tvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n\t// Implement the identical functionality for filter and not\n\tfunction winnow(elements, qualifier, not) {\n\t\tif (jQuery.isFunction(qualifier)) {\n\t\t\treturn jQuery.grep(elements, function (elem, i) {\n\t\t\t\t/* jshint -W018 */\n\t\t\t\treturn !!qualifier.call(elem, i, elem) !== not;\n\t\t\t});\n\t\t}\n\n\t\tif (qualifier.nodeType) {\n\t\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem === qualifier !== not;\n\t\t\t});\n\t\t}\n\n\t\tif (typeof qualifier === \"string\") {\n\t\t\tif (risSimple.test(qualifier)) {\n\t\t\t\treturn jQuery.filter(qualifier, elements, not);\n\t\t\t}\n\n\t\t\tqualifier = jQuery.filter(qualifier, elements);\n\t\t}\n\n\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\treturn jQuery.inArray(elem, qualifier) >= 0 !== not;\n\t\t});\n\t}\n\n\tjQuery.filter = function (expr, elems, not) {\n\t\tvar elem = elems[0];\n\n\t\tif (not) {\n\t\t\texpr = \":not(\" + expr + \")\";\n\t\t}\n\n\t\treturn elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n\t\t\treturn elem.nodeType === 1;\n\t\t}));\n\t};\n\n\tjQuery.fn.extend({\n\t\tfind: function (selector) {\n\t\t\tvar i,\n\t\t\t    ret = [],\n\t\t\t    self = this,\n\t\t\t    len = self.length;\n\n\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\treturn this.pushStack(jQuery(selector).filter(function () {\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tif (jQuery.contains(self[i], this)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tjQuery.find(selector, self[i], ret);\n\t\t\t}\n\n\t\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\t\tret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);\n\t\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\t\treturn ret;\n\t\t},\n\t\tfilter: function (selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], false));\n\t\t},\n\t\tnot: function (selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], true));\n\t\t},\n\t\tis: function (selector) {\n\t\t\treturn !!winnow(this,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n\t\t}\n\t});\n\n\t// Initialize a jQuery object\n\n\n\t// A central reference to the root jQuery(document)\n\tvar rootjQuery,\n\n\n\t// Use the correct document accordingly with window argument (sandbox)\n\tdocument = window.document,\n\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\t    init = jQuery.fn.init = function (selector, context) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif (!selector) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Handle HTML strings\n\t\tif (typeof selector === \"string\") {\n\t\t\tif (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [null, selector, null];\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec(selector);\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif (match && (match[1] || !context)) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif (match[1]) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t// scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n\t\t\t\t\t\tfor (match in context) {\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif (jQuery.isFunction(this[match])) {\n\t\t\t\t\t\t\t\tthis[match](context[match]);\n\n\t\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr(match, context[match]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById(match[2]);\n\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t// Handle the case where IE and Opera return items\n\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\tif (elem.id !== match[2]) {\n\t\t\t\t\t\t\treturn rootjQuery.find(selector);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise, we inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if (!context || context.jquery) {\n\t\t\t\treturn (context || rootjQuery).find(selector);\n\n\t\t\t\t// HANDLE: $(expr, context)\n\t\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor(context).find(selector);\n\t\t\t}\n\n\t\t\t// HANDLE: $(DOMElement)\n\t\t} else if (selector.nodeType) {\n\t\t\tthis.context = this[0] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t\t// HANDLE: $(function)\n\t\t\t// Shortcut for document ready\n\t\t} else if (jQuery.isFunction(selector)) {\n\t\t\treturn typeof rootjQuery.ready !== \"undefined\" ? rootjQuery.ready(selector) :\n\t\t\t// Execute immediately if ready is not present\n\t\t\tselector(jQuery);\n\t\t}\n\n\t\tif (selector.selector !== undefined) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray(selector, this);\n\t};\n\n\t// Give the init function the jQuery prototype for later instantiation\n\tinit.prototype = jQuery.fn;\n\n\t// Initialize central reference\n\trootjQuery = jQuery(document);\n\n\tvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\n\tjQuery.extend({\n\t\tdir: function (elem, dir, until) {\n\t\t\tvar matched = [],\n\t\t\t    cur = elem[dir];\n\n\t\t\twhile (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {\n\t\t\t\tif (cur.nodeType === 1) {\n\t\t\t\t\tmatched.push(cur);\n\t\t\t\t}\n\t\t\t\tcur = cur[dir];\n\t\t\t}\n\t\t\treturn matched;\n\t\t},\n\n\t\tsibling: function (n, elem) {\n\t\t\tvar r = [];\n\n\t\t\tfor (; n; n = n.nextSibling) {\n\t\t\t\tif (n.nodeType === 1 && n !== elem) {\n\t\t\t\t\tr.push(n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn r;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\thas: function (target) {\n\t\t\tvar i,\n\t\t\t    targets = jQuery(target, this),\n\t\t\t    len = targets.length;\n\n\t\t\treturn this.filter(function () {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tif (jQuery.contains(this, targets[i])) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tclosest: function (selectors, context) {\n\t\t\tvar cur,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    matched = [],\n\t\t\t    pos = rneedsContext.test(selectors) || typeof selectors !== \"string\" ? jQuery(selectors, context || this.context) : 0;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tfor (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n\n\t\t\t\t\t\tmatched.push(cur);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);\n\t\t},\n\n\t\t// Determine the position of an element within\n\t\t// the matched set of elements\n\t\tindex: function (elem) {\n\n\t\t\t// No argument, return index in parent\n\t\t\tif (!elem) {\n\t\t\t\treturn this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n\t\t\t}\n\n\t\t\t// index in selector\n\t\t\tif (typeof elem === \"string\") {\n\t\t\t\treturn jQuery.inArray(this[0], jQuery(elem));\n\t\t\t}\n\n\t\t\t// Locate the position of the desired element\n\t\t\treturn jQuery.inArray(\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[0] : elem, this);\n\t\t},\n\n\t\tadd: function (selector, context) {\n\t\t\treturn this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));\n\t\t},\n\n\t\taddBack: function (selector) {\n\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t}\n\t});\n\n\tfunction sibling(cur, dir) {\n\t\tdo {\n\t\t\tcur = cur[dir];\n\t\t} while (cur && cur.nodeType !== 1);\n\n\t\treturn cur;\n\t}\n\n\tjQuery.each({\n\t\tparent: function (elem) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t\t},\n\t\tparents: function (elem) {\n\t\t\treturn jQuery.dir(elem, \"parentNode\");\n\t\t},\n\t\tparentsUntil: function (elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"parentNode\", until);\n\t\t},\n\t\tnext: function (elem) {\n\t\t\treturn sibling(elem, \"nextSibling\");\n\t\t},\n\t\tprev: function (elem) {\n\t\t\treturn sibling(elem, \"previousSibling\");\n\t\t},\n\t\tnextAll: function (elem) {\n\t\t\treturn jQuery.dir(elem, \"nextSibling\");\n\t\t},\n\t\tprevAll: function (elem) {\n\t\t\treturn jQuery.dir(elem, \"previousSibling\");\n\t\t},\n\t\tnextUntil: function (elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"nextSibling\", until);\n\t\t},\n\t\tprevUntil: function (elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"previousSibling\", until);\n\t\t},\n\t\tsiblings: function (elem) {\n\t\t\treturn jQuery.sibling((elem.parentNode || {}).firstChild, elem);\n\t\t},\n\t\tchildren: function (elem) {\n\t\t\treturn jQuery.sibling(elem.firstChild);\n\t\t},\n\t\tcontents: function (elem) {\n\t\t\treturn jQuery.nodeName(elem, \"iframe\") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);\n\t\t}\n\t}, function (name, fn) {\n\t\tjQuery.fn[name] = function (until, selector) {\n\t\t\tvar ret = jQuery.map(this, fn, until);\n\n\t\t\tif (name.slice(-5) !== \"Until\") {\n\t\t\t\tselector = until;\n\t\t\t}\n\n\t\t\tif (selector && typeof selector === \"string\") {\n\t\t\t\tret = jQuery.filter(selector, ret);\n\t\t\t}\n\n\t\t\tif (this.length > 1) {\n\t\t\t\t// Remove duplicates\n\t\t\t\tif (!guaranteedUnique[name]) {\n\t\t\t\t\tret = jQuery.unique(ret);\n\t\t\t\t}\n\n\t\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\t\tif (rparentsprev.test(name)) {\n\t\t\t\t\tret = ret.reverse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\tvar rnotwhite = /\\S+/g;\n\n\t// String to Object options format cache\n\tvar optionsCache = {};\n\n\t// Convert String-formatted options into Object-formatted ones and store in cache\n\tfunction createOptions(options) {\n\t\tvar object = optionsCache[options] = {};\n\t\tjQuery.each(options.match(rnotwhite) || [], function (_, flag) {\n\t\t\tobject[flag] = true;\n\t\t});\n\t\treturn object;\n\t}\n\n\t/*\r\n  * Create a callback list using the following parameters:\r\n  *\r\n  *\toptions: an optional list of space-separated options that will change how\r\n  *\t\t\tthe callback list behaves or a more traditional option object\r\n  *\r\n  * By default a callback list will act like an event callback list and can be\r\n  * \"fired\" multiple times.\r\n  *\r\n  * Possible options:\r\n  *\r\n  *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\r\n  *\r\n  *\tmemory:\t\t\twill keep track of previous values and will call any callback added\r\n  *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\r\n  *\t\t\t\t\tvalues (like a Deferred)\r\n  *\r\n  *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\r\n  *\r\n  *\tstopOnFalse:\tinterrupt callings when a callback returns false\r\n  *\r\n  */\n\tjQuery.Callbacks = function (options) {\n\n\t\t// Convert options from String-formatted to Object-formatted if needed\n\t\t// (we check in cache first)\n\t\toptions = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);\n\n\t\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value (for non-forgettable lists)\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// End of the loop when firing\n\t\tfiringLength,\n\n\t\t// Index of currently firing callback (modified by remove if needed)\n\t\tfiringIndex,\n\n\t\t// First callback to fire (used internally by add and fireWith)\n\t\tfiringStart,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Stack of fire calls for repeatable lists\n\t\tstack = !options.once && [],\n\n\t\t// Fire callbacks\n\t\tfire = function (data) {\n\t\t\tmemory = options.memory && data;\n\t\t\tfired = true;\n\t\t\tfiringIndex = firingStart || 0;\n\t\t\tfiringStart = 0;\n\t\t\tfiringLength = list.length;\n\t\t\tfiring = true;\n\t\t\tfor (; list && firingIndex < firingLength; firingIndex++) {\n\t\t\t\tif (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n\t\t\t\t\tmemory = false; // To prevent further calls using add\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiring = false;\n\t\t\tif (list) {\n\t\t\t\tif (stack) {\n\t\t\t\t\tif (stack.length) {\n\t\t\t\t\t\tfire(stack.shift());\n\t\t\t\t\t}\n\t\t\t\t} else if (memory) {\n\t\t\t\t\tlist = [];\n\t\t\t\t} else {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function () {\n\t\t\t\tif (list) {\n\t\t\t\t\t// First, we save the current length\n\t\t\t\t\tvar start = list.length;\n\t\t\t\t\t(function add(args) {\n\t\t\t\t\t\tjQuery.each(args, function (_, arg) {\n\t\t\t\t\t\t\tvar type = jQuery.type(arg);\n\t\t\t\t\t\t\tif (type === \"function\") {\n\t\t\t\t\t\t\t\tif (!options.unique || !self.has(arg)) {\n\t\t\t\t\t\t\t\t\tlist.push(arg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (arg && arg.length && type !== \"string\") {\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd(arg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(arguments);\n\t\t\t\t\t// Do we need to add the callbacks to the\n\t\t\t\t\t// current firing batch?\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tfiringLength = list.length;\n\t\t\t\t\t\t// With memory, if we're not firing then\n\t\t\t\t\t\t// we should call right away\n\t\t\t\t\t} else if (memory) {\n\t\t\t\t\t\tfiringStart = start;\n\t\t\t\t\t\tfire(memory);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function () {\n\t\t\t\tif (list) {\n\t\t\t\t\tjQuery.each(arguments, function (_, arg) {\n\t\t\t\t\t\tvar index;\n\t\t\t\t\t\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\n\t\t\t\t\t\t\tlist.splice(index, 1);\n\t\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\t\tif (firing) {\n\t\t\t\t\t\t\t\tif (index <= firingLength) {\n\t\t\t\t\t\t\t\t\tfiringLength--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (index <= firingIndex) {\n\t\t\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function (fn) {\n\t\t\t\treturn fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\n\t\t\t},\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function () {\n\t\t\t\tlist = [];\n\t\t\t\tfiringLength = 0;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Have the list do nothing anymore\n\t\t\tdisable: function () {\n\t\t\t\tlist = stack = memory = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it disabled?\n\t\t\tdisabled: function () {\n\t\t\t\treturn !list;\n\t\t\t},\n\t\t\t// Lock the list in its current state\n\t\t\tlock: function () {\n\t\t\t\tstack = undefined;\n\t\t\t\tif (!memory) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it locked?\n\t\t\tlocked: function () {\n\t\t\t\treturn !stack;\n\t\t\t},\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function (context, args) {\n\t\t\t\tif (list && (!fired || stack)) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [context, args.slice ? args.slice() : args];\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tstack.push(args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfire(args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function () {\n\t\t\t\tself.fireWith(this, arguments);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function () {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\t\treturn self;\n\t};\n\n\tjQuery.extend({\n\n\t\tDeferred: function (func) {\n\t\t\tvar tuples = [\n\t\t\t// action, add listener, listener list, final state\n\t\t\t[\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\")]],\n\t\t\t    state = \"pending\",\n\t\t\t    promise = {\n\t\t\t\tstate: function () {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function () {\n\t\t\t\t\tdeferred.done(arguments).fail(arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function () /* fnDone, fnFail, fnProgress */{\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\t\t\t\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction(fns[i]) && fns[i];\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[tuple[1]](function () {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply(this, arguments);\n\t\t\t\t\t\t\t\tif (returned && jQuery.isFunction(returned.promise)) {\n\t\t\t\t\t\t\t\t\treturned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[tuple[0] + \"With\"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function (obj) {\n\t\t\t\t\treturn obj != null ? jQuery.extend(obj, promise) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\t    deferred = {};\n\n\t\t\t// Keep pipe for back-compat\n\t\t\tpromise.pipe = promise.then;\n\n\t\t\t// Add list-specific methods\n\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\tvar list = tuple[2],\n\t\t\t\t    stateString = tuple[3];\n\n\t\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\t\tpromise[tuple[1]] = list.add;\n\n\t\t\t\t// Handle state\n\t\t\t\tif (stateString) {\n\t\t\t\t\tlist.add(function () {\n\t\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\t\tstate = stateString;\n\n\t\t\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t\t}, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n\t\t\t\t}\n\n\t\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\t\tdeferred[tuple[0]] = function () {\n\t\t\t\t\tdeferred[tuple[0] + \"With\"](this === deferred ? promise : this, arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\t\t\t\tdeferred[tuple[0] + \"With\"] = list.fireWith;\n\t\t\t});\n\n\t\t\t// Make the deferred a promise\n\t\t\tpromise.promise(deferred);\n\n\t\t\t// Call given func if any\n\t\t\tif (func) {\n\t\t\t\tfunc.call(deferred, deferred);\n\t\t\t}\n\n\t\t\t// All done!\n\t\t\treturn deferred;\n\t\t},\n\n\t\t// Deferred helper\n\t\twhen: function (subordinate /* , ..., subordinateN */) {\n\t\t\tvar i = 0,\n\t\t\t    resolveValues = slice.call(arguments),\n\t\t\t    length = resolveValues.length,\n\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\n\n\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function (i, contexts, values) {\n\t\t\t\treturn function (value) {\n\t\t\t\t\tcontexts[i] = this;\n\t\t\t\t\tvalues[i] = arguments.length > 1 ? slice.call(arguments) : value;\n\t\t\t\t\tif (values === progressValues) {\n\t\t\t\t\t\tdeferred.notifyWith(contexts, values);\n\t\t\t\t\t} else if (! --remaining) {\n\t\t\t\t\t\tdeferred.resolveWith(contexts, values);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\t    progressValues,\n\t\t\t    progressContexts,\n\t\t\t    resolveContexts;\n\n\t\t\t// add listeners to Deferred subordinates; treat others as resolved\n\t\t\tif (length > 1) {\n\t\t\t\tprogressValues = new Array(length);\n\t\t\t\tprogressContexts = new Array(length);\n\t\t\t\tresolveContexts = new Array(length);\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tif (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\n\t\t\t\t\t\tresolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t--remaining;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we're not waiting on anything, resolve the master\n\t\t\tif (!remaining) {\n\t\t\t\tdeferred.resolveWith(resolveContexts, resolveValues);\n\t\t\t}\n\n\t\t\treturn deferred.promise();\n\t\t}\n\t});\n\n\t// The deferred used on DOM ready\n\tvar readyList;\n\n\tjQuery.fn.ready = function (fn) {\n\t\t// Add the callback\n\t\tjQuery.ready.promise().done(fn);\n\n\t\treturn this;\n\t};\n\n\tjQuery.extend({\n\t\t// Is the DOM ready to be used? Set to true once it occurs.\n\t\tisReady: false,\n\n\t\t// A counter to track how many items to wait for before\n\t\t// the ready event fires. See #6781\n\t\treadyWait: 1,\n\n\t\t// Hold (or release) the ready event\n\t\tholdReady: function (hold) {\n\t\t\tif (hold) {\n\t\t\t\tjQuery.readyWait++;\n\t\t\t} else {\n\t\t\t\tjQuery.ready(true);\n\t\t\t}\n\t\t},\n\n\t\t// Handle when the DOM is ready\n\t\tready: function (wait) {\n\n\t\t\t// Abort if there are pending holds or we're already ready\n\t\t\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n\t\t\tif (!document.body) {\n\t\t\t\treturn setTimeout(jQuery.ready);\n\t\t\t}\n\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\n\t\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\t\tif (wait !== true && --jQuery.readyWait > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there are functions bound, to execute\n\t\t\treadyList.resolveWith(document, [jQuery]);\n\n\t\t\t// Trigger any bound ready events\n\t\t\tif (jQuery.fn.triggerHandler) {\n\t\t\t\tjQuery(document).triggerHandler(\"ready\");\n\t\t\t\tjQuery(document).off(\"ready\");\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\r\n  * Clean-up method for dom ready events\r\n  */\n\tfunction detach() {\n\t\tif (document.addEventListener) {\n\t\t\tdocument.removeEventListener(\"DOMContentLoaded\", completed, false);\n\t\t\twindow.removeEventListener(\"load\", completed, false);\n\t\t} else {\n\t\t\tdocument.detachEvent(\"onreadystatechange\", completed);\n\t\t\twindow.detachEvent(\"onload\", completed);\n\t\t}\n\t}\n\n\t/**\r\n  * The ready event handler and self cleanup method\r\n  */\n\tfunction completed() {\n\t\t// readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n\t\tif (document.addEventListener || event.type === \"load\" || document.readyState === \"complete\") {\n\t\t\tdetach();\n\t\t\tjQuery.ready();\n\t\t}\n\t}\n\n\tjQuery.ready.promise = function (obj) {\n\t\tif (!readyList) {\n\n\t\t\treadyList = jQuery.Deferred();\n\n\t\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t\t// we once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t\t\tif (document.readyState === \"complete\") {\n\t\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\t\tsetTimeout(jQuery.ready);\n\n\t\t\t\t// Standards-based browsers support DOMContentLoaded\n\t\t\t} else if (document.addEventListener) {\n\t\t\t\t// Use the handy event callback\n\t\t\t\tdocument.addEventListener(\"DOMContentLoaded\", completed, false);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twindow.addEventListener(\"load\", completed, false);\n\n\t\t\t\t// If IE event model is used\n\t\t\t} else {\n\t\t\t\t// Ensure firing before onload, maybe late but safe also for iframes\n\t\t\t\tdocument.attachEvent(\"onreadystatechange\", completed);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twindow.attachEvent(\"onload\", completed);\n\n\t\t\t\t// If IE and not a frame\n\t\t\t\t// continually check to see if the document is ready\n\t\t\t\tvar top = false;\n\n\t\t\t\ttry {\n\t\t\t\t\ttop = window.frameElement == null && document.documentElement;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (top && top.doScroll) {\n\t\t\t\t\t(function doScrollCheck() {\n\t\t\t\t\t\tif (!jQuery.isReady) {\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// Use the trick by Diego Perini\n\t\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\n\t\t\t\t\t\t\t\ttop.doScroll(\"left\");\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn setTimeout(doScrollCheck, 50);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// detach all dom ready events\n\t\t\t\t\t\t\tdetach();\n\n\t\t\t\t\t\t\t// and execute any waiting functions\n\t\t\t\t\t\t\tjQuery.ready();\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn readyList.promise(obj);\n\t};\n\n\tvar strundefined = typeof undefined;\n\n\t// Support: IE<9\n\t// Iteration over object's inherited properties before its own\n\tvar i;\n\tfor (i in jQuery(support)) {\n\t\tbreak;\n\t}\n\tsupport.ownLast = i !== \"0\";\n\n\t// Note: most support tests are defined in their respective modules.\n\t// false until the test is run\n\tsupport.inlineBlockNeedsLayout = false;\n\n\t// Execute ASAP in case we need to set body.style.zoom\n\tjQuery(function () {\n\t\t// Minified: var a,b,c,d\n\t\tvar val, div, body, container;\n\n\t\tbody = document.getElementsByTagName(\"body\")[0];\n\t\tif (!body || !body.style) {\n\t\t\t// Return for frameset docs that don't have a body\n\t\t\treturn;\n\t\t}\n\n\t\t// Setup\n\t\tdiv = document.createElement(\"div\");\n\t\tcontainer = document.createElement(\"div\");\n\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\t\tbody.appendChild(container).appendChild(div);\n\n\t\tif (typeof div.style.zoom !== strundefined) {\n\t\t\t// Support: IE<8\n\t\t\t// Check if natively block-level elements act like inline-block\n\t\t\t// elements when setting their display to 'inline' and giving\n\t\t\t// them layout\n\t\t\tdiv.style.cssText = \"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\";\n\n\t\t\tsupport.inlineBlockNeedsLayout = val = div.offsetWidth === 3;\n\t\t\tif (val) {\n\t\t\t\t// Prevent IE 6 from affecting layout for positioned elements #11048\n\t\t\t\t// Prevent IE from shrinking the body in IE 7 mode #12869\n\t\t\t\t// Support: IE<8\n\t\t\t\tbody.style.zoom = 1;\n\t\t\t}\n\t\t}\n\n\t\tbody.removeChild(container);\n\t});\n\n\t(function () {\n\t\tvar div = document.createElement(\"div\");\n\n\t\t// Execute the test only if not already executed in another module.\n\t\tif (support.deleteExpando == null) {\n\t\t\t// Support: IE<9\n\t\t\tsupport.deleteExpando = true;\n\t\t\ttry {\n\t\t\t\tdelete div.test;\n\t\t\t} catch (e) {\n\t\t\t\tsupport.deleteExpando = false;\n\t\t\t}\n\t\t}\n\n\t\t// Null elements to avoid leaks in IE.\n\t\tdiv = null;\n\t})();\n\n\t/**\r\n  * Determines whether an object can have data\r\n  */\n\tjQuery.acceptData = function (elem) {\n\t\tvar noData = jQuery.noData[(elem.nodeName + \" \").toLowerCase()],\n\t\t    nodeType = +elem.nodeType || 1;\n\n\t\t// Do not set data on non-element DOM nodes because it will not be cleared (#8335).\n\t\treturn nodeType !== 1 && nodeType !== 9 ? false :\n\n\t\t// Nodes accept data unless otherwise specified; rejection can be conditional\n\t\t!noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n\t};\n\n\tvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\t    rmultiDash = /([A-Z])/g;\n\n\tfunction dataAttr(elem, key, data) {\n\t\t// If nothing was found internally, try to fetch any\n\t\t// data from the HTML5 data-* attribute\n\t\tif (data === undefined && elem.nodeType === 1) {\n\n\t\t\tvar name = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\n\n\t\t\tdata = elem.getAttribute(name);\n\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\ttry {\n\t\t\t\t\tdata = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null :\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\t\tjQuery.data(elem, key, data);\n\t\t\t} else {\n\t\t\t\tdata = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// checks a cache object for emptiness\n\tfunction isEmptyDataObject(obj) {\n\t\tvar name;\n\t\tfor (name in obj) {\n\n\t\t\t// if the public data object is empty, the private is still empty\n\t\t\tif (name === \"data\" && jQuery.isEmptyObject(obj[name])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (name !== \"toJSON\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction internalData(elem, name, data, pvt /* Internal Use Only */) {\n\t\tif (!jQuery.acceptData(elem)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ret,\n\t\t    thisCache,\n\t\t    internalKey = jQuery.expando,\n\n\n\t\t// We have to handle DOM nodes and JS objects differently because IE6-7\n\t\t// can't GC object references properly across the DOM-JS boundary\n\t\tisNode = elem.nodeType,\n\n\n\t\t// Only DOM nodes need the global jQuery cache; JS object data is\n\t\t// attached directly to the object so GC can occur automatically\n\t\tcache = isNode ? jQuery.cache : elem,\n\n\n\t\t// Only defining an ID for JS objects if its cache already exists allows\n\t\t// the code to shortcut on the same path as a DOM node with no cache\n\t\tid = isNode ? elem[internalKey] : elem[internalKey] && internalKey;\n\n\t\t// Avoid doing any more work than we need to when trying to get data on an\n\t\t// object that has no data at all\n\t\tif ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === \"string\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!id) {\n\t\t\t// Only DOM nodes need a new unique ID for each element since their data\n\t\t\t// ends up in the global cache\n\t\t\tif (isNode) {\n\t\t\t\tid = elem[internalKey] = deletedIds.pop() || jQuery.guid++;\n\t\t\t} else {\n\t\t\t\tid = internalKey;\n\t\t\t}\n\t\t}\n\n\t\tif (!cache[id]) {\n\t\t\t// Avoid exposing jQuery metadata on plain JS objects when the object\n\t\t\t// is serialized using JSON.stringify\n\t\t\tcache[id] = isNode ? {} : { toJSON: jQuery.noop };\n\t\t}\n\n\t\t// An object can be passed to jQuery.data instead of a key/value pair; this gets\n\t\t// shallow copied over onto the existing cache\n\t\tif (typeof name === \"object\" || typeof name === \"function\") {\n\t\t\tif (pvt) {\n\t\t\t\tcache[id] = jQuery.extend(cache[id], name);\n\t\t\t} else {\n\t\t\t\tcache[id].data = jQuery.extend(cache[id].data, name);\n\t\t\t}\n\t\t}\n\n\t\tthisCache = cache[id];\n\n\t\t// jQuery data() is stored in a separate object inside the object's internal data\n\t\t// cache in order to avoid key collisions between internal data and user-defined\n\t\t// data.\n\t\tif (!pvt) {\n\t\t\tif (!thisCache.data) {\n\t\t\t\tthisCache.data = {};\n\t\t\t}\n\n\t\t\tthisCache = thisCache.data;\n\t\t}\n\n\t\tif (data !== undefined) {\n\t\t\tthisCache[jQuery.camelCase(name)] = data;\n\t\t}\n\n\t\t// Check for both converted-to-camel and non-converted data property names\n\t\t// If a data property was specified\n\t\tif (typeof name === \"string\") {\n\n\t\t\t// First Try to find as-is property data\n\t\t\tret = thisCache[name];\n\n\t\t\t// Test for null|undefined property data\n\t\t\tif (ret == null) {\n\n\t\t\t\t// Try to find the camelCased property\n\t\t\t\tret = thisCache[jQuery.camelCase(name)];\n\t\t\t}\n\t\t} else {\n\t\t\tret = thisCache;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tfunction internalRemoveData(elem, name, pvt) {\n\t\tif (!jQuery.acceptData(elem)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar thisCache,\n\t\t    i,\n\t\t    isNode = elem.nodeType,\n\n\n\t\t// See jQuery.data for more information\n\t\tcache = isNode ? jQuery.cache : elem,\n\t\t    id = isNode ? elem[jQuery.expando] : jQuery.expando;\n\n\t\t// If there is already no cache entry for this object, there is no\n\t\t// purpose in continuing\n\t\tif (!cache[id]) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (name) {\n\n\t\t\tthisCache = pvt ? cache[id] : cache[id].data;\n\n\t\t\tif (thisCache) {\n\n\t\t\t\t// Support array or space separated string names for data keys\n\t\t\t\tif (!jQuery.isArray(name)) {\n\n\t\t\t\t\t// try the string as a key before any manipulation\n\t\t\t\t\tif (name in thisCache) {\n\t\t\t\t\t\tname = [name];\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// split the camel cased version by spaces unless a key with the spaces exists\n\t\t\t\t\t\tname = jQuery.camelCase(name);\n\t\t\t\t\t\tif (name in thisCache) {\n\t\t\t\t\t\t\tname = [name];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tname = name.split(\" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\t\tname = name.concat(jQuery.map(name, jQuery.camelCase));\n\t\t\t\t}\n\n\t\t\t\ti = name.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tdelete thisCache[name[i]];\n\t\t\t\t}\n\n\t\t\t\t// If there is no data left in the cache, we want to continue\n\t\t\t\t// and let the cache object itself get destroyed\n\t\t\t\tif (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// See jQuery.data for more information\n\t\tif (!pvt) {\n\t\t\tdelete cache[id].data;\n\n\t\t\t// Don't destroy the parent cache unless the internal data object\n\t\t\t// had been the only thing left in it\n\t\t\tif (!isEmptyDataObject(cache[id])) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Destroy the cache\n\t\tif (isNode) {\n\t\t\tjQuery.cleanData([elem], true);\n\n\t\t\t// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n\t\t\t/* jshint eqeqeq: false */\n\t\t} else if (support.deleteExpando || cache != cache.window) {\n\t\t\t/* jshint eqeqeq: true */\n\t\t\tdelete cache[id];\n\n\t\t\t// When all else fails, null\n\t\t} else {\n\t\t\tcache[id] = null;\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tcache: {},\n\n\t\t// The following elements (space-suffixed to avoid Object.prototype collisions)\n\t\t// throw uncatchable exceptions if you attempt to set expando properties\n\t\tnoData: {\n\t\t\t\"applet \": true,\n\t\t\t\"embed \": true,\n\t\t\t// ...but Flash objects (which have this classid) *can* handle expandos\n\t\t\t\"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n\t\t},\n\n\t\thasData: function (elem) {\n\t\t\telem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];\n\t\t\treturn !!elem && !isEmptyDataObject(elem);\n\t\t},\n\n\t\tdata: function (elem, name, data) {\n\t\t\treturn internalData(elem, name, data);\n\t\t},\n\n\t\tremoveData: function (elem, name) {\n\t\t\treturn internalRemoveData(elem, name);\n\t\t},\n\n\t\t// For internal use only.\n\t\t_data: function (elem, name, data) {\n\t\t\treturn internalData(elem, name, data, true);\n\t\t},\n\n\t\t_removeData: function (elem, name) {\n\t\t\treturn internalRemoveData(elem, name, true);\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdata: function (key, value) {\n\t\t\tvar i,\n\t\t\t    name,\n\t\t\t    data,\n\t\t\t    elem = this[0],\n\t\t\t    attrs = elem && elem.attributes;\n\n\t\t\t// Special expections of .data basically thwart jQuery.access,\n\t\t\t// so implement the relevant behavior ourselves\n\n\t\t\t// Gets all values\n\t\t\tif (key === undefined) {\n\t\t\t\tif (this.length) {\n\t\t\t\t\tdata = jQuery.data(elem);\n\n\t\t\t\t\tif (elem.nodeType === 1 && !jQuery._data(elem, \"parsedAttrs\")) {\n\t\t\t\t\t\ti = attrs.length;\n\t\t\t\t\t\twhile (i--) {\n\n\t\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\t\tif (attrs[i]) {\n\t\t\t\t\t\t\t\tname = attrs[i].name;\n\t\t\t\t\t\t\t\tif (name.indexOf(\"data-\") === 0) {\n\t\t\t\t\t\t\t\t\tname = jQuery.camelCase(name.slice(5));\n\t\t\t\t\t\t\t\t\tdataAttr(elem, name, data[name]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjQuery._data(elem, \"parsedAttrs\", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Sets multiple values\n\t\t\tif (typeof key === \"object\") {\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\tjQuery.data(this, key);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn arguments.length > 1 ?\n\n\t\t\t// Sets one value\n\t\t\tthis.each(function () {\n\t\t\t\tjQuery.data(this, key, value);\n\t\t\t}) :\n\n\t\t\t// Gets one value\n\t\t\t// Try to fetch any internally stored data first\n\t\t\telem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;\n\t\t},\n\n\t\tremoveData: function (key) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeData(this, key);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tqueue: function (elem, type, data) {\n\t\t\tvar queue;\n\n\t\t\tif (elem) {\n\t\t\t\ttype = (type || \"fx\") + \"queue\";\n\t\t\t\tqueue = jQuery._data(elem, type);\n\n\t\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\t\tif (data) {\n\t\t\t\t\tif (!queue || jQuery.isArray(data)) {\n\t\t\t\t\t\tqueue = jQuery._data(elem, type, jQuery.makeArray(data));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqueue.push(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn queue || [];\n\t\t\t}\n\t\t},\n\n\t\tdequeue: function (elem, type) {\n\t\t\ttype = type || \"fx\";\n\n\t\t\tvar queue = jQuery.queue(elem, type),\n\t\t\t    startLength = queue.length,\n\t\t\t    fn = queue.shift(),\n\t\t\t    hooks = jQuery._queueHooks(elem, type),\n\t\t\t    next = function () {\n\t\t\t\tjQuery.dequeue(elem, type);\n\t\t\t};\n\n\t\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\t\tif (fn === \"inprogress\") {\n\t\t\t\tfn = queue.shift();\n\t\t\t\tstartLength--;\n\t\t\t}\n\n\t\t\tif (fn) {\n\n\t\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t\t// automatically dequeued\n\t\t\t\tif (type === \"fx\") {\n\t\t\t\t\tqueue.unshift(\"inprogress\");\n\t\t\t\t}\n\n\t\t\t\t// clear up the last queue stop function\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tfn.call(elem, next, hooks);\n\t\t\t}\n\n\t\t\tif (!startLength && hooks) {\n\t\t\t\thooks.empty.fire();\n\t\t\t}\n\t\t},\n\n\t\t// not intended for public consumption - generates a queueHooks object, or returns the current one\n\t\t_queueHooks: function (elem, type) {\n\t\t\tvar key = type + \"queueHooks\";\n\t\t\treturn jQuery._data(elem, key) || jQuery._data(elem, key, {\n\t\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function () {\n\t\t\t\t\tjQuery._removeData(elem, type + \"queue\");\n\t\t\t\t\tjQuery._removeData(elem, key);\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tqueue: function (type, data) {\n\t\t\tvar setter = 2;\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tdata = type;\n\t\t\t\ttype = \"fx\";\n\t\t\t\tsetter--;\n\t\t\t}\n\n\t\t\tif (arguments.length < setter) {\n\t\t\t\treturn jQuery.queue(this[0], type);\n\t\t\t}\n\n\t\t\treturn data === undefined ? this : this.each(function () {\n\t\t\t\tvar queue = jQuery.queue(this, type, data);\n\n\t\t\t\t// ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks(this, type);\n\n\t\t\t\tif (type === \"fx\" && queue[0] !== \"inprogress\") {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdequeue: function (type) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t});\n\t\t},\n\t\tclearQueue: function (type) {\n\t\t\treturn this.queue(type || \"fx\", []);\n\t\t},\n\t\t// Get a promise resolved when queues of a certain type\n\t\t// are emptied (fx is the type by default)\n\t\tpromise: function (type, obj) {\n\t\t\tvar tmp,\n\t\t\t    count = 1,\n\t\t\t    defer = jQuery.Deferred(),\n\t\t\t    elements = this,\n\t\t\t    i = this.length,\n\t\t\t    resolve = function () {\n\t\t\t\tif (! --count) {\n\t\t\t\t\tdefer.resolveWith(elements, [elements]);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tobj = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\ttype = type || \"fx\";\n\n\t\t\twhile (i--) {\n\t\t\t\ttmp = jQuery._data(elements[i], type + \"queueHooks\");\n\t\t\t\tif (tmp && tmp.empty) {\n\t\t\t\t\tcount++;\n\t\t\t\t\ttmp.empty.add(resolve);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t\treturn defer.promise(obj);\n\t\t}\n\t});\n\tvar pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n\n\tvar cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n\n\tvar isHidden = function (elem, el) {\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css(elem, \"display\") === \"none\" || !jQuery.contains(elem.ownerDocument, elem);\n\t};\n\n\t// Multifunctional method to get and set values of a collection\n\t// The value/s can optionally be executed if it's a function\n\tvar access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n\t\tvar i = 0,\n\t\t    length = elems.length,\n\t\t    bulk = key == null;\n\n\t\t// Sets many values\n\t\tif (jQuery.type(key) === \"object\") {\n\t\t\tchainable = true;\n\t\t\tfor (i in key) {\n\t\t\t\tjQuery.access(elems, fn, i, key[i], true, emptyGet, raw);\n\t\t\t}\n\n\t\t\t// Sets one value\n\t\t} else if (value !== undefined) {\n\t\t\tchainable = true;\n\n\t\t\tif (!jQuery.isFunction(value)) {\n\t\t\t\traw = true;\n\t\t\t}\n\n\t\t\tif (bulk) {\n\t\t\t\t// Bulk operations run against the entire set\n\t\t\t\tif (raw) {\n\t\t\t\t\tfn.call(elems, value);\n\t\t\t\t\tfn = null;\n\n\t\t\t\t\t// ...except when executing function values\n\t\t\t\t} else {\n\t\t\t\t\tbulk = fn;\n\t\t\t\t\tfn = function (elem, key, value) {\n\t\t\t\t\t\treturn bulk.call(jQuery(elem), value);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fn) {\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn chainable ? elems :\n\n\t\t// Gets\n\t\tbulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;\n\t};\n\tvar rcheckableType = /^(?:checkbox|radio)$/i;\n\n\t(function () {\n\t\t// Minified: var a,b,c\n\t\tvar input = document.createElement(\"input\"),\n\t\t    div = document.createElement(\"div\"),\n\t\t    fragment = document.createDocumentFragment();\n\n\t\t// Setup\n\t\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\n\t\t// IE strips leading whitespace when .innerHTML is used\n\t\tsupport.leadingWhitespace = div.firstChild.nodeType === 3;\n\n\t\t// Make sure that tbody elements aren't automatically inserted\n\t\t// IE will insert them into empty tables\n\t\tsupport.tbody = !div.getElementsByTagName(\"tbody\").length;\n\n\t\t// Make sure that link elements get serialized correctly by innerHTML\n\t\t// This requires a wrapper element in IE\n\t\tsupport.htmlSerialize = !!div.getElementsByTagName(\"link\").length;\n\n\t\t// Makes sure cloning an html5 element does not cause problems\n\t\t// Where outerHTML is undefined, this still works\n\t\tsupport.html5Clone = document.createElement(\"nav\").cloneNode(true).outerHTML !== \"<:nav></:nav>\";\n\n\t\t// Check if a disconnected checkbox will retain its checked\n\t\t// value of true after appended to the DOM (IE6/7)\n\t\tinput.type = \"checkbox\";\n\t\tinput.checked = true;\n\t\tfragment.appendChild(input);\n\t\tsupport.appendChecked = input.checked;\n\n\t\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\t\t// Support: IE6-IE11+\n\t\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\t\tsupport.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n\n\t\t// #11217 - WebKit loses check when the name is after the checked attribute\n\t\tfragment.appendChild(div);\n\t\tdiv.innerHTML = \"<input type='radio' checked='checked' name='t'/>\";\n\n\t\t// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3\n\t\t// old WebKit doesn't clone checked state correctly in fragments\n\t\tsupport.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\n\n\t\t// Support: IE<9\n\t\t// Opera does not clone events (and typeof div.attachEvent === undefined).\n\t\t// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()\n\t\tsupport.noCloneEvent = true;\n\t\tif (div.attachEvent) {\n\t\t\tdiv.attachEvent(\"onclick\", function () {\n\t\t\t\tsupport.noCloneEvent = false;\n\t\t\t});\n\n\t\t\tdiv.cloneNode(true).click();\n\t\t}\n\n\t\t// Execute the test only if not already executed in another module.\n\t\tif (support.deleteExpando == null) {\n\t\t\t// Support: IE<9\n\t\t\tsupport.deleteExpando = true;\n\t\t\ttry {\n\t\t\t\tdelete div.test;\n\t\t\t} catch (e) {\n\t\t\t\tsupport.deleteExpando = false;\n\t\t\t}\n\t\t}\n\t})();\n\n\t(function () {\n\t\tvar i,\n\t\t    eventName,\n\t\t    div = document.createElement(\"div\");\n\n\t\t// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)\n\t\tfor (i in { submit: true, change: true, focusin: true }) {\n\t\t\teventName = \"on\" + i;\n\n\t\t\tif (!(support[i + \"Bubbles\"] = eventName in window)) {\n\t\t\t\t// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)\n\t\t\t\tdiv.setAttribute(eventName, \"t\");\n\t\t\t\tsupport[i + \"Bubbles\"] = div.attributes[eventName].expando === false;\n\t\t\t}\n\t\t}\n\n\t\t// Null elements to avoid leaks in IE.\n\t\tdiv = null;\n\t})();\n\n\tvar rformElems = /^(?:input|select|textarea)$/i,\n\t    rkeyEvent = /^key/,\n\t    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\n\t    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\t    rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n\tfunction returnTrue() {\n\t\treturn true;\n\t}\n\n\tfunction returnFalse() {\n\t\treturn false;\n\t}\n\n\tfunction safeActiveElement() {\n\t\ttry {\n\t\t\treturn document.activeElement;\n\t\t} catch (err) {}\n\t}\n\n\t/*\r\n  * Helper functions for managing events -- not part of the public interface.\r\n  * Props to Dean Edwards' addEvent library for many of the ideas.\r\n  */\n\tjQuery.event = {\n\n\t\tglobal: {},\n\n\t\tadd: function (elem, types, handler, data, selector) {\n\t\t\tvar tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObjIn,\n\t\t\t    special,\n\t\t\t    eventHandle,\n\t\t\t    handleObj,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = jQuery._data(elem);\n\n\t\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\t\tif (!elemData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\t\tif (handler.handler) {\n\t\t\t\thandleObjIn = handler;\n\t\t\t\thandler = handleObjIn.handler;\n\t\t\t\tselector = handleObjIn.selector;\n\t\t\t}\n\n\t\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\t\tif (!handler.guid) {\n\t\t\t\thandler.guid = jQuery.guid++;\n\t\t\t}\n\n\t\t\t// Init the element's event structure and main handler, if this is the first\n\t\t\tif (!(events = elemData.events)) {\n\t\t\t\tevents = elemData.events = {};\n\t\t\t}\n\t\t\tif (!(eventHandle = elemData.handle)) {\n\t\t\t\teventHandle = elemData.handle = function (e) {\n\t\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\t\treturn typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;\n\t\t\t\t};\n\t\t\t\t// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n\t\t\t\teventHandle.elem = elem;\n\t\t\t}\n\n\t\t\t// Handle multiple events separated by a space\n\t\t\ttypes = (types || \"\").match(rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\t\tif (!type) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\n\t\t\t\t// Update special based on newly reset type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// handleObj is passed to all event handlers\n\t\t\t\thandleObj = jQuery.extend({\n\t\t\t\t\ttype: type,\n\t\t\t\t\torigType: origType,\n\t\t\t\t\tdata: data,\n\t\t\t\t\thandler: handler,\n\t\t\t\t\tguid: handler.guid,\n\t\t\t\t\tselector: selector,\n\t\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test(selector),\n\t\t\t\t\tnamespace: namespaces.join(\".\")\n\t\t\t\t}, handleObjIn);\n\n\t\t\t\t// Init the event handler queue if we're the first\n\t\t\t\tif (!(handlers = events[type])) {\n\t\t\t\t\thandlers = events[type] = [];\n\t\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t\t// Only use addEventListener/attachEvent if the special events handler returns false\n\t\t\t\t\tif (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n\t\t\t\t\t\t// Bind the global event handler to the element\n\t\t\t\t\t\tif (elem.addEventListener) {\n\t\t\t\t\t\t\telem.addEventListener(type, eventHandle, false);\n\t\t\t\t\t\t} else if (elem.attachEvent) {\n\t\t\t\t\t\t\telem.attachEvent(\"on\" + type, eventHandle);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (special.add) {\n\t\t\t\t\tspecial.add.call(elem, handleObj);\n\n\t\t\t\t\tif (!handleObj.handler.guid) {\n\t\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add to the element's handler list, delegates in front\n\t\t\t\tif (selector) {\n\t\t\t\t\thandlers.splice(handlers.delegateCount++, 0, handleObj);\n\t\t\t\t} else {\n\t\t\t\t\thandlers.push(handleObj);\n\t\t\t\t}\n\n\t\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\t\tjQuery.event.global[type] = true;\n\t\t\t}\n\n\t\t\t// Nullify elem to prevent memory leaks in IE\n\t\t\telem = null;\n\t\t},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function (elem, types, handler, selector, mappedTypes) {\n\t\t\tvar j,\n\t\t\t    handleObj,\n\t\t\t    tmp,\n\t\t\t    origCount,\n\t\t\t    t,\n\t\t\t    events,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = jQuery.hasData(elem) && jQuery._data(elem);\n\n\t\t\tif (!elemData || !(events = elemData.events)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Once for each type.namespace in types; type may be omitted\n\t\t\ttypes = (types || \"\").match(rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\t\tif (!type) {\n\t\t\t\t\tfor (type in events) {\n\t\t\t\t\t\tjQuery.event.remove(elem, type + types[t], handler, selector, true);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\t\t\t\thandlers = events[type] || [];\n\t\t\t\ttmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\");\n\n\t\t\t\t// Remove matching events\n\t\t\t\torigCount = j = handlers.length;\n\t\t\t\twhile (j--) {\n\t\t\t\t\thandleObj = handlers[j];\n\n\t\t\t\t\tif ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n\t\t\t\t\t\thandlers.splice(j, 1);\n\n\t\t\t\t\t\tif (handleObj.selector) {\n\t\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (special.remove) {\n\t\t\t\t\t\t\tspecial.remove.call(elem, handleObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\t\tif (origCount && !handlers.length) {\n\t\t\t\t\tif (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n\t\t\t\t\t\tjQuery.removeEvent(elem, type, elemData.handle);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete events[type];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove the expando if it's no longer used\n\t\t\tif (jQuery.isEmptyObject(events)) {\n\t\t\t\tdelete elemData.handle;\n\n\t\t\t\t// removeData also checks for emptiness and clears the expando if empty\n\t\t\t\t// so use it instead of delete\n\t\t\t\tjQuery._removeData(elem, \"events\");\n\t\t\t}\n\t\t},\n\n\t\ttrigger: function (event, data, elem, onlyHandlers) {\n\t\t\tvar handle,\n\t\t\t    ontype,\n\t\t\t    cur,\n\t\t\t    bubbleType,\n\t\t\t    special,\n\t\t\t    tmp,\n\t\t\t    i,\n\t\t\t    eventPath = [elem || document],\n\t\t\t    type = hasOwn.call(event, \"type\") ? event.type : event,\n\t\t\t    namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n\n\t\t\tcur = tmp = elem = elem || document;\n\n\t\t\t// Don't do events on text and comment nodes\n\t\t\tif (elem.nodeType === 3 || elem.nodeType === 8) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\t\tif (rfocusMorph.test(type + jQuery.event.triggered)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (type.indexOf(\".\") >= 0) {\n\t\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\t\tnamespaces = type.split(\".\");\n\t\t\t\ttype = namespaces.shift();\n\t\t\t\tnamespaces.sort();\n\t\t\t}\n\t\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n\t\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\t\tevent = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === \"object\" && event);\n\n\t\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\t\tevent.namespace = namespaces.join(\".\");\n\t\t\tevent.namespace_re = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n\n\t\t\t// Clean up the event in case it is being reused\n\t\t\tevent.result = undefined;\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = elem;\n\t\t\t}\n\n\t\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\t\tdata = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n\t\t\t// Allow special events to draw outside the lines\n\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\tif (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\t\tif (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n\n\t\t\t\tbubbleType = special.delegateType || type;\n\t\t\t\tif (!rfocusMorph.test(bubbleType + type)) {\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t\tfor (; cur; cur = cur.parentNode) {\n\t\t\t\t\teventPath.push(cur);\n\t\t\t\t\ttmp = cur;\n\t\t\t\t}\n\n\t\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\t\tif (tmp === (elem.ownerDocument || document)) {\n\t\t\t\t\teventPath.push(tmp.defaultView || tmp.parentWindow || window);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fire handlers on the event path\n\t\t\ti = 0;\n\t\t\twhile ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n\n\t\t\t\tevent.type = i > 1 ? bubbleType : special.bindType || type;\n\n\t\t\t\t// jQuery handler\n\t\t\t\thandle = (jQuery._data(cur, \"events\") || {})[event.type] && jQuery._data(cur, \"handle\");\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.apply(cur, data);\n\t\t\t\t}\n\n\t\t\t\t// Native handler\n\t\t\t\thandle = ontype && cur[ontype];\n\t\t\t\tif (handle && handle.apply && jQuery.acceptData(cur)) {\n\t\t\t\t\tevent.result = handle.apply(cur, data);\n\t\t\t\t\tif (event.result === false) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.type = type;\n\n\t\t\t// If nobody prevented the default action, do it now\n\t\t\tif (!onlyHandlers && !event.isDefaultPrevented()) {\n\n\t\t\t\tif ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {\n\n\t\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t\t// Can't use an .isFunction() check here because IE6/7 fails that test.\n\t\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\t\tif (ontype && elem[type] && !jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\t\ttmp = elem[ontype];\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\telem[type]();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// IE<9 dies on focus/blur to hidden element (#1486,#12518)\n\t\t\t\t\t\t\t// only reproducible on winXP IE8 native, not IE9 in IE8 mode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\tdispatch: function (event) {\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix(event);\n\n\t\t\tvar i,\n\t\t\t    ret,\n\t\t\t    handleObj,\n\t\t\t    matched,\n\t\t\t    j,\n\t\t\t    handlerQueue = [],\n\t\t\t    args = slice.call(arguments),\n\t\t\t    handlers = (jQuery._data(this, \"events\") || {})[event.type] || [],\n\t\t\t    special = jQuery.event.special[event.type] || {};\n\n\t\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\t\targs[0] = event;\n\t\t\tevent.delegateTarget = this;\n\n\t\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\t\tif (special.preDispatch && special.preDispatch.call(this, event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine handlers\n\t\t\thandlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n\t\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\t\ti = 0;\n\t\t\twhile ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n\t\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\t\tj = 0;\n\t\t\t\twhile ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n\n\t\t\t\t\t// Triggered event must either 1) have no namespace, or\n\t\t\t\t\t// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\t\tif (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\n\n\t\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\t\tret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n\t\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\t\tif ((event.result = ret) === false) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the postDispatch hook for the mapped type\n\t\t\tif (special.postDispatch) {\n\t\t\t\tspecial.postDispatch.call(this, event);\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\thandlers: function (event, handlers) {\n\t\t\tvar sel,\n\t\t\t    handleObj,\n\t\t\t    matches,\n\t\t\t    i,\n\t\t\t    handlerQueue = [],\n\t\t\t    delegateCount = handlers.delegateCount,\n\t\t\t    cur = event.target;\n\n\t\t\t// Find delegate handlers\n\t\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t\t// Avoid non-left-click bubbling in Firefox (#3861)\n\t\t\tif (delegateCount && cur.nodeType && (!event.button || event.type !== \"click\")) {\n\n\t\t\t\t/* jshint eqeqeq: false */\n\t\t\t\tfor (; cur != this; cur = cur.parentNode || this) {\n\t\t\t\t\t/* jshint eqeqeq: true */\n\n\t\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\t\tif (cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\")) {\n\t\t\t\t\t\tmatches = [];\n\t\t\t\t\t\tfor (i = 0; i < delegateCount; i++) {\n\t\t\t\t\t\t\thandleObj = handlers[i];\n\n\t\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\t\tif (matches[sel] === undefined) {\n\t\t\t\t\t\t\t\tmatches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (matches[sel]) {\n\t\t\t\t\t\t\t\tmatches.push(handleObj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matches.length) {\n\t\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the remaining (directly-bound) handlers\n\t\t\tif (delegateCount < handlers.length) {\n\t\t\t\thandlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });\n\t\t\t}\n\n\t\t\treturn handlerQueue;\n\t\t},\n\n\t\tfix: function (event) {\n\t\t\tif (event[jQuery.expando]) {\n\t\t\t\treturn event;\n\t\t\t}\n\n\t\t\t// Create a writable copy of the event object and normalize some properties\n\t\t\tvar i,\n\t\t\t    prop,\n\t\t\t    copy,\n\t\t\t    type = event.type,\n\t\t\t    originalEvent = event,\n\t\t\t    fixHook = this.fixHooks[type];\n\n\t\t\tif (!fixHook) {\n\t\t\t\tthis.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};\n\t\t\t}\n\t\t\tcopy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n\n\t\t\tevent = new jQuery.Event(originalEvent);\n\n\t\t\ti = copy.length;\n\t\t\twhile (i--) {\n\t\t\t\tprop = copy[i];\n\t\t\t\tevent[prop] = originalEvent[prop];\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// Fix target property (#1925)\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = originalEvent.srcElement || document;\n\t\t\t}\n\n\t\t\t// Support: Chrome 23+, Safari?\n\t\t\t// Target should not be a text node (#504, #13143)\n\t\t\tif (event.target.nodeType === 3) {\n\t\t\t\tevent.target = event.target.parentNode;\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\n\t\t\tevent.metaKey = !!event.metaKey;\n\n\t\t\treturn fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n\t\t},\n\n\t\t// Includes some event props shared by KeyEvent and MouseEvent\n\t\tprops: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n\n\t\tfixHooks: {},\n\n\t\tkeyHooks: {\n\t\t\tprops: \"char charCode key keyCode\".split(\" \"),\n\t\t\tfilter: function (event, original) {\n\n\t\t\t\t// Add which for key events\n\t\t\t\tif (event.which == null) {\n\t\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tmouseHooks: {\n\t\t\tprops: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n\t\t\tfilter: function (event, original) {\n\t\t\t\tvar body,\n\t\t\t\t    eventDoc,\n\t\t\t\t    doc,\n\t\t\t\t    button = original.button,\n\t\t\t\t    fromElement = original.fromElement;\n\n\t\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\t\tif (event.pageX == null && original.clientX != null) {\n\t\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\t\tevent.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n\t\t\t\t\tevent.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n\t\t\t\t}\n\n\t\t\t\t// Add relatedTarget, if necessary\n\t\t\t\tif (!event.relatedTarget && fromElement) {\n\t\t\t\t\tevent.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n\t\t\t\t}\n\n\t\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t\t// Note: button is not normalized, so don't use it\n\t\t\t\tif (!event.which && button !== undefined) {\n\t\t\t\t\tevent.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tspecial: {\n\t\t\tload: {\n\t\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\t\tnoBubble: true\n\t\t\t},\n\t\t\tfocus: {\n\t\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (this !== safeActiveElement() && this.focus) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t\t// If we error on focus to hidden element (#1486, #12518),\n\t\t\t\t\t\t\t// let .trigger() run the handlers\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusin\"\n\t\t\t},\n\t\t\tblur: {\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (this === safeActiveElement() && this.blur) {\n\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusout\"\n\t\t\t},\n\t\t\tclick: {\n\t\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (jQuery.nodeName(this, \"input\") && this.type === \"checkbox\" && this.click) {\n\t\t\t\t\t\tthis.click();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t\t_default: function (event) {\n\t\t\t\t\treturn jQuery.nodeName(event.target, \"a\");\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tbeforeunload: {\n\t\t\t\tpostDispatch: function (event) {\n\n\t\t\t\t\t// Support: Firefox 20+\n\t\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\t\tif (event.result !== undefined && event.originalEvent) {\n\t\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsimulate: function (type, elem, event, bubble) {\n\t\t\t// Piggyback on a donor event to simulate a different one.\n\t\t\t// Fake originalEvent to avoid donor's stopPropagation, but if the\n\t\t\t// simulated event prevents default then we do the same on the donor.\n\t\t\tvar e = jQuery.extend(new jQuery.Event(), event, {\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true,\n\t\t\t\toriginalEvent: {}\n\t\t\t});\n\t\t\tif (bubble) {\n\t\t\t\tjQuery.event.trigger(e, null, elem);\n\t\t\t} else {\n\t\t\t\tjQuery.event.dispatch.call(elem, e);\n\t\t\t}\n\t\t\tif (e.isDefaultPrevented()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {\n\t\tif (elem.removeEventListener) {\n\t\t\telem.removeEventListener(type, handle, false);\n\t\t}\n\t} : function (elem, type, handle) {\n\t\tvar name = \"on\" + type;\n\n\t\tif (elem.detachEvent) {\n\n\t\t\t// #8545, #7054, preventing memory leaks for custom events in IE6-8\n\t\t\t// detachEvent needed property on element, by name of that event, to properly expose it to GC\n\t\t\tif (typeof elem[name] === strundefined) {\n\t\t\t\telem[name] = null;\n\t\t\t}\n\n\t\t\telem.detachEvent(name, handle);\n\t\t}\n\t};\n\n\tjQuery.Event = function (src, props) {\n\t\t// Allow instantiation without the 'new' keyword\n\t\tif (!(this instanceof jQuery.Event)) {\n\t\t\treturn new jQuery.Event(src, props);\n\t\t}\n\n\t\t// Event object\n\t\tif (src && src.type) {\n\t\t\tthis.originalEvent = src;\n\t\t\tthis.type = src.type;\n\n\t\t\t// Events bubbling up the document may have been marked as prevented\n\t\t\t// by a handler lower down the tree; reflect the correct value.\n\t\t\tthis.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\n\t\t\t// Support: IE < 9, Android < 4.0\n\t\t\tsrc.returnValue === false ? returnTrue : returnFalse;\n\n\t\t\t// Event type\n\t\t} else {\n\t\t\tthis.type = src;\n\t\t}\n\n\t\t// Put explicitly provided properties onto the event object\n\t\tif (props) {\n\t\t\tjQuery.extend(this, props);\n\t\t}\n\n\t\t// Create a timestamp if incoming event doesn't have one\n\t\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t\t// Mark it as fixed\n\t\tthis[jQuery.expando] = true;\n\t};\n\n\t// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n\t// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\tjQuery.Event.prototype = {\n\t\tisDefaultPrevented: returnFalse,\n\t\tisPropagationStopped: returnFalse,\n\t\tisImmediatePropagationStopped: returnFalse,\n\n\t\tpreventDefault: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isDefaultPrevented = returnTrue;\n\t\t\tif (!e) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If preventDefault exists, run it on the original event\n\t\t\tif (e.preventDefault) {\n\t\t\t\te.preventDefault();\n\n\t\t\t\t// Support: IE\n\t\t\t\t// Otherwise set the returnValue property of the original event to false\n\t\t\t} else {\n\t\t\t\te.returnValue = false;\n\t\t\t}\n\t\t},\n\t\tstopPropagation: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isPropagationStopped = returnTrue;\n\t\t\tif (!e) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If stopPropagation exists, run it on the original event\n\t\t\tif (e.stopPropagation) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\n\t\t\t// Support: IE\n\t\t\t// Set the cancelBubble property of the original event to true\n\t\t\te.cancelBubble = true;\n\t\t},\n\t\tstopImmediatePropagation: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\t\tif (e && e.stopImmediatePropagation) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t}\n\n\t\t\tthis.stopPropagation();\n\t\t}\n\t};\n\n\t// Create mouseenter/leave events using mouseover/out and event-time checks\n\tjQuery.each({\n\t\tmouseenter: \"mouseover\",\n\t\tmouseleave: \"mouseout\",\n\t\tpointerenter: \"pointerover\",\n\t\tpointerleave: \"pointerout\"\n\t}, function (orig, fix) {\n\t\tjQuery.event.special[orig] = {\n\t\t\tdelegateType: fix,\n\t\t\tbindType: fix,\n\n\t\t\thandle: function (event) {\n\t\t\t\tvar ret,\n\t\t\t\t    target = this,\n\t\t\t\t    related = event.relatedTarget,\n\t\t\t\t    handleObj = event.handleObj;\n\n\t\t\t\t// For mousenter/leave call the handler if related is outside the target.\n\t\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\t\tif (!related || related !== target && !jQuery.contains(target, related)) {\n\t\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\t\tret = handleObj.handler.apply(this, arguments);\n\t\t\t\t\tevent.type = fix;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t});\n\n\t// IE submit delegation\n\tif (!support.submitBubbles) {\n\n\t\tjQuery.event.special.submit = {\n\t\t\tsetup: function () {\n\t\t\t\t// Only need this for delegated form submit events\n\t\t\t\tif (jQuery.nodeName(this, \"form\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Lazy-add a submit handler when a descendant form may potentially be submitted\n\t\t\t\tjQuery.event.add(this, \"click._submit keypress._submit\", function (e) {\n\t\t\t\t\t// Node name check avoids a VML-related crash in IE (#9807)\n\t\t\t\t\tvar elem = e.target,\n\t\t\t\t\t    form = jQuery.nodeName(elem, \"input\") || jQuery.nodeName(elem, \"button\") ? elem.form : undefined;\n\t\t\t\t\tif (form && !jQuery._data(form, \"submitBubbles\")) {\n\t\t\t\t\t\tjQuery.event.add(form, \"submit._submit\", function (event) {\n\t\t\t\t\t\t\tevent._submit_bubble = true;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery._data(form, \"submitBubbles\", true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// return undefined since we don't need an event listener\n\t\t\t},\n\n\t\t\tpostDispatch: function (event) {\n\t\t\t\t// If form was submitted by the user, bubble the event up the tree\n\t\t\t\tif (event._submit_bubble) {\n\t\t\t\t\tdelete event._submit_bubble;\n\t\t\t\t\tif (this.parentNode && !event.isTrigger) {\n\t\t\t\t\t\tjQuery.event.simulate(\"submit\", this.parentNode, event, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tteardown: function () {\n\t\t\t\t// Only need this for delegated form submit events\n\t\t\t\tif (jQuery.nodeName(this, \"form\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n\t\t\t\tjQuery.event.remove(this, \"._submit\");\n\t\t\t}\n\t\t};\n\t}\n\n\t// IE change delegation and checkbox/radio fix\n\tif (!support.changeBubbles) {\n\n\t\tjQuery.event.special.change = {\n\n\t\t\tsetup: function () {\n\n\t\t\t\tif (rformElems.test(this.nodeName)) {\n\t\t\t\t\t// IE doesn't fire change on a check/radio until blur; trigger it on click\n\t\t\t\t\t// after a propertychange. Eat the blur-change in special.change.handle.\n\t\t\t\t\t// This still fires onchange a second time for check/radio after blur.\n\t\t\t\t\tif (this.type === \"checkbox\" || this.type === \"radio\") {\n\t\t\t\t\t\tjQuery.event.add(this, \"propertychange._change\", function (event) {\n\t\t\t\t\t\t\tif (event.originalEvent.propertyName === \"checked\") {\n\t\t\t\t\t\t\t\tthis._just_changed = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery.event.add(this, \"click._change\", function (event) {\n\t\t\t\t\t\t\tif (this._just_changed && !event.isTrigger) {\n\t\t\t\t\t\t\t\tthis._just_changed = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Allow triggered, simulated change events (#11500)\n\t\t\t\t\t\t\tjQuery.event.simulate(\"change\", this, event, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Delegated event; lazy-add a change handler on descendant inputs\n\t\t\t\tjQuery.event.add(this, \"beforeactivate._change\", function (e) {\n\t\t\t\t\tvar elem = e.target;\n\n\t\t\t\t\tif (rformElems.test(elem.nodeName) && !jQuery._data(elem, \"changeBubbles\")) {\n\t\t\t\t\t\tjQuery.event.add(elem, \"change._change\", function (event) {\n\t\t\t\t\t\t\tif (this.parentNode && !event.isSimulated && !event.isTrigger) {\n\t\t\t\t\t\t\t\tjQuery.event.simulate(\"change\", this.parentNode, event, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery._data(elem, \"changeBubbles\", true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\thandle: function (event) {\n\t\t\t\tvar elem = event.target;\n\n\t\t\t\t// Swallow native change events from checkbox/radio, we already triggered them above\n\t\t\t\tif (this !== elem || event.isSimulated || event.isTrigger || elem.type !== \"radio\" && elem.type !== \"checkbox\") {\n\t\t\t\t\treturn event.handleObj.handler.apply(this, arguments);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tteardown: function () {\n\t\t\t\tjQuery.event.remove(this, \"._change\");\n\n\t\t\t\treturn !rformElems.test(this.nodeName);\n\t\t\t}\n\t\t};\n\t}\n\n\t// Create \"bubbling\" focus and blur events\n\tif (!support.focusinBubbles) {\n\t\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function (orig, fix) {\n\n\t\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\t\tvar handler = function (event) {\n\t\t\t\tjQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\n\t\t\t};\n\n\t\t\tjQuery.event.special[fix] = {\n\t\t\t\tsetup: function () {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = jQuery._data(doc, fix);\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.addEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t\tjQuery._data(doc, fix, (attaches || 0) + 1);\n\t\t\t\t},\n\t\t\t\tteardown: function () {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = jQuery._data(doc, fix) - 1;\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.removeEventListener(orig, handler, true);\n\t\t\t\t\t\tjQuery._removeData(doc, fix);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjQuery._data(doc, fix, attaches);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tjQuery.fn.extend({\n\n\t\ton: function (types, selector, data, fn, /*INTERNAL*/one) {\n\t\t\tvar type, origFn;\n\n\t\t\t// Types can be a map of types/handlers\n\t\t\tif (typeof types === \"object\") {\n\t\t\t\t// ( types-Object, selector, data )\n\t\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\t\t// ( types-Object, data )\n\t\t\t\t\tdata = data || selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.on(type, selector, data, types[type], one);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (data == null && fn == null) {\n\t\t\t\t// ( types, fn )\n\t\t\t\tfn = selector;\n\t\t\t\tdata = selector = undefined;\n\t\t\t} else if (fn == null) {\n\t\t\t\tif (typeof selector === \"string\") {\n\t\t\t\t\t// ( types, selector, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = undefined;\n\t\t\t\t} else {\n\t\t\t\t\t// ( types, data, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t} else if (!fn) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (one === 1) {\n\t\t\t\torigFn = fn;\n\t\t\t\tfn = function (event) {\n\t\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\t\tjQuery().off(event);\n\t\t\t\t\treturn origFn.apply(this, arguments);\n\t\t\t\t};\n\t\t\t\t// Use same guid so caller can remove using origFn\n\t\t\t\tfn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.add(this, types, fn, data, selector);\n\t\t\t});\n\t\t},\n\t\tone: function (types, selector, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn, 1);\n\t\t},\n\t\toff: function (types, selector, fn) {\n\t\t\tvar handleObj, type;\n\t\t\tif (types && types.preventDefault && types.handleObj) {\n\t\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\t\thandleObj = types.handleObj;\n\t\t\t\tjQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (typeof types === \"object\") {\n\t\t\t\t// ( types-object [, selector] )\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.off(type, selector, types[type]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (selector === false || typeof selector === \"function\") {\n\t\t\t\t// ( types [, fn] )\n\t\t\t\tfn = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.remove(this, types, fn, selector);\n\t\t\t});\n\t\t},\n\n\t\ttrigger: function (type, data) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.trigger(type, data, this);\n\t\t\t});\n\t\t},\n\t\ttriggerHandler: function (type, data) {\n\t\t\tvar elem = this[0];\n\t\t\tif (elem) {\n\t\t\t\treturn jQuery.event.trigger(type, data, elem, true);\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction createSafeFragment(document) {\n\t\tvar list = nodeNames.split(\"|\"),\n\t\t    safeFrag = document.createDocumentFragment();\n\n\t\tif (safeFrag.createElement) {\n\t\t\twhile (list.length) {\n\t\t\t\tsafeFrag.createElement(list.pop());\n\t\t\t}\n\t\t}\n\t\treturn safeFrag;\n\t}\n\n\tvar nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" + \"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n\t    rinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n\t    rnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\n\t    rleadingWhitespace = /^\\s+/,\n\t    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n\t    rtagName = /<([\\w:]+)/,\n\t    rtbody = /<tbody/i,\n\t    rhtml = /<|&#?\\w+;/,\n\t    rnoInnerhtml = /<(?:script|style|link)/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\t    rscriptType = /^$|\\/(?:java|ecma)script/i,\n\t    rscriptTypeMasked = /^true\\/(.*)/,\n\t    rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\n\n\t// We have to close these tags to support XHTML (#13200)\n\twrapMap = {\n\t\toption: [1, \"<select multiple='multiple'>\", \"</select>\"],\n\t\tlegend: [1, \"<fieldset>\", \"</fieldset>\"],\n\t\tarea: [1, \"<map>\", \"</map>\"],\n\t\tparam: [1, \"<object>\", \"</object>\"],\n\t\tthead: [1, \"<table>\", \"</table>\"],\n\t\ttr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n\t\tcol: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n\t\ttd: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n\n\t\t// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\n\t\t// unless wrapped in a div with non-breaking characters in front of it.\n\t\t_default: support.htmlSerialize ? [0, \"\", \"\"] : [1, \"X<div>\", \"</div>\"]\n\t},\n\t    safeFragment = createSafeFragment(document),\n\t    fragmentDiv = safeFragment.appendChild(document.createElement(\"div\"));\n\n\twrapMap.optgroup = wrapMap.option;\n\twrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n\twrapMap.th = wrapMap.td;\n\n\tfunction getAll(context, tag) {\n\t\tvar elems,\n\t\t    elem,\n\t\t    i = 0,\n\t\t    found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || \"*\") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || \"*\") : undefined;\n\n\t\tif (!found) {\n\t\t\tfor (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {\n\t\t\t\tif (!tag || jQuery.nodeName(elem, tag)) {\n\t\t\t\t\tfound.push(elem);\n\t\t\t\t} else {\n\t\t\t\t\tjQuery.merge(found, getAll(elem, tag));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;\n\t}\n\n\t// Used in buildFragment, fixes the defaultChecked property\n\tfunction fixDefaultChecked(elem) {\n\t\tif (rcheckableType.test(elem.type)) {\n\t\t\telem.defaultChecked = elem.checked;\n\t\t}\n\t}\n\n\t// Support: IE<8\n\t// Manipulating tables requires a tbody\n\tfunction manipulationTarget(elem, content) {\n\t\treturn jQuery.nodeName(elem, \"table\") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\") ? elem.getElementsByTagName(\"tbody\")[0] || elem.appendChild(elem.ownerDocument.createElement(\"tbody\")) : elem;\n\t}\n\n\t// Replace/restore the type attribute of script elements for safe DOM manipulation\n\tfunction disableScript(elem) {\n\t\telem.type = (jQuery.find.attr(elem, \"type\") !== null) + \"/\" + elem.type;\n\t\treturn elem;\n\t}\n\tfunction restoreScript(elem) {\n\t\tvar match = rscriptTypeMasked.exec(elem.type);\n\t\tif (match) {\n\t\t\telem.type = match[1];\n\t\t} else {\n\t\t\telem.removeAttribute(\"type\");\n\t\t}\n\t\treturn elem;\n\t}\n\n\t// Mark scripts as having already been evaluated\n\tfunction setGlobalEval(elems, refElements) {\n\t\tvar elem,\n\t\t    i = 0;\n\t\tfor (; (elem = elems[i]) != null; i++) {\n\t\t\tjQuery._data(elem, \"globalEval\", !refElements || jQuery._data(refElements[i], \"globalEval\"));\n\t\t}\n\t}\n\n\tfunction cloneCopyEvent(src, dest) {\n\n\t\tif (dest.nodeType !== 1 || !jQuery.hasData(src)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar type,\n\t\t    i,\n\t\t    l,\n\t\t    oldData = jQuery._data(src),\n\t\t    curData = jQuery._data(dest, oldData),\n\t\t    events = oldData.events;\n\n\t\tif (events) {\n\t\t\tdelete curData.handle;\n\t\t\tcurData.events = {};\n\n\t\t\tfor (type in events) {\n\t\t\t\tfor (i = 0, l = events[type].length; i < l; i++) {\n\t\t\t\t\tjQuery.event.add(dest, type, events[type][i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// make the cloned public data object a copy from the original\n\t\tif (curData.data) {\n\t\t\tcurData.data = jQuery.extend({}, curData.data);\n\t\t}\n\t}\n\n\tfunction fixCloneNodeIssues(src, dest) {\n\t\tvar nodeName, e, data;\n\n\t\t// We do not need to do anything for non-Elements\n\t\tif (dest.nodeType !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tnodeName = dest.nodeName.toLowerCase();\n\n\t\t// IE6-8 copies events bound via attachEvent when using cloneNode.\n\t\tif (!support.noCloneEvent && dest[jQuery.expando]) {\n\t\t\tdata = jQuery._data(dest);\n\n\t\t\tfor (e in data.events) {\n\t\t\t\tjQuery.removeEvent(dest, e, data.handle);\n\t\t\t}\n\n\t\t\t// Event data gets referenced instead of copied if the expando gets copied too\n\t\t\tdest.removeAttribute(jQuery.expando);\n\t\t}\n\n\t\t// IE blanks contents when cloning scripts, and tries to evaluate newly-set text\n\t\tif (nodeName === \"script\" && dest.text !== src.text) {\n\t\t\tdisableScript(dest).text = src.text;\n\t\t\trestoreScript(dest);\n\n\t\t\t// IE6-10 improperly clones children of object elements using classid.\n\t\t\t// IE10 throws NoModificationAllowedError if parent is null, #12132.\n\t\t} else if (nodeName === \"object\") {\n\t\t\tif (dest.parentNode) {\n\t\t\t\tdest.outerHTML = src.outerHTML;\n\t\t\t}\n\n\t\t\t// This path appears unavoidable for IE9. When cloning an object\n\t\t\t// element in IE9, the outerHTML strategy above is not sufficient.\n\t\t\t// If the src has innerHTML and the destination does not,\n\t\t\t// copy the src.innerHTML into the dest.innerHTML. #10324\n\t\t\tif (support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {\n\t\t\t\tdest.innerHTML = src.innerHTML;\n\t\t\t}\n\t\t} else if (nodeName === \"input\" && rcheckableType.test(src.type)) {\n\t\t\t// IE6-8 fails to persist the checked state of a cloned checkbox\n\t\t\t// or radio button. Worse, IE6-7 fail to give the cloned element\n\t\t\t// a checked appearance if the defaultChecked value isn't also set\n\n\t\t\tdest.defaultChecked = dest.checked = src.checked;\n\n\t\t\t// IE6-7 get confused and end up setting the value of a cloned\n\t\t\t// checkbox/radio button to an empty string instead of \"on\"\n\t\t\tif (dest.value !== src.value) {\n\t\t\t\tdest.value = src.value;\n\t\t\t}\n\n\t\t\t// IE6-8 fails to return the selected option to the default selected\n\t\t\t// state when cloning options\n\t\t} else if (nodeName === \"option\") {\n\t\t\tdest.defaultSelected = dest.selected = src.defaultSelected;\n\n\t\t\t// IE6-8 fails to set the defaultValue to the correct value when\n\t\t\t// cloning other types of input fields\n\t\t} else if (nodeName === \"input\" || nodeName === \"textarea\") {\n\t\t\tdest.defaultValue = src.defaultValue;\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tclone: function (elem, dataAndEvents, deepDataAndEvents) {\n\t\t\tvar destElements,\n\t\t\t    node,\n\t\t\t    clone,\n\t\t\t    i,\n\t\t\t    srcElements,\n\t\t\t    inPage = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\tif (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test(\"<\" + elem.nodeName + \">\")) {\n\t\t\t\tclone = elem.cloneNode(true);\n\n\t\t\t\t// IE<=8 does not properly clone detached, unknown element nodes\n\t\t\t} else {\n\t\t\t\tfragmentDiv.innerHTML = elem.outerHTML;\n\t\t\t\tfragmentDiv.removeChild(clone = fragmentDiv.firstChild);\n\t\t\t}\n\n\t\t\tif ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\t\tdestElements = getAll(clone);\n\t\t\t\tsrcElements = getAll(elem);\n\n\t\t\t\t// Fix all IE cloning issues\n\t\t\t\tfor (i = 0; (node = srcElements[i]) != null; ++i) {\n\t\t\t\t\t// Ensure that the destination node is not null; Fixes #9587\n\t\t\t\t\tif (destElements[i]) {\n\t\t\t\t\t\tfixCloneNodeIssues(node, destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Copy the events from the original to the clone\n\t\t\tif (dataAndEvents) {\n\t\t\t\tif (deepDataAndEvents) {\n\t\t\t\t\tsrcElements = srcElements || getAll(elem);\n\t\t\t\t\tdestElements = destElements || getAll(clone);\n\n\t\t\t\t\tfor (i = 0; (node = srcElements[i]) != null; i++) {\n\t\t\t\t\t\tcloneCopyEvent(node, destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcloneCopyEvent(elem, clone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Preserve script evaluation history\n\t\t\tdestElements = getAll(clone, \"script\");\n\t\t\tif (destElements.length > 0) {\n\t\t\t\tsetGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n\t\t\t}\n\n\t\t\tdestElements = srcElements = node = null;\n\n\t\t\t// Return the cloned set\n\t\t\treturn clone;\n\t\t},\n\n\t\tbuildFragment: function (elems, context, scripts, selection) {\n\t\t\tvar j,\n\t\t\t    elem,\n\t\t\t    contains,\n\t\t\t    tmp,\n\t\t\t    tag,\n\t\t\t    tbody,\n\t\t\t    wrap,\n\t\t\t    l = elems.length,\n\n\n\t\t\t// Ensure a safe fragment\n\t\t\tsafe = createSafeFragment(context),\n\t\t\t    nodes = [],\n\t\t\t    i = 0;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\telem = elems[i];\n\n\t\t\t\tif (elem || elem === 0) {\n\n\t\t\t\t\t// Add nodes directly\n\t\t\t\t\tif (jQuery.type(elem) === \"object\") {\n\t\t\t\t\t\tjQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n\t\t\t\t\t\t// Convert non-html into a text node\n\t\t\t\t\t} else if (!rhtml.test(elem)) {\n\t\t\t\t\t\tnodes.push(context.createTextNode(elem));\n\n\t\t\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp = tmp || safe.appendChild(context.createElement(\"div\"));\n\n\t\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\t\ttag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n\t\t\t\t\t\twrap = wrapMap[tag] || wrapMap._default;\n\n\t\t\t\t\t\ttmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, \"<$1></$2>\") + wrap[2];\n\n\t\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\t\tj = wrap[0];\n\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Manually add leading whitespace removed by IE\n\t\t\t\t\t\tif (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {\n\t\t\t\t\t\t\tnodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove IE's autoinserted <tbody> from table fragments\n\t\t\t\t\t\tif (!support.tbody) {\n\n\t\t\t\t\t\t\t// String was a <table>, *may* have spurious <tbody>\n\t\t\t\t\t\t\telem = tag === \"table\" && !rtbody.test(elem) ? tmp.firstChild :\n\n\t\t\t\t\t\t\t// String was a bare <thead> or <tfoot>\n\t\t\t\t\t\t\twrap[1] === \"<table>\" && !rtbody.test(elem) ? tmp : 0;\n\n\t\t\t\t\t\t\tj = elem && elem.childNodes.length;\n\t\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\t\tif (jQuery.nodeName(tbody = elem.childNodes[j], \"tbody\") && !tbody.childNodes.length) {\n\t\t\t\t\t\t\t\t\telem.removeChild(tbody);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjQuery.merge(nodes, tmp.childNodes);\n\n\t\t\t\t\t\t// Fix #12392 for WebKit and IE > 9\n\t\t\t\t\t\ttmp.textContent = \"\";\n\n\t\t\t\t\t\t// Fix #12392 for oldIE\n\t\t\t\t\t\twhile (tmp.firstChild) {\n\t\t\t\t\t\t\ttmp.removeChild(tmp.firstChild);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remember the top-level container for proper cleanup\n\t\t\t\t\t\ttmp = safe.lastChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fix #11356: Clear elements from fragment\n\t\t\tif (tmp) {\n\t\t\t\tsafe.removeChild(tmp);\n\t\t\t}\n\n\t\t\t// Reset defaultChecked for any radios and checkboxes\n\t\t\t// about to be appended to the DOM in IE 6/7 (#8060)\n\t\t\tif (!support.appendChecked) {\n\t\t\t\tjQuery.grep(getAll(nodes, \"input\"), fixDefaultChecked);\n\t\t\t}\n\n\t\t\ti = 0;\n\t\t\twhile (elem = nodes[i++]) {\n\n\t\t\t\t// #4087 - If origin and destination elements are the same, and this is\n\t\t\t\t// that element, do not do anything\n\t\t\t\tif (selection && jQuery.inArray(elem, selection) !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcontains = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t\t// Append to fragment\n\t\t\t\ttmp = getAll(safe.appendChild(elem), \"script\");\n\n\t\t\t\t// Preserve script evaluation history\n\t\t\t\tif (contains) {\n\t\t\t\t\tsetGlobalEval(tmp);\n\t\t\t\t}\n\n\t\t\t\t// Capture executables\n\t\t\t\tif (scripts) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (elem = tmp[j++]) {\n\t\t\t\t\t\tif (rscriptType.test(elem.type || \"\")) {\n\t\t\t\t\t\t\tscripts.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp = null;\n\n\t\t\treturn safe;\n\t\t},\n\n\t\tcleanData: function (elems, /* internal */acceptData) {\n\t\t\tvar elem,\n\t\t\t    type,\n\t\t\t    id,\n\t\t\t    data,\n\t\t\t    i = 0,\n\t\t\t    internalKey = jQuery.expando,\n\t\t\t    cache = jQuery.cache,\n\t\t\t    deleteExpando = support.deleteExpando,\n\t\t\t    special = jQuery.event.special;\n\n\t\t\tfor (; (elem = elems[i]) != null; i++) {\n\t\t\t\tif (acceptData || jQuery.acceptData(elem)) {\n\n\t\t\t\t\tid = elem[internalKey];\n\t\t\t\t\tdata = id && cache[id];\n\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tif (data.events) {\n\t\t\t\t\t\t\tfor (type in data.events) {\n\t\t\t\t\t\t\t\tif (special[type]) {\n\t\t\t\t\t\t\t\t\tjQuery.event.remove(elem, type);\n\n\t\t\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.removeEvent(elem, type, data.handle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove cache only if it was not already removed by jQuery.event.remove\n\t\t\t\t\t\tif (cache[id]) {\n\n\t\t\t\t\t\t\tdelete cache[id];\n\n\t\t\t\t\t\t\t// IE does not allow us to delete expando properties from nodes,\n\t\t\t\t\t\t\t// nor does it have a removeAttribute function on Document nodes;\n\t\t\t\t\t\t\t// we must handle all of these cases\n\t\t\t\t\t\t\tif (deleteExpando) {\n\t\t\t\t\t\t\t\tdelete elem[internalKey];\n\t\t\t\t\t\t\t} else if (typeof elem.removeAttribute !== strundefined) {\n\t\t\t\t\t\t\t\telem.removeAttribute(internalKey);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\telem[internalKey] = null;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdeletedIds.push(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\ttext: function (value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\treturn value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\tappend: function () {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.appendChild(elem);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tprepend: function () {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.insertBefore(elem, target.firstChild);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tbefore: function () {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tafter: function () {\n\t\t\treturn this.domManip(arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this.nextSibling);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tremove: function (selector, keepData /* Internal Use Only */) {\n\t\t\tvar elem,\n\t\t\t    elems = selector ? jQuery.filter(selector, this) : this,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = elems[i]) != null; i++) {\n\n\t\t\t\tif (!keepData && elem.nodeType === 1) {\n\t\t\t\t\tjQuery.cleanData(getAll(elem));\n\t\t\t\t}\n\n\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\tif (keepData && jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\t\t\tsetGlobalEval(getAll(elem, \"script\"));\n\t\t\t\t\t}\n\t\t\t\t\telem.parentNode.removeChild(elem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tempty: function () {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t}\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\twhile (elem.firstChild) {\n\t\t\t\t\telem.removeChild(elem.firstChild);\n\t\t\t\t}\n\n\t\t\t\t// If this is a select, ensure that it displays empty (#12336)\n\t\t\t\t// Support: IE<9\n\t\t\t\tif (elem.options && jQuery.nodeName(elem, \"select\")) {\n\t\t\t\t\telem.options.length = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tclone: function (dataAndEvents, deepDataAndEvents) {\n\t\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\t\treturn this.map(function () {\n\t\t\t\treturn jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n\t\t\t});\n\t\t},\n\n\t\thtml: function (value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\tvar elem = this[0] || {},\n\t\t\t\t    i = 0,\n\t\t\t\t    l = this.length;\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, \"\") : undefined;\n\t\t\t\t}\n\n\t\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\t\tif (typeof value === \"string\" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n\n\t\t\t\t\tvalue = value.replace(rxhtmlTag, \"<$1></$2>\");\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\t\telem = this[i] || {};\n\t\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telem = 0;\n\n\t\t\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (elem) {\n\t\t\t\t\tthis.empty().append(value);\n\t\t\t\t}\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\treplaceWith: function () {\n\t\t\tvar arg = arguments[0];\n\n\t\t\t// Make the changes, replacing each context element with the new content\n\t\t\tthis.domManip(arguments, function (elem) {\n\t\t\t\targ = this.parentNode;\n\n\t\t\t\tjQuery.cleanData(getAll(this));\n\n\t\t\t\tif (arg) {\n\t\t\t\t\targ.replaceChild(elem, this);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Force removal if there was no new content (e.g., from empty arguments)\n\t\t\treturn arg && (arg.length || arg.nodeType) ? this : this.remove();\n\t\t},\n\n\t\tdetach: function (selector) {\n\t\t\treturn this.remove(selector, true);\n\t\t},\n\n\t\tdomManip: function (args, callback) {\n\n\t\t\t// Flatten any nested arrays\n\t\t\targs = concat.apply([], args);\n\n\t\t\tvar first,\n\t\t\t    node,\n\t\t\t    hasScripts,\n\t\t\t    scripts,\n\t\t\t    doc,\n\t\t\t    fragment,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    set = this,\n\t\t\t    iNoClone = l - 1,\n\t\t\t    value = args[0],\n\t\t\t    isFunction = jQuery.isFunction(value);\n\n\t\t\t// We can't cloneNode fragments that contain checked, in WebKit\n\t\t\tif (isFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n\t\t\t\treturn this.each(function (index) {\n\t\t\t\t\tvar self = set.eq(index);\n\t\t\t\t\tif (isFunction) {\n\t\t\t\t\t\targs[0] = value.call(this, index, self.html());\n\t\t\t\t\t}\n\t\t\t\t\tself.domManip(args, callback);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (l) {\n\t\t\t\tfragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);\n\t\t\t\tfirst = fragment.firstChild;\n\n\t\t\t\tif (fragment.childNodes.length === 1) {\n\t\t\t\t\tfragment = first;\n\t\t\t\t}\n\n\t\t\t\tif (first) {\n\t\t\t\t\tscripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n\t\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up\n\t\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\t\tif (i !== iNoClone) {\n\t\t\t\t\t\t\tnode = jQuery.clone(node, true, true);\n\n\t\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\t\t\tjQuery.merge(scripts, getAll(node, \"script\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcallback.call(this[i], node, i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\tdoc = scripts[scripts.length - 1].ownerDocument;\n\n\t\t\t\t\t\t// Reenable scripts\n\t\t\t\t\t\tjQuery.map(scripts, restoreScript);\n\n\t\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\t\tfor (i = 0; i < hasScripts; i++) {\n\t\t\t\t\t\t\tnode = scripts[i];\n\t\t\t\t\t\t\tif (rscriptType.test(node.type || \"\") && !jQuery._data(node, \"globalEval\") && jQuery.contains(doc, node)) {\n\n\t\t\t\t\t\t\t\tif (node.src) {\n\t\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\t\t\tif (jQuery._evalUrl) {\n\t\t\t\t\t\t\t\t\t\tjQuery._evalUrl(node.src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.globalEval((node.text || node.textContent || node.innerHTML || \"\").replace(rcleanScript, \"\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix #11809: Avoid leaking memory\n\t\t\t\t\tfragment = first = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tjQuery.each({\n\t\tappendTo: \"append\",\n\t\tprependTo: \"prepend\",\n\t\tinsertBefore: \"before\",\n\t\tinsertAfter: \"after\",\n\t\treplaceAll: \"replaceWith\"\n\t}, function (name, original) {\n\t\tjQuery.fn[name] = function (selector) {\n\t\t\tvar elems,\n\t\t\t    i = 0,\n\t\t\t    ret = [],\n\t\t\t    insert = jQuery(selector),\n\t\t\t    last = insert.length - 1;\n\n\t\t\tfor (; i <= last; i++) {\n\t\t\t\telems = i === last ? this : this.clone(true);\n\t\t\t\tjQuery(insert[i])[original](elems);\n\n\t\t\t\t// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\n\t\t\t\tpush.apply(ret, elems.get());\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\n\tvar iframe,\n\t    elemdisplay = {};\n\n\t/**\r\n  * Retrieve the actual display of a element\r\n  * @param {String} name nodeName of the element\r\n  * @param {Object} doc Document object\r\n  */\n\t// Called only from within defaultDisplay\n\tfunction actualDisplay(name, doc) {\n\t\tvar style,\n\t\t    elem = jQuery(doc.createElement(name)).appendTo(doc.body),\n\n\n\t\t// getDefaultComputedStyle might be reliably used only on attached element\n\t\tdisplay = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?\n\n\t\t// Use of this method is a temporary fix (more like optmization) until something better comes along,\n\t\t// since it was removed from specification and supported only in FF\n\t\tstyle.display : jQuery.css(elem[0], \"display\");\n\n\t\t// We don't have any data stored on the element,\n\t\t// so use \"detach\" method as fast way to get rid of the element\n\t\telem.detach();\n\n\t\treturn display;\n\t}\n\n\t/**\r\n  * Try to determine the default display value of an element\r\n  * @param {String} nodeName\r\n  */\n\tfunction defaultDisplay(nodeName) {\n\t\tvar doc = document,\n\t\t    display = elemdisplay[nodeName];\n\n\t\tif (!display) {\n\t\t\tdisplay = actualDisplay(nodeName, doc);\n\n\t\t\t// If the simple way fails, read from inside an iframe\n\t\t\tif (display === \"none\" || !display) {\n\n\t\t\t\t// Use the already-created iframe if possible\n\t\t\t\tiframe = (iframe || jQuery(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(doc.documentElement);\n\n\t\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\t\tdoc = (iframe[0].contentWindow || iframe[0].contentDocument).document;\n\n\t\t\t\t// Support: IE\n\t\t\t\tdoc.write();\n\t\t\t\tdoc.close();\n\n\t\t\t\tdisplay = actualDisplay(nodeName, doc);\n\t\t\t\tiframe.detach();\n\t\t\t}\n\n\t\t\t// Store the correct default display\n\t\t\telemdisplay[nodeName] = display;\n\t\t}\n\n\t\treturn display;\n\t}\n\n\t(function () {\n\t\tvar shrinkWrapBlocksVal;\n\n\t\tsupport.shrinkWrapBlocks = function () {\n\t\t\tif (shrinkWrapBlocksVal != null) {\n\t\t\t\treturn shrinkWrapBlocksVal;\n\t\t\t}\n\n\t\t\t// Will be changed later if needed.\n\t\t\tshrinkWrapBlocksVal = false;\n\n\t\t\t// Minified: var b,c,d\n\t\t\tvar div, body, container;\n\n\t\t\tbody = document.getElementsByTagName(\"body\")[0];\n\t\t\tif (!body || !body.style) {\n\t\t\t\t// Test fired too early or in an unsupported environment, exit.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Setup\n\t\t\tdiv = document.createElement(\"div\");\n\t\t\tcontainer = document.createElement(\"div\");\n\t\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\t\t\tbody.appendChild(container).appendChild(div);\n\n\t\t\t// Support: IE6\n\t\t\t// Check if elements with layout shrink-wrap their children\n\t\t\tif (typeof div.style.zoom !== strundefined) {\n\t\t\t\t// Reset CSS: box-sizing; display; margin; border\n\t\t\t\tdiv.style.cssText =\n\t\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" + \"box-sizing:content-box;display:block;margin:0;border:0;\" + \"padding:1px;width:1px;zoom:1\";\n\t\t\t\tdiv.appendChild(document.createElement(\"div\")).style.width = \"5px\";\n\t\t\t\tshrinkWrapBlocksVal = div.offsetWidth !== 3;\n\t\t\t}\n\n\t\t\tbody.removeChild(container);\n\n\t\t\treturn shrinkWrapBlocksVal;\n\t\t};\n\t})();\n\tvar rmargin = /^margin/;\n\n\tvar rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n\tvar getStyles,\n\t    curCSS,\n\t    rposition = /^(top|right|bottom|left)$/;\n\n\tif (window.getComputedStyle) {\n\t\tgetStyles = function (elem) {\n\t\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t\t// IE throws on elements created in popups\n\t\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\t\tif (elem.ownerDocument.defaultView.opener) {\n\t\t\t\treturn elem.ownerDocument.defaultView.getComputedStyle(elem, null);\n\t\t\t}\n\n\t\t\treturn window.getComputedStyle(elem, null);\n\t\t};\n\n\t\tcurCSS = function (elem, name, computed) {\n\t\t\tvar width,\n\t\t\t    minWidth,\n\t\t\t    maxWidth,\n\t\t\t    ret,\n\t\t\t    style = elem.style;\n\n\t\t\tcomputed = computed || getStyles(elem);\n\n\t\t\t// getPropertyValue is only needed for .css('filter') in IE9, see #12537\n\t\t\tret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;\n\n\t\t\tif (computed) {\n\n\t\t\t\tif (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\t\tret = jQuery.style(elem, name);\n\t\t\t\t}\n\n\t\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t\t\t// Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right\n\t\t\t\t// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n\t\t\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\t\t\t\tif (rnumnonpx.test(ret) && rmargin.test(name)) {\n\n\t\t\t\t\t// Remember the original values\n\t\t\t\t\twidth = style.width;\n\t\t\t\t\tminWidth = style.minWidth;\n\t\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\t\tret = computed.width;\n\n\t\t\t\t\t// Revert the changed values\n\t\t\t\t\tstyle.width = width;\n\t\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Support: IE\n\t\t\t// IE returns zIndex value as an integer.\n\t\t\treturn ret === undefined ? ret : ret + \"\";\n\t\t};\n\t} else if (document.documentElement.currentStyle) {\n\t\tgetStyles = function (elem) {\n\t\t\treturn elem.currentStyle;\n\t\t};\n\n\t\tcurCSS = function (elem, name, computed) {\n\t\t\tvar left,\n\t\t\t    rs,\n\t\t\t    rsLeft,\n\t\t\t    ret,\n\t\t\t    style = elem.style;\n\n\t\t\tcomputed = computed || getStyles(elem);\n\t\t\tret = computed ? computed[name] : undefined;\n\n\t\t\t// Avoid setting ret to empty string here\n\t\t\t// so we don't default to auto\n\t\t\tif (ret == null && style && style[name]) {\n\t\t\t\tret = style[name];\n\t\t\t}\n\n\t\t\t// From the awesome hack by Dean Edwards\n\t\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\n\t\t\t// If we're not dealing with a regular pixel number\n\t\t\t// but a number that has a weird ending, we need to convert it to pixels\n\t\t\t// but not position css attributes, as those are proportional to the parent element instead\n\t\t\t// and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem\n\t\t\tif (rnumnonpx.test(ret) && !rposition.test(name)) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\tleft = style.left;\n\t\t\t\trs = elem.runtimeStyle;\n\t\t\t\trsLeft = rs && rs.left;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tif (rsLeft) {\n\t\t\t\t\trs.left = elem.currentStyle.left;\n\t\t\t\t}\n\t\t\t\tstyle.left = name === \"fontSize\" ? \"1em\" : ret;\n\t\t\t\tret = style.pixelLeft + \"px\";\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.left = left;\n\t\t\t\tif (rsLeft) {\n\t\t\t\t\trs.left = rsLeft;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Support: IE\n\t\t\t// IE returns zIndex value as an integer.\n\t\t\treturn ret === undefined ? ret : ret + \"\" || \"auto\";\n\t\t};\n\t}\n\n\tfunction addGetHookIf(conditionFn, hookFn) {\n\t\t// Define the hook, we'll check on the first run if it's really needed.\n\t\treturn {\n\t\t\tget: function () {\n\t\t\t\tvar condition = conditionFn();\n\n\t\t\t\tif (condition == null) {\n\t\t\t\t\t// The test was not ready at this point; screw the hook this time\n\t\t\t\t\t// but check again when needed next time.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (condition) {\n\t\t\t\t\t// Hook not needed (or it's not possible to use it due to missing dependency),\n\t\t\t\t\t// remove it.\n\t\t\t\t\t// Since there are no other hooks for marginRight, remove the whole object.\n\t\t\t\t\tdelete this.get;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\n\t\t\t\treturn (this.get = hookFn).apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}\n\n\t(function () {\n\t\t// Minified: var b,c,d,e,f,g, h,i\n\t\tvar div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;\n\n\t\t// Setup\n\t\tdiv = document.createElement(\"div\");\n\t\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\t\ta = div.getElementsByTagName(\"a\")[0];\n\t\tstyle = a && a.style;\n\n\t\t// Finish early in limited (non-browser) environments\n\t\tif (!style) {\n\t\t\treturn;\n\t\t}\n\n\t\tstyle.cssText = \"float:left;opacity:.5\";\n\n\t\t// Support: IE<9\n\t\t// Make sure that element opacity exists (as opposed to filter)\n\t\tsupport.opacity = style.opacity === \"0.5\";\n\n\t\t// Verify style float existence\n\t\t// (IE uses styleFloat instead of cssFloat)\n\t\tsupport.cssFloat = !!style.cssFloat;\n\n\t\tdiv.style.backgroundClip = \"content-box\";\n\t\tdiv.cloneNode(true).style.backgroundClip = \"\";\n\t\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\t\t// Support: Firefox<29, Android 2.3\n\t\t// Vendor-prefix box-sizing\n\t\tsupport.boxSizing = style.boxSizing === \"\" || style.MozBoxSizing === \"\" || style.WebkitBoxSizing === \"\";\n\n\t\tjQuery.extend(support, {\n\t\t\treliableHiddenOffsets: function () {\n\t\t\t\tif (reliableHiddenOffsetsVal == null) {\n\t\t\t\t\tcomputeStyleTests();\n\t\t\t\t}\n\t\t\t\treturn reliableHiddenOffsetsVal;\n\t\t\t},\n\n\t\t\tboxSizingReliable: function () {\n\t\t\t\tif (boxSizingReliableVal == null) {\n\t\t\t\t\tcomputeStyleTests();\n\t\t\t\t}\n\t\t\t\treturn boxSizingReliableVal;\n\t\t\t},\n\n\t\t\tpixelPosition: function () {\n\t\t\t\tif (pixelPositionVal == null) {\n\t\t\t\t\tcomputeStyleTests();\n\t\t\t\t}\n\t\t\t\treturn pixelPositionVal;\n\t\t\t},\n\n\t\t\t// Support: Android 2.3\n\t\t\treliableMarginRight: function () {\n\t\t\t\tif (reliableMarginRightVal == null) {\n\t\t\t\t\tcomputeStyleTests();\n\t\t\t\t}\n\t\t\t\treturn reliableMarginRightVal;\n\t\t\t}\n\t\t});\n\n\t\tfunction computeStyleTests() {\n\t\t\t// Minified: var b,c,d,j\n\t\t\tvar div, body, container, contents;\n\n\t\t\tbody = document.getElementsByTagName(\"body\")[0];\n\t\t\tif (!body || !body.style) {\n\t\t\t\t// Test fired too early or in an unsupported environment, exit.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Setup\n\t\t\tdiv = document.createElement(\"div\");\n\t\t\tcontainer = document.createElement(\"div\");\n\t\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\t\t\tbody.appendChild(container).appendChild(div);\n\n\t\t\tdiv.style.cssText =\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;\" + \"box-sizing:border-box;display:block;margin-top:1%;top:1%;\" + \"border:1px;padding:1px;width:4px;position:absolute\";\n\n\t\t\t// Support: IE<9\n\t\t\t// Assume reasonable values in the absence of getComputedStyle\n\t\t\tpixelPositionVal = boxSizingReliableVal = false;\n\t\t\treliableMarginRightVal = true;\n\n\t\t\t// Check for getComputedStyle so that this code is not run in IE<9.\n\t\t\tif (window.getComputedStyle) {\n\t\t\t\tpixelPositionVal = (window.getComputedStyle(div, null) || {}).top !== \"1%\";\n\t\t\t\tboxSizingReliableVal = (window.getComputedStyle(div, null) || { width: \"4px\" }).width === \"4px\";\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Div with explicit width and no margin-right incorrectly\n\t\t\t\t// gets computed margin-right based on width of container (#3333)\n\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t\tcontents = div.appendChild(document.createElement(\"div\"));\n\n\t\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\t\tcontents.style.cssText = div.style.cssText =\n\t\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" + \"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\n\t\t\t\tcontents.style.marginRight = contents.style.width = \"0\";\n\t\t\t\tdiv.style.width = \"1px\";\n\n\t\t\t\treliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);\n\n\t\t\t\tdiv.removeChild(contents);\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Check if table cells still have offsetWidth/Height when they are set\n\t\t\t// to display:none and there are still other visible table cells in a\n\t\t\t// table row; if so, offsetWidth/Height are not reliable for use when\n\t\t\t// determining if an element has been hidden directly using\n\t\t\t// display:none (it is still safe to use offsets if a parent element is\n\t\t\t// hidden; don safety goggles and see bug #4512 for more information).\n\t\t\tdiv.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n\t\t\tcontents = div.getElementsByTagName(\"td\");\n\t\t\tcontents[0].style.cssText = \"margin:0;border:0;padding:0;display:none\";\n\t\t\treliableHiddenOffsetsVal = contents[0].offsetHeight === 0;\n\t\t\tif (reliableHiddenOffsetsVal) {\n\t\t\t\tcontents[0].style.display = \"\";\n\t\t\t\tcontents[1].style.display = \"none\";\n\t\t\t\treliableHiddenOffsetsVal = contents[0].offsetHeight === 0;\n\t\t\t}\n\n\t\t\tbody.removeChild(container);\n\t\t}\n\t})();\n\n\t// A method for quickly swapping in/out CSS properties to get correct calculations.\n\tjQuery.swap = function (elem, options, callback, args) {\n\t\tvar ret,\n\t\t    name,\n\t\t    old = {};\n\n\t\t// Remember the old values, and insert the new ones\n\t\tfor (name in options) {\n\t\t\told[name] = elem.style[name];\n\t\t\telem.style[name] = options[name];\n\t\t}\n\n\t\tret = callback.apply(elem, args || []);\n\n\t\t// Revert the old values\n\t\tfor (name in options) {\n\t\t\telem.style[name] = old[name];\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\tvar ralpha = /alpha\\([^)]*\\)/i,\n\t    ropacity = /opacity\\s*=\\s*([^)]*)/,\n\n\n\t// swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n\t// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\t    rnumsplit = new RegExp(\"^(\" + pnum + \")(.*)$\", \"i\"),\n\t    rrelNum = new RegExp(\"^([+-])=(\" + pnum + \")\", \"i\"),\n\t    cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\t    cssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\t    cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\n\t// return a css property mapped to a potentially vendor prefixed property\n\tfunction vendorPropName(style, name) {\n\n\t\t// shortcut for names that are not vendor prefixed\n\t\tif (name in style) {\n\t\t\treturn name;\n\t\t}\n\n\t\t// check for vendor prefixed names\n\t\tvar capName = name.charAt(0).toUpperCase() + name.slice(1),\n\t\t    origName = name,\n\t\t    i = cssPrefixes.length;\n\n\t\twhile (i--) {\n\t\t\tname = cssPrefixes[i] + capName;\n\t\t\tif (name in style) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\treturn origName;\n\t}\n\n\tfunction showHide(elements, show) {\n\t\tvar display,\n\t\t    elem,\n\t\t    hidden,\n\t\t    values = [],\n\t\t    index = 0,\n\t\t    length = elements.length;\n\n\t\tfor (; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvalues[index] = jQuery._data(elem, \"olddisplay\");\n\t\t\tdisplay = elem.style.display;\n\t\t\tif (show) {\n\t\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t\t// being hidden by cascaded rules or not\n\t\t\t\tif (!values[index] && display === \"none\") {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\n\t\t\t\t// Set elements which have been overridden with display: none\n\t\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t\t// for such an element\n\t\t\t\tif (elem.style.display === \"\" && isHidden(elem)) {\n\t\t\t\t\tvalues[index] = jQuery._data(elem, \"olddisplay\", defaultDisplay(elem.nodeName));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thidden = isHidden(elem);\n\n\t\t\t\tif (display && display !== \"none\" || !hidden) {\n\t\t\t\t\tjQuery._data(elem, \"olddisplay\", hidden ? display : jQuery.css(elem, \"display\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the display of most of the elements in a second loop\n\t\t// to avoid the constant reflow\n\t\tfor (index = 0; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!show || elem.style.display === \"none\" || elem.style.display === \"\") {\n\t\t\t\telem.style.display = show ? values[index] || \"\" : \"none\";\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\tfunction setPositiveNumber(elem, value, subtract) {\n\t\tvar matches = rnumsplit.exec(value);\n\t\treturn matches ?\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max(0, matches[1] - (subtract || 0)) + (matches[2] || \"px\") : value;\n\t}\n\n\tfunction augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n\t\tvar i = extra === (isBorderBox ? \"border\" : \"content\") ?\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\t\t    val = 0;\n\n\t\tfor (; i < 4; i += 2) {\n\t\t\t// both box models exclude margin, so add it if we want it\n\t\t\tif (extra === \"margin\") {\n\t\t\t\tval += jQuery.css(elem, extra + cssExpand[i], true, styles);\n\t\t\t}\n\n\t\t\tif (isBorderBox) {\n\t\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\t\tif (extra === \"content\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\t\t\t\t}\n\n\t\t\t\t// at this point, extra isn't border nor margin, so remove border\n\t\t\t\tif (extra !== \"margin\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// at this point, extra isn't content, so add padding\n\t\t\t\tval += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\n\t\t\t\t// at this point, extra isn't content nor padding, so add border\n\t\t\t\tif (extra !== \"padding\") {\n\t\t\t\t\tval += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tfunction getWidthOrHeight(elem, name, extra) {\n\n\t\t// Start with offset property, which is equivalent to the border-box value\n\t\tvar valueIsBorderBox = true,\n\t\t    val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\t    styles = getStyles(elem),\n\t\t    isBorderBox = support.boxSizing && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\";\n\n\t\t// some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\t\tif (val <= 0 || val == null) {\n\t\t\t// Fall back to computed then uncomputed css if necessary\n\t\t\tval = curCSS(elem, name, styles);\n\t\t\tif (val < 0 || val == null) {\n\t\t\t\tval = elem.style[name];\n\t\t\t}\n\n\t\t\t// Computed unit is not pixels. Stop here and return.\n\t\t\tif (rnumnonpx.test(val)) {\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\t// we need the check for style in case a browser which returns unreliable values\n\t\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\t\tvalueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);\n\n\t\t\t// Normalize \"\", auto, and prepare for extra\n\t\t\tval = parseFloat(val) || 0;\n\t\t}\n\n\t\t// use the active box-sizing model to add/subtract irrelevant styles\n\t\treturn val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n\t}\n\n\tjQuery.extend({\n\t\t// Add in style property hooks for overriding the default\n\t\t// behavior of getting and setting a style property\n\t\tcssHooks: {\n\t\t\topacity: {\n\t\t\t\tget: function (elem, computed) {\n\t\t\t\t\tif (computed) {\n\t\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\t\tvar ret = curCSS(elem, \"opacity\");\n\t\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Don't automatically add \"px\" to these possibly-unitless properties\n\t\tcssNumber: {\n\t\t\t\"columnCount\": true,\n\t\t\t\"fillOpacity\": true,\n\t\t\t\"flexGrow\": true,\n\t\t\t\"flexShrink\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"opacity\": true,\n\t\t\t\"order\": true,\n\t\t\t\"orphans\": true,\n\t\t\t\"widows\": true,\n\t\t\t\"zIndex\": true,\n\t\t\t\"zoom\": true\n\t\t},\n\n\t\t// Add in properties whose names you wish to fix before\n\t\t// setting or getting the value\n\t\tcssProps: {\n\t\t\t// normalize float css property\n\t\t\t\"float\": support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n\t\t},\n\n\t\t// Get and set the style property on a DOM Node\n\t\tstyle: function (elem, name, value, extra) {\n\t\t\t// Don't set styles on text and comment nodes\n\t\t\tif (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tvar ret,\n\t\t\t    type,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name),\n\t\t\t    style = elem.style;\n\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));\n\n\t\t\t// gets hook for the prefixed version\n\t\t\t// followed by the unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// Check if we're setting a value\n\t\t\tif (value !== undefined) {\n\t\t\t\ttype = typeof value;\n\n\t\t\t\t// convert relative number strings (+= or -=) to relative numbers. #7345\n\t\t\t\tif (type === \"string\" && (ret = rrelNum.exec(value))) {\n\t\t\t\t\tvalue = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));\n\t\t\t\t\t// Fixes bug #9237\n\t\t\t\t\ttype = \"number\";\n\t\t\t\t}\n\n\t\t\t\t// Make sure that null and NaN values aren't set. See: #7116\n\t\t\t\tif (value == null || value !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If a number was passed in, add 'px' to the (except for certain CSS properties)\n\t\t\t\tif (type === \"number\" && !jQuery.cssNumber[origName]) {\n\t\t\t\t\tvalue += \"px\";\n\t\t\t\t}\n\n\t\t\t\t// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\n\t\t\t\t// but it would mean to define eight (for every problematic property) identical functions\n\t\t\t\tif (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n\t\t\t\t\tstyle[name] = \"inherit\";\n\t\t\t\t}\n\n\t\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n\n\t\t\t\t\t// Support: IE\n\t\t\t\t\t// Swallow errors from 'invalid' CSS values (#5509)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstyle[name] = value;\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise just get the value from the style object\n\t\t\t\treturn style[name];\n\t\t\t}\n\t\t},\n\n\t\tcss: function (elem, name, extra, styles) {\n\t\t\tvar num,\n\t\t\t    val,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name);\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));\n\n\t\t\t// gets hook for the prefixed version\n\t\t\t// followed by the unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// If a hook was provided get the computed value from there\n\t\t\tif (hooks && \"get\" in hooks) {\n\t\t\t\tval = hooks.get(elem, true, extra);\n\t\t\t}\n\n\t\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\t\tif (val === undefined) {\n\t\t\t\tval = curCSS(elem, name, styles);\n\t\t\t}\n\n\t\t\t//convert \"normal\" to computed value\n\t\t\tif (val === \"normal\" && name in cssNormalTransform) {\n\t\t\t\tval = cssNormalTransform[name];\n\t\t\t}\n\n\t\t\t// Return, converting to number if forced or a qualifier was provided and val looks numeric\n\t\t\tif (extra === \"\" || extra) {\n\t\t\t\tnum = parseFloat(val);\n\t\t\t\treturn extra === true || jQuery.isNumeric(num) ? num || 0 : val;\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t});\n\n\tjQuery.each([\"height\", \"width\"], function (i, name) {\n\t\tjQuery.cssHooks[name] = {\n\t\t\tget: function (elem, computed, extra) {\n\t\t\t\tif (computed) {\n\t\t\t\t\t// certain elements can have dimension info if we invisibly show them\n\t\t\t\t\t// however, it must have a current display style that would benefit from this\n\t\t\t\t\treturn rdisplayswap.test(jQuery.css(elem, \"display\")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {\n\t\t\t\t\t\treturn getWidthOrHeight(elem, name, extra);\n\t\t\t\t\t}) : getWidthOrHeight(elem, name, extra);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset: function (elem, value, extra) {\n\t\t\t\tvar styles = extra && getStyles(elem);\n\t\t\t\treturn setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles) : 0);\n\t\t\t}\n\t\t};\n\t});\n\n\tif (!support.opacity) {\n\t\tjQuery.cssHooks.opacity = {\n\t\t\tget: function (elem, computed) {\n\t\t\t\t// IE uses filters for opacity\n\t\t\t\treturn ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\") ? 0.01 * parseFloat(RegExp.$1) + \"\" : computed ? \"1\" : \"\";\n\t\t\t},\n\n\t\t\tset: function (elem, value) {\n\t\t\t\tvar style = elem.style,\n\t\t\t\t    currentStyle = elem.currentStyle,\n\t\t\t\t    opacity = jQuery.isNumeric(value) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\n\t\t\t\t    filter = currentStyle && currentStyle.filter || style.filter || \"\";\n\n\t\t\t\t// IE has trouble with opacity if it does not have layout\n\t\t\t\t// Force it by setting the zoom level\n\t\t\t\tstyle.zoom = 1;\n\n\t\t\t\t// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\n\t\t\t\t// if value === \"\", then remove inline opacity #12685\n\t\t\t\tif ((value >= 1 || value === \"\") && jQuery.trim(filter.replace(ralpha, \"\")) === \"\" && style.removeAttribute) {\n\n\t\t\t\t\t// Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\n\t\t\t\t\t// if \"filter:\" is present at all, clearType is disabled, we want to avoid this\n\t\t\t\t\t// style.removeAttribute is IE Only, but so apparently is this code path...\n\t\t\t\t\tstyle.removeAttribute(\"filter\");\n\n\t\t\t\t\t// if there is no filter style applied in a css rule or unset inline opacity, we are done\n\t\t\t\t\tif (value === \"\" || currentStyle && !currentStyle.filter) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// otherwise, set new filter values\n\t\t\t\tstyle.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + \" \" + opacity;\n\t\t\t}\n\t\t};\n\t}\n\n\tjQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {\n\t\tif (computed) {\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t// Work around by temporarily setting element display to inline-block\n\t\t\treturn jQuery.swap(elem, { \"display\": \"inline-block\" }, curCSS, [elem, \"marginRight\"]);\n\t\t}\n\t});\n\n\t// These hooks are used by animate to expand properties\n\tjQuery.each({\n\t\tmargin: \"\",\n\t\tpadding: \"\",\n\t\tborder: \"Width\"\n\t}, function (prefix, suffix) {\n\t\tjQuery.cssHooks[prefix + suffix] = {\n\t\t\texpand: function (value) {\n\t\t\t\tvar i = 0,\n\t\t\t\t    expanded = {},\n\n\n\t\t\t\t// assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n\t\t\t\tfor (; i < 4; i++) {\n\t\t\t\t\texpanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n\t\t\t\t}\n\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t};\n\n\t\tif (!rmargin.test(prefix)) {\n\t\t\tjQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tcss: function (name, value) {\n\t\t\treturn access(this, function (elem, name, value) {\n\t\t\t\tvar styles,\n\t\t\t\t    len,\n\t\t\t\t    map = {},\n\t\t\t\t    i = 0;\n\n\t\t\t\tif (jQuery.isArray(name)) {\n\t\t\t\t\tstyles = getStyles(elem);\n\t\t\t\t\tlen = name.length;\n\n\t\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t\tmap[name[i]] = jQuery.css(elem, name[i], false, styles);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn map;\n\t\t\t\t}\n\n\t\t\t\treturn value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n\t\t\t}, name, value, arguments.length > 1);\n\t\t},\n\t\tshow: function () {\n\t\t\treturn showHide(this, true);\n\t\t},\n\t\thide: function () {\n\t\t\treturn showHide(this);\n\t\t},\n\t\ttoggle: function (state) {\n\t\t\tif (typeof state === \"boolean\") {\n\t\t\t\treturn state ? this.show() : this.hide();\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (isHidden(this)) {\n\t\t\t\t\tjQuery(this).show();\n\t\t\t\t} else {\n\t\t\t\t\tjQuery(this).hide();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction Tween(elem, options, prop, end, easing) {\n\t\treturn new Tween.prototype.init(elem, options, prop, end, easing);\n\t}\n\tjQuery.Tween = Tween;\n\n\tTween.prototype = {\n\t\tconstructor: Tween,\n\t\tinit: function (elem, options, prop, end, easing, unit) {\n\t\t\tthis.elem = elem;\n\t\t\tthis.prop = prop;\n\t\t\tthis.easing = easing || \"swing\";\n\t\t\tthis.options = options;\n\t\t\tthis.start = this.now = this.cur();\n\t\t\tthis.end = end;\n\t\t\tthis.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n\t\t},\n\t\tcur: function () {\n\t\t\tvar hooks = Tween.propHooks[this.prop];\n\n\t\t\treturn hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n\t\t},\n\t\trun: function (percent) {\n\t\t\tvar eased,\n\t\t\t    hooks = Tween.propHooks[this.prop];\n\n\t\t\tif (this.options.duration) {\n\t\t\t\tthis.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n\t\t\t} else {\n\t\t\t\tthis.pos = eased = percent;\n\t\t\t}\n\t\t\tthis.now = (this.end - this.start) * eased + this.start;\n\n\t\t\tif (this.options.step) {\n\t\t\t\tthis.options.step.call(this.elem, this.now, this);\n\t\t\t}\n\n\t\t\tif (hooks && hooks.set) {\n\t\t\t\thooks.set(this);\n\t\t\t} else {\n\t\t\t\tTween.propHooks._default.set(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tTween.prototype.init.prototype = Tween.prototype;\n\n\tTween.propHooks = {\n\t\t_default: {\n\t\t\tget: function (tween) {\n\t\t\t\tvar result;\n\n\t\t\t\tif (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\n\t\t\t\t\treturn tween.elem[tween.prop];\n\t\t\t\t}\n\n\t\t\t\t// passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t\t// attempt a parseFloat and fallback to a string if the parse fails\n\t\t\t\t// so, simple values such as \"10px\" are parsed to Float.\n\t\t\t\t// complex values such as \"rotate(1rad)\" are returned as is.\n\t\t\t\tresult = jQuery.css(tween.elem, tween.prop, \"\");\n\t\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t\t},\n\t\t\tset: function (tween) {\n\t\t\t\t// use step hook for back compat - use cssHook if its there - use .style if its\n\t\t\t\t// available and use plain properties where available\n\t\t\t\tif (jQuery.fx.step[tween.prop]) {\n\t\t\t\t\tjQuery.fx.step[tween.prop](tween);\n\t\t\t\t} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n\t\t\t\t\tjQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n\t\t\t\t} else {\n\t\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Support: IE <=9\n\t// Panic based approach to setting things on disconnected nodes\n\n\tTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\t\tset: function (tween) {\n\t\t\tif (tween.elem.nodeType && tween.elem.parentNode) {\n\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.easing = {\n\t\tlinear: function (p) {\n\t\t\treturn p;\n\t\t},\n\t\tswing: function (p) {\n\t\t\treturn 0.5 - Math.cos(p * Math.PI) / 2;\n\t\t}\n\t};\n\n\tjQuery.fx = Tween.prototype.init;\n\n\t// Back Compat <1.8 extension point\n\tjQuery.fx.step = {};\n\n\tvar fxNow,\n\t    timerId,\n\t    rfxtypes = /^(?:toggle|show|hide)$/,\n\t    rfxnum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\"),\n\t    rrun = /queueHooks$/,\n\t    animationPrefilters = [defaultPrefilter],\n\t    tweeners = {\n\t\t\"*\": [function (prop, value) {\n\t\t\tvar tween = this.createTween(prop, value),\n\t\t\t    target = tween.cur(),\n\t\t\t    parts = rfxnum.exec(value),\n\t\t\t    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n\n\n\t\t\t// Starting value computation is required for potential unit mismatches\n\t\t\tstart = (jQuery.cssNumber[prop] || unit !== \"px\" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),\n\t\t\t    scale = 1,\n\t\t\t    maxIterations = 20;\n\n\t\t\tif (start && start[3] !== unit) {\n\t\t\t\t// Trust units reported by jQuery.css\n\t\t\t\tunit = unit || start[3];\n\n\t\t\t\t// Make sure we update the tween properties later on\n\t\t\t\tparts = parts || [];\n\n\t\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\t\tstart = +target || 1;\n\n\t\t\t\tdo {\n\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*\n\t\t\t\t\t// Use a string for doubling factor so we don't accidentally see scale as unchanged below\n\t\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t\t// Adjust and apply\n\t\t\t\t\tstart = start / scale;\n\t\t\t\t\tjQuery.style(tween.elem, prop, start + unit);\n\n\t\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t\t\t\t// And breaking the loop if scale is unchanged or perfect, or if we've just had enough\n\t\t\t\t} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\n\t\t\t}\n\n\t\t\t// Update tween properties\n\t\t\tif (parts) {\n\t\t\t\tstart = tween.start = +start || +target || 0;\n\t\t\t\ttween.unit = unit;\n\t\t\t\t// If a +=/-= token was provided, we're doing a relative animation\n\t\t\t\ttween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];\n\t\t\t}\n\n\t\t\treturn tween;\n\t\t}]\n\t};\n\n\t// Animations created synchronously will run synchronously\n\tfunction createFxNow() {\n\t\tsetTimeout(function () {\n\t\t\tfxNow = undefined;\n\t\t});\n\t\treturn fxNow = jQuery.now();\n\t}\n\n\t// Generate parameters to create a standard animation\n\tfunction genFx(type, includeWidth) {\n\t\tvar which,\n\t\t    attrs = { height: type },\n\t\t    i = 0;\n\n\t\t// if we include width, step value is 1 to do all cssExpand values,\n\t\t// if we don't include width, step value is 2 to skip over Left and Right\n\t\tincludeWidth = includeWidth ? 1 : 0;\n\t\tfor (; i < 4; i += 2 - includeWidth) {\n\t\t\twhich = cssExpand[i];\n\t\t\tattrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n\t\t}\n\n\t\tif (includeWidth) {\n\t\t\tattrs.opacity = attrs.width = type;\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\tfunction createTween(value, prop, animation) {\n\t\tvar tween,\n\t\t    collection = (tweeners[prop] || []).concat(tweeners[\"*\"]),\n\t\t    index = 0,\n\t\t    length = collection.length;\n\t\tfor (; index < length; index++) {\n\t\t\tif (tween = collection[index].call(animation, prop, value)) {\n\n\t\t\t\t// we're done with this property\n\t\t\t\treturn tween;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction defaultPrefilter(elem, props, opts) {\n\t\t/* jshint validthis: true */\n\t\tvar prop,\n\t\t    value,\n\t\t    toggle,\n\t\t    tween,\n\t\t    hooks,\n\t\t    oldfire,\n\t\t    display,\n\t\t    checkDisplay,\n\t\t    anim = this,\n\t\t    orig = {},\n\t\t    style = elem.style,\n\t\t    hidden = elem.nodeType && isHidden(elem),\n\t\t    dataShow = jQuery._data(elem, \"fxshow\");\n\n\t\t// handle queue: false promises\n\t\tif (!opts.queue) {\n\t\t\thooks = jQuery._queueHooks(elem, \"fx\");\n\t\t\tif (hooks.unqueued == null) {\n\t\t\t\thooks.unqueued = 0;\n\t\t\t\toldfire = hooks.empty.fire;\n\t\t\t\thooks.empty.fire = function () {\n\t\t\t\t\tif (!hooks.unqueued) {\n\t\t\t\t\t\toldfire();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\thooks.unqueued++;\n\n\t\t\tanim.always(function () {\n\t\t\t\t// doing this makes sure that the complete handler will be called\n\t\t\t\t// before this completes\n\t\t\t\tanim.always(function () {\n\t\t\t\t\thooks.unqueued--;\n\t\t\t\t\tif (!jQuery.queue(elem, \"fx\").length) {\n\t\t\t\t\t\thooks.empty.fire();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// height/width overflow pass\n\t\tif (elem.nodeType === 1 && (\"height\" in props || \"width\" in props)) {\n\t\t\t// Make sure that nothing sneaks out\n\t\t\t// Record all 3 overflow attributes because IE does not\n\t\t\t// change the overflow attribute when overflowX and\n\t\t\t// overflowY are set to the same value\n\t\t\topts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n\t\t\t// Set display property to inline-block for height/width\n\t\t\t// animations on inline elements that are having width/height animated\n\t\t\tdisplay = jQuery.css(elem, \"display\");\n\n\t\t\t// Test default display if display is currently \"none\"\n\t\t\tcheckDisplay = display === \"none\" ? jQuery._data(elem, \"olddisplay\") || defaultDisplay(elem.nodeName) : display;\n\n\t\t\tif (checkDisplay === \"inline\" && jQuery.css(elem, \"float\") === \"none\") {\n\n\t\t\t\t// inline-level elements accept inline-block;\n\t\t\t\t// block-level elements need to be inline with layout\n\t\t\t\tif (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === \"inline\") {\n\t\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t\t} else {\n\t\t\t\t\tstyle.zoom = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (opts.overflow) {\n\t\t\tstyle.overflow = \"hidden\";\n\t\t\tif (!support.shrinkWrapBlocks()) {\n\t\t\t\tanim.always(function () {\n\t\t\t\t\tstyle.overflow = opts.overflow[0];\n\t\t\t\t\tstyle.overflowX = opts.overflow[1];\n\t\t\t\t\tstyle.overflowY = opts.overflow[2];\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// show/hide pass\n\t\tfor (prop in props) {\n\t\t\tvalue = props[prop];\n\t\t\tif (rfxtypes.exec(value)) {\n\t\t\t\tdelete props[prop];\n\t\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\t\tif (value === (hidden ? \"hide\" : \"show\")) {\n\n\t\t\t\t\t// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\t\tif (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\torig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n\n\t\t\t\t// Any non-fx value stops us from restoring the original display value\n\t\t\t} else {\n\t\t\t\tdisplay = undefined;\n\t\t\t}\n\t\t}\n\n\t\tif (!jQuery.isEmptyObject(orig)) {\n\t\t\tif (dataShow) {\n\t\t\t\tif (\"hidden\" in dataShow) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = jQuery._data(elem, \"fxshow\", {});\n\t\t\t}\n\n\t\t\t// store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\t\tif (toggle) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\t\t\tif (hidden) {\n\t\t\t\tjQuery(elem).show();\n\t\t\t} else {\n\t\t\t\tanim.done(function () {\n\t\t\t\t\tjQuery(elem).hide();\n\t\t\t\t});\n\t\t\t}\n\t\t\tanim.done(function () {\n\t\t\t\tvar prop;\n\t\t\t\tjQuery._removeData(elem, \"fxshow\");\n\t\t\t\tfor (prop in orig) {\n\t\t\t\t\tjQuery.style(elem, prop, orig[prop]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfor (prop in orig) {\n\t\t\t\ttween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n\t\t\t\tif (!(prop in dataShow)) {\n\t\t\t\t\tdataShow[prop] = tween.start;\n\t\t\t\t\tif (hidden) {\n\t\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t\t} else if ((display === \"none\" ? defaultDisplay(elem.nodeName) : display) === \"inline\") {\n\t\t\tstyle.display = display;\n\t\t}\n\t}\n\n\tfunction propFilter(props, specialEasing) {\n\t\tvar index, name, easing, value, hooks;\n\n\t\t// camelCase, specialEasing and expand cssHook pass\n\t\tfor (index in props) {\n\t\t\tname = jQuery.camelCase(index);\n\t\t\teasing = specialEasing[name];\n\t\t\tvalue = props[index];\n\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\teasing = value[1];\n\t\t\t\tvalue = props[index] = value[0];\n\t\t\t}\n\n\t\t\tif (index !== name) {\n\t\t\t\tprops[name] = value;\n\t\t\t\tdelete props[index];\n\t\t\t}\n\n\t\t\thooks = jQuery.cssHooks[name];\n\t\t\tif (hooks && \"expand\" in hooks) {\n\t\t\t\tvalue = hooks.expand(value);\n\t\t\t\tdelete props[name];\n\n\t\t\t\t// not quite $.extend, this wont overwrite keys already present.\n\t\t\t\t// also - reusing 'index' from above because we have the correct \"name\"\n\t\t\t\tfor (index in value) {\n\t\t\t\t\tif (!(index in props)) {\n\t\t\t\t\t\tprops[index] = value[index];\n\t\t\t\t\t\tspecialEasing[index] = easing;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tspecialEasing[name] = easing;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction Animation(elem, properties, options) {\n\t\tvar result,\n\t\t    stopped,\n\t\t    index = 0,\n\t\t    length = animationPrefilters.length,\n\t\t    deferred = jQuery.Deferred().always(function () {\n\t\t\t// don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\t    tick = function () {\n\t\t\tif (stopped) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n\n\t\t\t// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)\n\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t    percent = 1 - temp,\n\t\t\t    index = 0,\n\t\t\t    length = animation.tweens.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tanimation.tweens[index].run(percent);\n\t\t\t}\n\n\t\t\tdeferred.notifyWith(elem, [animation, percent, remaining]);\n\n\t\t\tif (percent < 1 && length) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith(elem, [animation]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t    animation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend({}, properties),\n\t\t\topts: jQuery.extend(true, { specialEasing: {} }, options),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function (prop, end) {\n\t\t\t\tvar tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n\t\t\t\tanimation.tweens.push(tween);\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function (gotoEnd) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t// if we are going to the end, we want to run all the tweens\n\t\t\t\t// otherwise we skip this part\n\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif (stopped) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor (; index < length; index++) {\n\t\t\t\t\tanimation.tweens[index].run(1);\n\t\t\t\t}\n\n\t\t\t\t// resolve when we played the last frame\n\t\t\t\t// otherwise, reject\n\t\t\t\tif (gotoEnd) {\n\t\t\t\t\tdeferred.resolveWith(elem, [animation, gotoEnd]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(elem, [animation, gotoEnd]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\t    props = animation.props;\n\n\t\tpropFilter(props, animation.opts.specialEasing);\n\n\t\tfor (; index < length; index++) {\n\t\t\tresult = animationPrefilters[index].call(animation, elem, props, animation.opts);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tjQuery.map(props, createTween, animation);\n\n\t\tif (jQuery.isFunction(animation.opts.start)) {\n\t\t\tanimation.opts.start.call(elem, animation);\n\t\t}\n\n\t\tjQuery.fx.timer(jQuery.extend(tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t}));\n\n\t\t// attach callbacks from options\n\t\treturn animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n\t}\n\n\tjQuery.Animation = jQuery.extend(Animation, {\n\t\ttweener: function (props, callback) {\n\t\t\tif (jQuery.isFunction(props)) {\n\t\t\t\tcallback = props;\n\t\t\t\tprops = [\"*\"];\n\t\t\t} else {\n\t\t\t\tprops = props.split(\" \");\n\t\t\t}\n\n\t\t\tvar prop,\n\t\t\t    index = 0,\n\t\t\t    length = props.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tprop = props[index];\n\t\t\t\ttweeners[prop] = tweeners[prop] || [];\n\t\t\t\ttweeners[prop].unshift(callback);\n\t\t\t}\n\t\t},\n\n\t\tprefilter: function (callback, prepend) {\n\t\t\tif (prepend) {\n\t\t\t\tanimationPrefilters.unshift(callback);\n\t\t\t} else {\n\t\t\t\tanimationPrefilters.push(callback);\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.speed = function (speed, easing, fn) {\n\t\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend({}, speed) : {\n\t\t\tcomplete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n\t\t\tduration: speed,\n\t\t\teasing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n\t\t};\n\n\t\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;\n\n\t\t// normalize opt.queue - true/undefined/null -> \"fx\"\n\t\tif (opt.queue == null || opt.queue === true) {\n\t\t\topt.queue = \"fx\";\n\t\t}\n\n\t\t// Queueing\n\t\topt.old = opt.complete;\n\n\t\topt.complete = function () {\n\t\t\tif (jQuery.isFunction(opt.old)) {\n\t\t\t\topt.old.call(this);\n\t\t\t}\n\n\t\t\tif (opt.queue) {\n\t\t\t\tjQuery.dequeue(this, opt.queue);\n\t\t\t}\n\t\t};\n\n\t\treturn opt;\n\t};\n\n\tjQuery.fn.extend({\n\t\tfadeTo: function (speed, to, easing, callback) {\n\n\t\t\t// show any hidden elements after setting opacity to 0\n\t\t\treturn this.filter(isHidden).css(\"opacity\", 0).show()\n\n\t\t\t// animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback);\n\t\t},\n\t\tanimate: function (prop, speed, easing, callback) {\n\t\t\tvar empty = jQuery.isEmptyObject(prop),\n\t\t\t    optall = jQuery.speed(speed, easing, callback),\n\t\t\t    doAnimation = function () {\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation(this, jQuery.extend({}, prop), optall);\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif (empty || jQuery._data(this, \"finish\")) {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\t\treturn empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n\t\t},\n\t\tstop: function (type, clearQueue, gotoEnd) {\n\t\t\tvar stopQueue = function (hooks) {\n\t\t\t\tvar stop = hooks.stop;\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tstop(gotoEnd);\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tgotoEnd = clearQueue;\n\t\t\t\tclearQueue = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\tif (clearQueue && type !== false) {\n\t\t\t\tthis.queue(type || \"fx\", []);\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar dequeue = true,\n\t\t\t\t    index = type != null && type + \"queueHooks\",\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    data = jQuery._data(this);\n\n\t\t\t\tif (index) {\n\t\t\t\t\tif (data[index] && data[index].stop) {\n\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (index in data) {\n\t\t\t\t\t\tif (data[index] && data[index].stop && rrun.test(index)) {\n\t\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n\t\t\t\t\t\ttimers[index].anim.stop(gotoEnd);\n\t\t\t\t\t\tdequeue = false;\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// start the next in the queue if the last step wasn't forced\n\t\t\t\t// timers currently will call their complete callbacks, which will dequeue\n\t\t\t\t// but only if they were gotoEnd\n\t\t\t\tif (dequeue || !gotoEnd) {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfinish: function (type) {\n\t\t\tif (type !== false) {\n\t\t\t\ttype = type || \"fx\";\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tvar index,\n\t\t\t\t    data = jQuery._data(this),\n\t\t\t\t    queue = data[type + \"queue\"],\n\t\t\t\t    hooks = data[type + \"queueHooks\"],\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    length = queue ? queue.length : 0;\n\n\t\t\t\t// enable finishing flag on private data\n\t\t\t\tdata.finish = true;\n\n\t\t\t\t// empty the queue first\n\t\t\t\tjQuery.queue(this, type, []);\n\n\t\t\t\tif (hooks && hooks.stop) {\n\t\t\t\t\thooks.stop.call(this, true);\n\t\t\t\t}\n\n\t\t\t\t// look for any active animations, and finish them\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && timers[index].queue === type) {\n\t\t\t\t\t\ttimers[index].anim.stop(true);\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// look for any animations in the old queue and finish them\n\t\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\t\tif (queue[index] && queue[index].finish) {\n\t\t\t\t\t\tqueue[index].finish.call(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// turn off finishing flag\n\t\t\t\tdelete data.finish;\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n\t\tvar cssFn = jQuery.fn[name];\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n\t\t};\n\t});\n\n\t// Generate shortcuts for custom animations\n\tjQuery.each({\n\t\tslideDown: genFx(\"show\"),\n\t\tslideUp: genFx(\"hide\"),\n\t\tslideToggle: genFx(\"toggle\"),\n\t\tfadeIn: { opacity: \"show\" },\n\t\tfadeOut: { opacity: \"hide\" },\n\t\tfadeToggle: { opacity: \"toggle\" }\n\t}, function (name, props) {\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn this.animate(props, speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.timers = [];\n\tjQuery.fx.tick = function () {\n\t\tvar timer,\n\t\t    timers = jQuery.timers,\n\t\t    i = 0;\n\n\t\tfxNow = jQuery.now();\n\n\t\tfor (; i < timers.length; i++) {\n\t\t\ttimer = timers[i];\n\t\t\t// Checks the timer has not already been removed\n\t\t\tif (!timer() && timers[i] === timer) {\n\t\t\t\ttimers.splice(i--, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (!timers.length) {\n\t\t\tjQuery.fx.stop();\n\t\t}\n\t\tfxNow = undefined;\n\t};\n\n\tjQuery.fx.timer = function (timer) {\n\t\tjQuery.timers.push(timer);\n\t\tif (timer()) {\n\t\t\tjQuery.fx.start();\n\t\t} else {\n\t\t\tjQuery.timers.pop();\n\t\t}\n\t};\n\n\tjQuery.fx.interval = 13;\n\n\tjQuery.fx.start = function () {\n\t\tif (!timerId) {\n\t\t\ttimerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);\n\t\t}\n\t};\n\n\tjQuery.fx.stop = function () {\n\t\tclearInterval(timerId);\n\t\ttimerId = null;\n\t};\n\n\tjQuery.fx.speeds = {\n\t\tslow: 600,\n\t\tfast: 200,\n\t\t// Default speed\n\t\t_default: 400\n\t};\n\n\t// Based off of the plugin by Clint Helfers, with permission.\n\t// http://blindsignals.com/index.php/2009/07/jquery-delay/\n\tjQuery.fn.delay = function (time, type) {\n\t\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n\t\ttype = type || \"fx\";\n\n\t\treturn this.queue(type, function (next, hooks) {\n\t\t\tvar timeout = setTimeout(next, time);\n\t\t\thooks.stop = function () {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t};\n\t\t});\n\t};\n\n\t(function () {\n\t\t// Minified: var a,b,c,d,e\n\t\tvar input, div, select, a, opt;\n\n\t\t// Setup\n\t\tdiv = document.createElement(\"div\");\n\t\tdiv.setAttribute(\"className\", \"t\");\n\t\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\t\ta = div.getElementsByTagName(\"a\")[0];\n\n\t\t// First batch of tests.\n\t\tselect = document.createElement(\"select\");\n\t\topt = select.appendChild(document.createElement(\"option\"));\n\t\tinput = div.getElementsByTagName(\"input\")[0];\n\n\t\ta.style.cssText = \"top:1px\";\n\n\t\t// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n\t\tsupport.getSetAttribute = div.className !== \"t\";\n\n\t\t// Get the style information from getAttribute\n\t\t// (IE uses .cssText instead)\n\t\tsupport.style = /top/.test(a.getAttribute(\"style\"));\n\n\t\t// Make sure that URLs aren't manipulated\n\t\t// (IE normalizes it by default)\n\t\tsupport.hrefNormalized = a.getAttribute(\"href\") === \"/a\";\n\n\t\t// Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)\n\t\tsupport.checkOn = !!input.value;\n\n\t\t// Make sure that a selected-by-default option has a working selected property.\n\t\t// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\n\t\tsupport.optSelected = opt.selected;\n\n\t\t// Tests for enctype support on a form (#6743)\n\t\tsupport.enctype = !!document.createElement(\"form\").enctype;\n\n\t\t// Make sure that the options inside disabled selects aren't marked as disabled\n\t\t// (WebKit marks them as disabled)\n\t\tselect.disabled = true;\n\t\tsupport.optDisabled = !opt.disabled;\n\n\t\t// Support: IE8 only\n\t\t// Check if we can trust getAttribute(\"value\")\n\t\tinput = document.createElement(\"input\");\n\t\tinput.setAttribute(\"value\", \"\");\n\t\tsupport.input = input.getAttribute(\"value\") === \"\";\n\n\t\t// Check if an input maintains its value after becoming a radio\n\t\tinput.value = \"t\";\n\t\tinput.setAttribute(\"type\", \"radio\");\n\t\tsupport.radioValue = input.value === \"t\";\n\t})();\n\n\tvar rreturn = /\\r/g;\n\n\tjQuery.fn.extend({\n\t\tval: function (value) {\n\t\t\tvar hooks,\n\t\t\t    ret,\n\t\t\t    isFunction,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (elem) {\n\t\t\t\t\thooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n\t\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\n\t\t\t\t\tret = elem.value;\n\n\t\t\t\t\treturn typeof ret === \"string\" ?\n\t\t\t\t\t// handle most common string cases\n\t\t\t\t\tret.replace(rreturn, \"\") :\n\t\t\t\t\t// handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisFunction = jQuery.isFunction(value);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tvar val;\n\n\t\t\t\tif (this.nodeType !== 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isFunction) {\n\t\t\t\t\tval = value.call(this, i, jQuery(this).val());\n\t\t\t\t} else {\n\t\t\t\t\tval = value;\n\t\t\t\t}\n\n\t\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\t\tif (val == null) {\n\t\t\t\t\tval = \"\";\n\t\t\t\t} else if (typeof val === \"number\") {\n\t\t\t\t\tval += \"\";\n\t\t\t\t} else if (jQuery.isArray(val)) {\n\t\t\t\t\tval = jQuery.map(val, function (value) {\n\t\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\thooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n\t\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n\t\t\t\t\tthis.value = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tvalHooks: {\n\t\t\toption: {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\tvar val = jQuery.find.attr(elem, \"value\");\n\t\t\t\t\treturn val != null ? val :\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\tjQuery.trim(jQuery.text(elem));\n\t\t\t\t}\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\tvar value,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    index = elem.selectedIndex,\n\t\t\t\t\t    one = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\t    values = one ? null : [],\n\t\t\t\t\t    max = one ? index + 1 : options.length,\n\t\t\t\t\t    i = index < 0 ? max : one ? index : 0;\n\n\t\t\t\t\t// Loop through all the selected options\n\t\t\t\t\tfor (; i < max; i++) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t// oldIE doesn't update selected after form reset (#2551)\n\t\t\t\t\t\tif ((option.selected || i === index) && (\n\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\tsupport.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, \"optgroup\"))) {\n\n\t\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\t\tvalue = jQuery(option).val();\n\n\t\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\t\tif (one) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn values;\n\t\t\t\t},\n\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tvar optionSet,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    values = jQuery.makeArray(value),\n\t\t\t\t\t    i = options.length;\n\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\tif (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {\n\n\t\t\t\t\t\t\t// Support: IE6\n\t\t\t\t\t\t\t// When new option element is added to select box we need to\n\t\t\t\t\t\t\t// force reflow of newly added node in order to workaround delay\n\t\t\t\t\t\t\t// of initialization properties\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\toption.selected = optionSet = true;\n\t\t\t\t\t\t\t} catch (_) {\n\n\t\t\t\t\t\t\t\t// Will be executed only in IE6\n\t\t\t\t\t\t\t\toption.scrollHeight;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toption.selected = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\t\tif (!optionSet) {\n\t\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn options;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Radios and checkboxes getter/setter\n\tjQuery.each([\"radio\", \"checkbox\"], function () {\n\t\tjQuery.valHooks[this] = {\n\t\t\tset: function (elem, value) {\n\t\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\t\treturn elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (!support.checkOn) {\n\t\t\tjQuery.valHooks[this].get = function (elem) {\n\t\t\t\t// Support: Webkit\n\t\t\t\t// \"\" is returned instead of \"on\" if a value isn't specified\n\t\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n\t\t\t};\n\t\t}\n\t});\n\n\tvar nodeHook,\n\t    boolHook,\n\t    attrHandle = jQuery.expr.attrHandle,\n\t    ruseDefault = /^(?:checked|selected)$/i,\n\t    getSetAttribute = support.getSetAttribute,\n\t    getSetInput = support.input;\n\n\tjQuery.fn.extend({\n\t\tattr: function (name, value) {\n\t\t\treturn access(this, jQuery.attr, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveAttr: function (name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeAttr(this, name);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tattr: function (elem, name, value) {\n\t\t\tvar hooks,\n\t\t\t    ret,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// don't get/set attributes on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fallback to prop when attributes are not supported\n\t\t\tif (typeof elem.getAttribute === strundefined) {\n\t\t\t\treturn jQuery.prop(elem, name, value);\n\t\t\t}\n\n\t\t\t// All attributes are lowercase\n\t\t\t// Grab necessary hook if one is defined\n\t\t\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\thooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t\t} else if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\telem.setAttribute(name, value + \"\");\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t} else {\n\t\t\t\tret = jQuery.find.attr(elem, name);\n\n\t\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\t\treturn ret == null ? undefined : ret;\n\t\t\t}\n\t\t},\n\n\t\tremoveAttr: function (elem, value) {\n\t\t\tvar name,\n\t\t\t    propName,\n\t\t\t    i = 0,\n\t\t\t    attrNames = value && value.match(rnotwhite);\n\n\t\t\tif (attrNames && elem.nodeType === 1) {\n\t\t\t\twhile (name = attrNames[i++]) {\n\t\t\t\t\tpropName = jQuery.propFix[name] || name;\n\n\t\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\t\tif (jQuery.expr.match.bool.test(name)) {\n\t\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\t\tif (getSetInput && getSetAttribute || !ruseDefault.test(name)) {\n\t\t\t\t\t\t\telem[propName] = false;\n\t\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t\t// Also clear defaultChecked/defaultSelected (if appropriate)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem[jQuery.camelCase(\"default-\" + name)] = elem[propName] = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// See #9699 for explanation of this approach (setting first, then removal)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjQuery.attr(elem, name, \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\telem.removeAttribute(getSetAttribute ? name : propName);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattrHooks: {\n\t\t\ttype: {\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tif (!support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\")) {\n\t\t\t\t\t\t// Setting the type on a radio button after the value resets the value in IE6-9\n\t\t\t\t\t\t// Reset value to default in case type is set after value during creation\n\t\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\t\telem.setAttribute(\"type\", value);\n\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hook for boolean attributes\n\tboolHook = {\n\t\tset: function (elem, value, name) {\n\t\t\tif (value === false) {\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {\n\t\t\t\t// IE<8 needs the *property* name\n\t\t\t\telem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);\n\n\t\t\t\t// Use defaultChecked and defaultSelected for oldIE\n\t\t\t} else {\n\t\t\t\telem[jQuery.camelCase(\"default-\" + name)] = elem[name] = true;\n\t\t\t}\n\n\t\t\treturn name;\n\t\t}\n\t};\n\n\t// Retrieve booleans specially\n\tjQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (i, name) {\n\n\t\tvar getter = attrHandle[name] || jQuery.find.attr;\n\n\t\tattrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function (elem, name, isXML) {\n\t\t\tvar ret, handle;\n\t\t\tif (!isXML) {\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\t\thandle = attrHandle[name];\n\t\t\t\tattrHandle[name] = ret;\n\t\t\t\tret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;\n\t\t\t\tattrHandle[name] = handle;\n\t\t\t}\n\t\t\treturn ret;\n\t\t} : function (elem, name, isXML) {\n\t\t\tif (!isXML) {\n\t\t\t\treturn elem[jQuery.camelCase(\"default-\" + name)] ? name.toLowerCase() : null;\n\t\t\t}\n\t\t};\n\t});\n\n\t// fix oldIE attroperties\n\tif (!getSetInput || !getSetAttribute) {\n\t\tjQuery.attrHooks.value = {\n\t\t\tset: function (elem, value, name) {\n\t\t\t\tif (jQuery.nodeName(elem, \"input\")) {\n\t\t\t\t\t// Does not return so that setAttribute is also used\n\t\t\t\t\telem.defaultValue = value;\n\t\t\t\t} else {\n\t\t\t\t\t// Use nodeHook if defined (#1954); otherwise setAttribute is fine\n\t\t\t\t\treturn nodeHook && nodeHook.set(elem, value, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// IE6/7 do not support getting/setting some attributes with get/setAttribute\n\tif (!getSetAttribute) {\n\n\t\t// Use this for any attribute in IE6/7\n\t\t// This fixes almost every IE6/7 issue\n\t\tnodeHook = {\n\t\t\tset: function (elem, value, name) {\n\t\t\t\t// Set the existing or create a new attribute node\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\tif (!ret) {\n\t\t\t\t\telem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));\n\t\t\t\t}\n\n\t\t\t\tret.value = value += \"\";\n\n\t\t\t\t// Break association with cloned elements by also using setAttribute (#9646)\n\t\t\t\tif (name === \"value\" || value === elem.getAttribute(name)) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Some attributes are constructed with empty-string values when not defined\n\t\tattrHandle.id = attrHandle.name = attrHandle.coords = function (elem, name, isXML) {\n\t\t\tvar ret;\n\t\t\tif (!isXML) {\n\t\t\t\treturn (ret = elem.getAttributeNode(name)) && ret.value !== \"\" ? ret.value : null;\n\t\t\t}\n\t\t};\n\n\t\t// Fixing value retrieval on a button requires this module\n\t\tjQuery.valHooks.button = {\n\t\t\tget: function (elem, name) {\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\tif (ret && ret.specified) {\n\t\t\t\t\treturn ret.value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tset: nodeHook.set\n\t\t};\n\n\t\t// Set contenteditable to false on removals(#10429)\n\t\t// Setting to empty string throws an error as an invalid value\n\t\tjQuery.attrHooks.contenteditable = {\n\t\t\tset: function (elem, value, name) {\n\t\t\t\tnodeHook.set(elem, value === \"\" ? false : value, name);\n\t\t\t}\n\t\t};\n\n\t\t// Set width and height to auto instead of 0 on empty string( Bug #8150 )\n\t\t// This is for removals\n\t\tjQuery.each([\"width\", \"height\"], function (i, name) {\n\t\t\tjQuery.attrHooks[name] = {\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tif (value === \"\") {\n\t\t\t\t\t\telem.setAttribute(name, \"auto\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tif (!support.style) {\n\t\tjQuery.attrHooks.style = {\n\t\t\tget: function (elem) {\n\t\t\t\t// Return undefined in the case of empty string\n\t\t\t\t// Note: IE uppercases css property names, but if we were to .toLowerCase()\n\t\t\t\t// .cssText, that would destroy case senstitivity in URL's, like in \"background\"\n\t\t\t\treturn elem.style.cssText || undefined;\n\t\t\t},\n\t\t\tset: function (elem, value) {\n\t\t\t\treturn elem.style.cssText = value + \"\";\n\t\t\t}\n\t\t};\n\t}\n\n\tvar rfocusable = /^(?:input|select|textarea|button|object)$/i,\n\t    rclickable = /^(?:a|area)$/i;\n\n\tjQuery.fn.extend({\n\t\tprop: function (name, value) {\n\t\t\treturn access(this, jQuery.prop, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveProp: function (name) {\n\t\t\tname = jQuery.propFix[name] || name;\n\t\t\treturn this.each(function () {\n\t\t\t\t// try/catch handles cases where IE balks (such as removing a property on window)\n\t\t\t\ttry {\n\t\t\t\t\tthis[name] = undefined;\n\t\t\t\t\tdelete this[name];\n\t\t\t\t} catch (e) {}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tpropFix: {\n\t\t\t\"for\": \"htmlFor\",\n\t\t\t\"class\": \"className\"\n\t\t},\n\n\t\tprop: function (elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    notxml,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// don't get/set properties on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n\t\t\tif (notxml) {\n\t\t\t\t// Fix name and attach hooks\n\t\t\t\tname = jQuery.propFix[name] || name;\n\t\t\t\thooks = jQuery.propHooks[name];\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;\n\t\t\t} else {\n\t\t\t\treturn hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];\n\t\t\t}\n\t\t},\n\n\t\tpropHooks: {\n\t\t\ttabIndex: {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\t// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set\n\t\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\t\tvar tabindex = jQuery.find.attr(elem, \"tabindex\");\n\n\t\t\t\t\treturn tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Some attributes require a special call on IE\n\t// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\tif (!support.hrefNormalized) {\n\t\t// href/src property should get the full normalized URL (#10299/#12915)\n\t\tjQuery.each([\"href\", \"src\"], function (i, name) {\n\t\t\tjQuery.propHooks[name] = {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\treturn elem.getAttribute(name, 4);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\t// Support: Safari, IE9+\n\t// mis-reports the default selected property of an option\n\t// Accessing the parent's selectedIndex property fixes it\n\tif (!support.optSelected) {\n\t\tjQuery.propHooks.selected = {\n\t\t\tget: function (elem) {\n\t\t\t\tvar parent = elem.parentNode;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tparent.selectedIndex;\n\n\t\t\t\t\t// Make sure that it also works with optgroups, see #5701\n\t\t\t\t\tif (parent.parentNode) {\n\t\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t}\n\n\tjQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n\t\tjQuery.propFix[this.toLowerCase()] = this;\n\t});\n\n\t// IE6/7 call enctype encoding\n\tif (!support.enctype) {\n\t\tjQuery.propFix.enctype = \"encoding\";\n\t}\n\n\tvar rclass = /[\\t\\r\\n\\f]/g;\n\n\tjQuery.fn.extend({\n\t\taddClass: function (value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    i = 0,\n\t\t\t    len = this.length,\n\t\t\t    proceed = typeof value === \"string\" && value;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).addClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (proceed) {\n\t\t\t\t// The disjunction here is for better compressibility (see removeClass)\n\t\t\t\tclasses = (value || \"\").match(rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \" \");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\tif (cur.indexOf(\" \" + clazz + \" \") < 0) {\n\t\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = jQuery.trim(cur);\n\t\t\t\t\t\tif (elem.className !== finalValue) {\n\t\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremoveClass: function (value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    i = 0,\n\t\t\t    len = this.length,\n\t\t\t    proceed = arguments.length === 0 || typeof value === \"string\" && value;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).removeClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (proceed) {\n\t\t\t\tclasses = (value || \"\").match(rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \"\");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\t\twhile (cur.indexOf(\" \" + clazz + \" \") >= 0) {\n\t\t\t\t\t\t\t\tcur = cur.replace(\" \" + clazz + \" \", \" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = value ? jQuery.trim(cur) : \"\";\n\t\t\t\t\t\tif (elem.className !== finalValue) {\n\t\t\t\t\t\t\telem.className = finalValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\ttoggleClass: function (value, stateVal) {\n\t\t\tvar type = typeof value;\n\n\t\t\tif (typeof stateVal === \"boolean\" && type === \"string\") {\n\t\t\t\treturn stateVal ? this.addClass(value) : this.removeClass(value);\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (type === \"string\") {\n\t\t\t\t\t// toggle individual class names\n\t\t\t\t\tvar className,\n\t\t\t\t\t    i = 0,\n\t\t\t\t\t    self = jQuery(this),\n\t\t\t\t\t    classNames = value.match(rnotwhite) || [];\n\n\t\t\t\t\twhile (className = classNames[i++]) {\n\t\t\t\t\t\t// check each className given, space separated list\n\t\t\t\t\t\tif (self.hasClass(className)) {\n\t\t\t\t\t\t\tself.removeClass(className);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.addClass(className);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Toggle whole class name\n\t\t\t\t} else if (type === strundefined || type === \"boolean\") {\n\t\t\t\t\tif (this.className) {\n\t\t\t\t\t\t// store className if set\n\t\t\t\t\t\tjQuery._data(this, \"__className__\", this.className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the element has a class name or if we're passed \"false\",\n\t\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\t\tthis.className = this.className || value === false ? \"\" : jQuery._data(this, \"__className__\") || \"\";\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\thasClass: function (selector) {\n\t\t\tvar className = \" \" + selector + \" \",\n\t\t\t    i = 0,\n\t\t\t    l = this.length;\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tif (this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf(className) >= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t});\n\n\t// Return jQuery for attributes-only inclusion\n\n\n\tjQuery.each((\"blur focus focusin focusout load resize scroll unload click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function (i, name) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[name] = function (data, fn) {\n\t\t\treturn arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\t\thover: function (fnOver, fnOut) {\n\t\t\treturn this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n\t\t},\n\n\t\tbind: function (types, data, fn) {\n\t\t\treturn this.on(types, null, data, fn);\n\t\t},\n\t\tunbind: function (types, fn) {\n\t\t\treturn this.off(types, null, fn);\n\t\t},\n\n\t\tdelegate: function (selector, types, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn);\n\t\t},\n\t\tundelegate: function (selector, types, fn) {\n\t\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\t\treturn arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n\t\t}\n\t});\n\n\tvar nonce = jQuery.now();\n\n\tvar rquery = /\\?/;\n\n\tvar rvalidtokens = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\n\n\tjQuery.parseJSON = function (data) {\n\t\t// Attempt to parse using the native JSON parser first\n\t\tif (window.JSON && window.JSON.parse) {\n\t\t\t// Support: Android 2.3\n\t\t\t// Workaround failure to string-cast null input\n\t\t\treturn window.JSON.parse(data + \"\");\n\t\t}\n\n\t\tvar requireNonComma,\n\t\t    depth = null,\n\t\t    str = jQuery.trim(data + \"\");\n\n\t\t// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains\n\t\t// after removing valid tokens\n\t\treturn str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {\n\n\t\t\t// Force termination if we see a misplaced comma\n\t\t\tif (requireNonComma && comma) {\n\t\t\t\tdepth = 0;\n\t\t\t}\n\n\t\t\t// Perform no more replacements after returning to outermost depth\n\t\t\tif (depth === 0) {\n\t\t\t\treturn token;\n\t\t\t}\n\n\t\t\t// Commas must not follow \"[\", \"{\", or \",\"\n\t\t\trequireNonComma = open || comma;\n\n\t\t\t// Determine new depth\n\t\t\t// array/object open (\"[\" or \"{\"): depth += true - false (increment)\n\t\t\t// array/object close (\"]\" or \"}\"): depth += false - true (decrement)\n\t\t\t// other cases (\",\" or primitive): depth += true - true (numeric cast)\n\t\t\tdepth += !close - !open;\n\n\t\t\t// Remove this token\n\t\t\treturn \"\";\n\t\t})) ? Function(\"return \" + str)() : jQuery.error(\"Invalid JSON: \" + data);\n\t};\n\n\t// Cross-browser xml parsing\n\tjQuery.parseXML = function (data) {\n\t\tvar xml, tmp;\n\t\tif (!data || typeof data !== \"string\") {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tif (window.DOMParser) {\n\t\t\t\t// Standard\n\t\t\t\ttmp = new DOMParser();\n\t\t\t\txml = tmp.parseFromString(data, \"text/xml\");\n\t\t\t} else {\n\t\t\t\t// IE\n\t\t\t\txml = new ActiveXObject(\"Microsoft.XMLDOM\");\n\t\t\t\txml.async = \"false\";\n\t\t\t\txml.loadXML(data);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\txml = undefined;\n\t\t}\n\t\tif (!xml || !xml.documentElement || xml.getElementsByTagName(\"parsererror\").length) {\n\t\t\tjQuery.error(\"Invalid XML: \" + data);\n\t\t}\n\t\treturn xml;\n\t};\n\n\tvar\n\t// Document location\n\tajaxLocParts,\n\t    ajaxLocation,\n\t    rhash = /#.*$/,\n\t    rts = /([?&])_=[^&]*/,\n\t    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg,\n\t    // IE leaves an \\r character at EOL\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\t    rnoContent = /^(?:GET|HEAD)$/,\n\t    rprotocol = /^\\/\\//,\n\t    rurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n\n\t/* Prefilters\r\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\r\n  * 2) These are called:\r\n  *    - BEFORE asking for a transport\r\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\r\n  * 3) key is the dataType\r\n  * 4) the catchall symbol \"*\" can be used\r\n  * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\r\n  */\n\tprefilters = {},\n\n\n\t/* Transports bindings\r\n  * 1) key is the dataType\r\n  * 2) the catchall symbol \"*\" can be used\r\n  * 3) selection will start with transport dataType and THEN go to \"*\" if needed\r\n  */\n\ttransports = {},\n\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat(\"*\");\n\n\t// #8138, IE may throw an exception when accessing\n\t// a field from window.location if document.domain has been set\n\ttry {\n\t\tajaxLocation = location.href;\n\t} catch (e) {\n\t\t// Use the href attribute of an A element\n\t\t// since IE will modify it given document.location\n\t\tajaxLocation = document.createElement(\"a\");\n\t\tajaxLocation.href = \"\";\n\t\tajaxLocation = ajaxLocation.href;\n\t}\n\n\t// Segment location into parts\n\tajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];\n\n\t// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\tfunction addToPrefiltersOrTransports(structure) {\n\n\t\t// dataTypeExpression is optional and defaults to \"*\"\n\t\treturn function (dataTypeExpression, func) {\n\n\t\t\tif (typeof dataTypeExpression !== \"string\") {\n\t\t\t\tfunc = dataTypeExpression;\n\t\t\t\tdataTypeExpression = \"*\";\n\t\t\t}\n\n\t\t\tvar dataType,\n\t\t\t    i = 0,\n\t\t\t    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\n\n\t\t\tif (jQuery.isFunction(func)) {\n\t\t\t\t// For each dataType in the dataTypeExpression\n\t\t\t\twhile (dataType = dataTypes[i++]) {\n\t\t\t\t\t// Prepend if requested\n\t\t\t\t\tif (dataType.charAt(0) === \"+\") {\n\t\t\t\t\t\tdataType = dataType.slice(1) || \"*\";\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).unshift(func);\n\n\t\t\t\t\t\t// Otherwise append\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).push(func);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// Base inspection function for prefilters and transports\n\tfunction inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n\n\t\tvar inspected = {},\n\t\t    seekingTransport = structure === transports;\n\n\t\tfunction inspect(dataType) {\n\t\t\tvar selected;\n\t\t\tinspected[dataType] = true;\n\t\t\tjQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n\t\t\t\tvar dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\t\t\t\tif (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n\t\t\t\t\toptions.dataTypes.unshift(dataTypeOrTransport);\n\t\t\t\t\tinspect(dataTypeOrTransport);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (seekingTransport) {\n\t\t\t\t\treturn !(selected = dataTypeOrTransport);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn selected;\n\t\t}\n\n\t\treturn inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n\t}\n\n\t// A special extend for ajax options\n\t// that takes \"flat\" options (not to be deep extended)\n\t// Fixes #9887\n\tfunction ajaxExtend(target, src) {\n\t\tvar deep,\n\t\t    key,\n\t\t    flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\t\tfor (key in src) {\n\t\t\tif (src[key] !== undefined) {\n\t\t\t\t(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n\t\t\t}\n\t\t}\n\t\tif (deep) {\n\t\t\tjQuery.extend(true, target, deep);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/* Handles responses to an ajax request:\r\n  * - finds the right dataType (mediates between content-type and expected dataType)\r\n  * - returns the corresponding response\r\n  */\n\tfunction ajaxHandleResponses(s, jqXHR, responses) {\n\t\tvar firstDataType,\n\t\t    ct,\n\t\t    finalDataType,\n\t\t    type,\n\t\t    contents = s.contents,\n\t\t    dataTypes = s.dataTypes;\n\n\t\t// Remove auto dataType and get content-type in the process\n\t\twhile (dataTypes[0] === \"*\") {\n\t\t\tdataTypes.shift();\n\t\t\tif (ct === undefined) {\n\t\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t\t}\n\t\t}\n\n\t\t// Check if we're dealing with a known content-type\n\t\tif (ct) {\n\t\t\tfor (type in contents) {\n\t\t\t\tif (contents[type] && contents[type].test(ct)) {\n\t\t\t\t\tdataTypes.unshift(type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a response for the expected dataType\n\t\tif (dataTypes[0] in responses) {\n\t\t\tfinalDataType = dataTypes[0];\n\t\t} else {\n\t\t\t// Try convertible dataTypes\n\t\t\tfor (type in responses) {\n\t\t\t\tif (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n\t\t\t\t\tfinalDataType = type;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!firstDataType) {\n\t\t\t\t\tfirstDataType = type;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Or just use first one\n\t\t\tfinalDataType = finalDataType || firstDataType;\n\t\t}\n\n\t\t// If we found a dataType\n\t\t// We add the dataType to the list if needed\n\t\t// and return the corresponding response\n\t\tif (finalDataType) {\n\t\t\tif (finalDataType !== dataTypes[0]) {\n\t\t\t\tdataTypes.unshift(finalDataType);\n\t\t\t}\n\t\t\treturn responses[finalDataType];\n\t\t}\n\t}\n\n\t/* Chain conversions given the request and the original response\r\n  * Also sets the responseXXX fields on the jqXHR instance\r\n  */\n\tfunction ajaxConvert(s, response, jqXHR, isSuccess) {\n\t\tvar conv2,\n\t\t    current,\n\t\t    conv,\n\t\t    tmp,\n\t\t    prev,\n\t\t    converters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t\t// Create converters map with lowercased keys\n\t\tif (dataTypes[1]) {\n\t\t\tfor (conv in s.converters) {\n\t\t\t\tconverters[conv.toLowerCase()] = s.converters[conv];\n\t\t\t}\n\t\t}\n\n\t\tcurrent = dataTypes.shift();\n\n\t\t// Convert to each sequential dataType\n\t\twhile (current) {\n\n\t\t\tif (s.responseFields[current]) {\n\t\t\t\tjqXHR[s.responseFields[current]] = response;\n\t\t\t}\n\n\t\t\t// Apply the dataFilter if provided\n\t\t\tif (!prev && isSuccess && s.dataFilter) {\n\t\t\t\tresponse = s.dataFilter(response, s.dataType);\n\t\t\t}\n\n\t\t\tprev = current;\n\t\t\tcurrent = dataTypes.shift();\n\n\t\t\tif (current) {\n\n\t\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\t\tif (current === \"*\") {\n\n\t\t\t\t\tcurrent = prev;\n\n\t\t\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t\t} else if (prev !== \"*\" && prev !== current) {\n\n\t\t\t\t\t// Seek a direct converter\n\t\t\t\t\tconv = converters[prev + \" \" + current] || converters[\"* \" + current];\n\n\t\t\t\t\t// If none found, seek a pair\n\t\t\t\t\tif (!conv) {\n\t\t\t\t\t\tfor (conv2 in converters) {\n\n\t\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\t\ttmp = conv2.split(\" \");\n\t\t\t\t\t\t\tif (tmp[1] === current) {\n\n\t\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\t\tconv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\t\t\t\t\t\t\t\tif (conv) {\n\t\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\t\tif (conv === true) {\n\t\t\t\t\t\t\t\t\t\tconv = converters[conv2];\n\n\t\t\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t\t} else if (converters[conv2] !== true) {\n\t\t\t\t\t\t\t\t\t\tcurrent = tmp[0];\n\t\t\t\t\t\t\t\t\t\tdataTypes.unshift(tmp[1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\t\tif (conv !== true) {\n\n\t\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\t\tif (conv && s[\"throws\"]) {\n\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { state: \"success\", data: response };\n\t}\n\n\tjQuery.extend({\n\n\t\t// Counter for holding the number of active queries\n\t\tactive: 0,\n\n\t\t// Last-Modified header cache for next request\n\t\tlastModified: {},\n\t\tetag: {},\n\n\t\tajaxSettings: {\n\t\t\turl: ajaxLocation,\n\t\t\ttype: \"GET\",\n\t\t\tisLocal: rlocalProtocol.test(ajaxLocParts[1]),\n\t\t\tglobal: true,\n\t\t\tprocessData: true,\n\t\t\tasync: true,\n\t\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t\t/*\r\n   timeout: 0,\r\n   data: null,\r\n   dataType: null,\r\n   username: null,\r\n   password: null,\r\n   cache: null,\r\n   throws: false,\r\n   traditional: false,\r\n   headers: {},\r\n   */\n\n\t\t\taccepts: {\n\t\t\t\t\"*\": allTypes,\n\t\t\t\ttext: \"text/plain\",\n\t\t\t\thtml: \"text/html\",\n\t\t\t\txml: \"application/xml, text/xml\",\n\t\t\t\tjson: \"application/json, text/javascript\"\n\t\t\t},\n\n\t\t\tcontents: {\n\t\t\t\txml: /xml/,\n\t\t\t\thtml: /html/,\n\t\t\t\tjson: /json/\n\t\t\t},\n\n\t\t\tresponseFields: {\n\t\t\t\txml: \"responseXML\",\n\t\t\t\ttext: \"responseText\",\n\t\t\t\tjson: \"responseJSON\"\n\t\t\t},\n\n\t\t\t// Data converters\n\t\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\t\tconverters: {\n\n\t\t\t\t// Convert anything to text\n\t\t\t\t\"* text\": String,\n\n\t\t\t\t// Text to html (true = no transformation)\n\t\t\t\t\"text html\": true,\n\n\t\t\t\t// Evaluate text as a json expression\n\t\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t\t// Parse text as xml\n\t\t\t\t\"text xml\": jQuery.parseXML\n\t\t\t},\n\n\t\t\t// For options that shouldn't be deep extended:\n\t\t\t// you can add your own custom options here if\n\t\t\t// and when you create one that shouldn't be\n\t\t\t// deep extended (see ajaxExtend)\n\t\t\tflatOptions: {\n\t\t\t\turl: true,\n\t\t\t\tcontext: true\n\t\t\t}\n\t\t},\n\n\t\t// Creates a full fledged settings object into target\n\t\t// with both ajaxSettings and settings fields.\n\t\t// If target is omitted, writes into ajaxSettings.\n\t\tajaxSetup: function (target, settings) {\n\t\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend(jQuery.ajaxSettings, target);\n\t\t},\n\n\t\tajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n\t\tajaxTransport: addToPrefiltersOrTransports(transports),\n\n\t\t// Main method\n\t\tajax: function (url, options) {\n\n\t\t\t// If url is an object, simulate pre-1.5 signature\n\t\t\tif (typeof url === \"object\") {\n\t\t\t\toptions = url;\n\t\t\t\turl = undefined;\n\t\t\t}\n\n\t\t\t// Force options to be an object\n\t\t\toptions = options || {};\n\n\t\t\tvar // Cross-domain detection vars\n\t\t\tparts,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers as string\n\t\t\tresponseHeadersString,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\t\t\t    transport,\n\n\t\t\t// Response headers\n\t\t\tresponseHeaders,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup({}, options),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\t    completeDeferred = jQuery.Callbacks(\"once memory\"),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\t    requestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function (key) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif (state === 2) {\n\t\t\t\t\t\tif (!responseHeaders) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile (match = rheaders.exec(responseHeadersString)) {\n\t\t\t\t\t\t\t\tresponseHeaders[match[1].toLowerCase()] = match[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[key.toLowerCase()];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function () {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function (name, value) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\tname = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n\t\t\t\t\t\trequestHeaders[name] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function (type) {\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function (map) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif (map) {\n\t\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\t\tfor (code in map) {\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[code] = [statusCode[code], map[code]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always(map[jqXHR.status]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function (statusText) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif (transport) {\n\t\t\t\t\t\ttransport.abort(finalText);\n\t\t\t\t\t}\n\t\t\t\t\tdone(0, finalText);\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Attach deferreds\n\t\t\tdeferred.promise(jqXHR).complete = completeDeferred.add;\n\t\t\tjqXHR.success = jqXHR.done;\n\t\t\tjqXHR.error = jqXHR.fail;\n\n\t\t\t// Remove hash character (#7531: and string promotion)\n\t\t\t// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n\t\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t\t// We also use the url parameter if available\n\t\t\ts.url = ((url || s.url || ajaxLocation) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\");\n\n\t\t\t// Alias method option to type as per ticket #12004\n\t\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t\t// Extract dataTypes list\n\t\t\ts.dataTypes = jQuery.trim(s.dataType || \"*\").toLowerCase().match(rnotwhite) || [\"\"];\n\n\t\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\n\t\t\tif (s.crossDomain == null) {\n\t\t\t\tparts = rurl.exec(s.url.toLowerCase());\n\t\t\t\ts.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === \"http:\" ? \"80\" : \"443\")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? \"80\" : \"443\"))));\n\t\t\t}\n\n\t\t\t// Convert data if not already a string\n\t\t\tif (s.data && s.processData && typeof s.data !== \"string\") {\n\t\t\t\ts.data = jQuery.param(s.data, s.traditional);\n\t\t\t}\n\n\t\t\t// Apply prefilters\n\t\t\tinspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n\t\t\t// If request was aborted inside a prefilter, stop there\n\t\t\tif (state === 2) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// We can fire global events as of now if asked to\n\t\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t\t// Watch for a new set of requests\n\t\t\tif (fireGlobals && jQuery.active++ === 0) {\n\t\t\t\tjQuery.event.trigger(\"ajaxStart\");\n\t\t\t}\n\n\t\t\t// Uppercase the type\n\t\t\ts.type = s.type.toUpperCase();\n\n\t\t\t// Determine if request has content\n\t\t\ts.hasContent = !rnoContent.test(s.type);\n\n\t\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t\t// and/or If-None-Match header later on\n\t\t\tcacheURL = s.url;\n\n\t\t\t// More options handling for requests with no content\n\t\t\tif (!s.hasContent) {\n\n\t\t\t\t// If data is available, append data to url\n\t\t\t\tif (s.data) {\n\t\t\t\t\tcacheURL = s.url += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\n\t\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\t\tdelete s.data;\n\t\t\t\t}\n\n\t\t\t\t// Add anti-cache in url if needed\n\t\t\t\tif (s.cache === false) {\n\t\t\t\t\ts.url = rts.test(cacheURL) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace(rts, \"$1_=\" + nonce++) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\tif (s.ifModified) {\n\t\t\t\tif (jQuery.lastModified[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n\t\t\t\t}\n\t\t\t\tif (jQuery.etag[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the correct header, if data is being sent\n\t\t\tif (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n\t\t\t\tjqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n\t\t\t}\n\n\t\t\t// Set the Accepts header for the server, depending on the dataType\n\t\t\tjqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\n\n\t\t\t// Check for headers option\n\t\t\tfor (i in s.headers) {\n\t\t\t\tjqXHR.setRequestHeader(i, s.headers[i]);\n\t\t\t}\n\n\t\t\t// Allow custom headers/mimetypes and early abort\n\t\t\tif (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n\t\t\t\t// Abort if not done already and return\n\t\t\t\treturn jqXHR.abort();\n\t\t\t}\n\n\t\t\t// aborting is no longer a cancellation\n\t\t\tstrAbort = \"abort\";\n\n\t\t\t// Install callbacks on deferreds\n\t\t\tfor (i in { success: 1, error: 1, complete: 1 }) {\n\t\t\t\tjqXHR[i](s[i]);\n\t\t\t}\n\n\t\t\t// Get transport\n\t\t\ttransport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n\t\t\t// If no transport, we auto-abort\n\t\t\tif (!transport) {\n\t\t\t\tdone(-1, \"No Transport\");\n\t\t\t} else {\n\t\t\t\tjqXHR.readyState = 1;\n\n\t\t\t\t// Send global event\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n\t\t\t\t}\n\t\t\t\t// Timeout\n\t\t\t\tif (s.async && s.timeout > 0) {\n\t\t\t\t\ttimeoutTimer = setTimeout(function () {\n\t\t\t\t\t\tjqXHR.abort(\"timeout\");\n\t\t\t\t\t}, s.timeout);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tstate = 1;\n\t\t\t\t\ttransport.send(requestHeaders, done);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Propagate exception as error if not done\n\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\tdone(-1, e);\n\t\t\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Callback for when everything is done\n\t\t\tfunction done(status, nativeStatusText, responses, headers) {\n\t\t\t\tvar isSuccess,\n\t\t\t\t    success,\n\t\t\t\t    error,\n\t\t\t\t    response,\n\t\t\t\t    modified,\n\t\t\t\t    statusText = nativeStatusText;\n\n\t\t\t\t// Called once\n\t\t\t\tif (state === 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// State is \"done\" now\n\t\t\t\tstate = 2;\n\n\t\t\t\t// Clear timeout if it exists\n\t\t\t\tif (timeoutTimer) {\n\t\t\t\t\tclearTimeout(timeoutTimer);\n\t\t\t\t}\n\n\t\t\t\t// Dereference transport for early garbage collection\n\t\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\t\ttransport = undefined;\n\n\t\t\t\t// Cache response headers\n\t\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t\t// Set readyState\n\t\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t\t// Determine if successful\n\t\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t\t// Get response data\n\t\t\t\tif (responses) {\n\t\t\t\t\tresponse = ajaxHandleResponses(s, jqXHR, responses);\n\t\t\t\t}\n\n\t\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\t\tresponse = ajaxConvert(s, response, jqXHR, isSuccess);\n\n\t\t\t\t// If successful, handle type chaining\n\t\t\t\tif (isSuccess) {\n\n\t\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\t\tif (s.ifModified) {\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.lastModified[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.etag[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if no content\n\t\t\t\t\tif (status === 204 || s.type === \"HEAD\") {\n\t\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t\t\t// if not modified\n\t\t\t\t\t} else if (status === 304) {\n\t\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t\t\t// If we have data, let's convert it\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\t\terror = response.error;\n\t\t\t\t\t\tisSuccess = !error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// We extract error from statusText\n\t\t\t\t\t// then normalize statusText and status for non-aborts\n\t\t\t\t\terror = statusText;\n\t\t\t\t\tif (status || !statusText) {\n\t\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\t\tif (status < 0) {\n\t\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set data for the fake xhr object\n\t\t\t\tjqXHR.status = status;\n\t\t\t\tjqXHR.statusText = (nativeStatusText || statusText) + \"\";\n\n\t\t\t\t// Success/Error\n\t\t\t\tif (isSuccess) {\n\t\t\t\t\tdeferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n\t\t\t\t}\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tjqXHR.statusCode(statusCode);\n\t\t\t\tstatusCode = undefined;\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n\t\t\t\t}\n\n\t\t\t\t// Complete\n\t\t\t\tcompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n\t\t\t\t\t// Handle the global AJAX counter\n\t\t\t\t\tif (! --jQuery.active) {\n\t\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jqXHR;\n\t\t},\n\n\t\tgetJSON: function (url, data, callback) {\n\t\t\treturn jQuery.get(url, data, callback, \"json\");\n\t\t},\n\n\t\tgetScript: function (url, callback) {\n\t\t\treturn jQuery.get(url, undefined, callback, \"script\");\n\t\t}\n\t});\n\n\tjQuery.each([\"get\", \"post\"], function (i, method) {\n\t\tjQuery[method] = function (url, data, callback, type) {\n\t\t\t// shift arguments if data argument was omitted\n\t\t\tif (jQuery.isFunction(data)) {\n\t\t\t\ttype = type || callback;\n\t\t\t\tcallback = data;\n\t\t\t\tdata = undefined;\n\t\t\t}\n\n\t\t\treturn jQuery.ajax({\n\t\t\t\turl: url,\n\t\t\t\ttype: method,\n\t\t\t\tdataType: type,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: callback\n\t\t\t});\n\t\t};\n\t});\n\n\tjQuery._evalUrl = function (url) {\n\t\treturn jQuery.ajax({\n\t\t\turl: url,\n\t\t\ttype: \"GET\",\n\t\t\tdataType: \"script\",\n\t\t\tasync: false,\n\t\t\tglobal: false,\n\t\t\t\"throws\": true\n\t\t});\n\t};\n\n\tjQuery.fn.extend({\n\t\twrapAll: function (html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapAll(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this[0]) {\n\t\t\t\t// The elements to wrap the target around\n\t\t\t\tvar wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n\t\t\t\tif (this[0].parentNode) {\n\t\t\t\t\twrap.insertBefore(this[0]);\n\t\t\t\t}\n\n\t\t\t\twrap.map(function () {\n\t\t\t\t\tvar elem = this;\n\n\t\t\t\t\twhile (elem.firstChild && elem.firstChild.nodeType === 1) {\n\t\t\t\t\t\telem = elem.firstChild;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem;\n\t\t\t\t}).append(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\twrapInner: function (html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapInner(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar self = jQuery(this),\n\t\t\t\t    contents = self.contents();\n\n\t\t\t\tif (contents.length) {\n\t\t\t\t\tcontents.wrapAll(html);\n\t\t\t\t} else {\n\t\t\t\t\tself.append(html);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\twrap: function (html) {\n\t\t\tvar isFunction = jQuery.isFunction(html);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tjQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n\t\t\t});\n\t\t},\n\n\t\tunwrap: function () {\n\t\t\treturn this.parent().each(function () {\n\t\t\t\tif (!jQuery.nodeName(this, \"body\")) {\n\t\t\t\t\tjQuery(this).replaceWith(this.childNodes);\n\t\t\t\t}\n\t\t\t}).end();\n\t\t}\n\t});\n\n\tjQuery.expr.filters.hidden = function (elem) {\n\t\t// Support: Opera <= 12.12\n\t\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && (elem.style && elem.style.display || jQuery.css(elem, \"display\")) === \"none\";\n\t};\n\n\tjQuery.expr.filters.visible = function (elem) {\n\t\treturn !jQuery.expr.filters.hidden(elem);\n\t};\n\n\tvar r20 = /%20/g,\n\t    rbracket = /\\[\\]$/,\n\t    rCRLF = /\\r?\\n/g,\n\t    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\t    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n\tfunction buildParams(prefix, obj, traditional, add) {\n\t\tvar name;\n\n\t\tif (jQuery.isArray(obj)) {\n\t\t\t// Serialize array item.\n\t\t\tjQuery.each(obj, function (i, v) {\n\t\t\t\tif (traditional || rbracket.test(prefix)) {\n\t\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\t\tadd(prefix, v);\n\t\t\t\t} else {\n\t\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\t\tbuildParams(prefix + \"[\" + (typeof v === \"object\" ? i : \"\") + \"]\", v, traditional, add);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!traditional && jQuery.type(obj) === \"object\") {\n\t\t\t// Serialize object item.\n\t\t\tfor (name in obj) {\n\t\t\t\tbuildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n\t\t\t}\n\t\t} else {\n\t\t\t// Serialize scalar item.\n\t\t\tadd(prefix, obj);\n\t\t}\n\t}\n\n\t// Serialize an array of form elements or a set of\n\t// key/values into a query string\n\tjQuery.param = function (a, traditional) {\n\t\tvar prefix,\n\t\t    s = [],\n\t\t    add = function (key, value) {\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction(value) ? value() : value == null ? \"\" : value;\n\t\t\ts[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n\t\t};\n\n\t\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\t\tif (traditional === undefined) {\n\t\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t\t}\n\n\t\t// If an array was passed in, assume that it is an array of form elements.\n\t\tif (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n\t\t\t// Serialize the form elements\n\t\t\tjQuery.each(a, function () {\n\t\t\t\tadd(this.name, this.value);\n\t\t\t});\n\t\t} else {\n\t\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t\t// did it), otherwise encode params recursively.\n\t\t\tfor (prefix in a) {\n\t\t\t\tbuildParams(prefix, a[prefix], traditional, add);\n\t\t\t}\n\t\t}\n\n\t\t// Return the resulting serialization\n\t\treturn s.join(\"&\").replace(r20, \"+\");\n\t};\n\n\tjQuery.fn.extend({\n\t\tserialize: function () {\n\t\t\treturn jQuery.param(this.serializeArray());\n\t\t},\n\t\tserializeArray: function () {\n\t\t\treturn this.map(function () {\n\t\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\t\tvar elements = jQuery.prop(this, \"elements\");\n\t\t\t\treturn elements ? jQuery.makeArray(elements) : this;\n\t\t\t}).filter(function () {\n\t\t\t\tvar type = this.type;\n\t\t\t\t// Use .is(\":disabled\") so that fieldset[disabled] works\n\t\t\t\treturn this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n\t\t\t}).map(function (i, elem) {\n\t\t\t\tvar val = jQuery(this).val();\n\n\t\t\t\treturn val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t\t}) : { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t}).get();\n\t\t}\n\t});\n\n\t// Create the request object\n\t// (This is still attached to ajaxSettings for backward compatibility)\n\tjQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?\n\t// Support: IE6+\n\tfunction () {\n\n\t\t// XHR cannot access local files, always use ActiveX for that case\n\t\treturn !this.isLocal &&\n\n\t\t// Support: IE7-8\n\t\t// oldIE XHR does not support non-RFC2616 methods (#13240)\n\t\t// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx\n\t\t// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9\n\t\t// Although this check for six methods instead of eight\n\t\t// since IE also does not support \"trace\" and \"connect\"\n\t\t/^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();\n\t} :\n\t// For all other browsers, use the standard XMLHttpRequest object\n\tcreateStandardXHR;\n\n\tvar xhrId = 0,\n\t    xhrCallbacks = {},\n\t    xhrSupported = jQuery.ajaxSettings.xhr();\n\n\t// Support: IE<10\n\t// Open requests must be manually aborted on unload (#5280)\n\t// See https://support.microsoft.com/kb/2856746 for more info\n\tif (window.attachEvent) {\n\t\twindow.attachEvent(\"onunload\", function () {\n\t\t\tfor (var key in xhrCallbacks) {\n\t\t\t\txhrCallbacks[key](undefined, true);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Determine support properties\n\tsupport.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n\txhrSupported = support.ajax = !!xhrSupported;\n\n\t// Create transport if the browser can provide an xhr\n\tif (xhrSupported) {\n\n\t\tjQuery.ajaxTransport(function (options) {\n\t\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\t\tif (!options.crossDomain || support.cors) {\n\n\t\t\t\tvar callback;\n\n\t\t\t\treturn {\n\t\t\t\t\tsend: function (headers, complete) {\n\t\t\t\t\t\tvar i,\n\t\t\t\t\t\t    xhr = options.xhr(),\n\t\t\t\t\t\t    id = ++xhrId;\n\n\t\t\t\t\t\t// Open the socket\n\t\t\t\t\t\txhr.open(options.type, options.url, options.async, options.username, options.password);\n\n\t\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\t\tif (options.xhrFields) {\n\t\t\t\t\t\t\tfor (i in options.xhrFields) {\n\t\t\t\t\t\t\t\txhr[i] = options.xhrFields[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\t\tif (options.mimeType && xhr.overrideMimeType) {\n\t\t\t\t\t\t\txhr.overrideMimeType(options.mimeType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\t\t\tif (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n\t\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set headers\n\t\t\t\t\t\tfor (i in headers) {\n\t\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t\t// IE's ActiveXObject throws a 'Type Mismatch' exception when setting\n\t\t\t\t\t\t\t// request header to a null-value.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// To keep consistent with other XHR implementations, cast the value\n\t\t\t\t\t\t\t// to string and ignore `undefined`.\n\t\t\t\t\t\t\tif (headers[i] !== undefined) {\n\t\t\t\t\t\t\t\txhr.setRequestHeader(i, headers[i] + \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do send the request\n\t\t\t\t\t\t// This may raise an exception which is actually\n\t\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)\n\t\t\t\t\t\txhr.send(options.hasContent && options.data || null);\n\n\t\t\t\t\t\t// Listener\n\t\t\t\t\t\tcallback = function (_, isAbort) {\n\t\t\t\t\t\t\tvar status, statusText, responses;\n\n\t\t\t\t\t\t\t// Was never called and is aborted or complete\n\t\t\t\t\t\t\tif (callback && (isAbort || xhr.readyState === 4)) {\n\t\t\t\t\t\t\t\t// Clean up\n\t\t\t\t\t\t\t\tdelete xhrCallbacks[id];\n\t\t\t\t\t\t\t\tcallback = undefined;\n\t\t\t\t\t\t\t\txhr.onreadystatechange = jQuery.noop;\n\n\t\t\t\t\t\t\t\t// Abort manually if needed\n\t\t\t\t\t\t\t\tif (isAbort) {\n\t\t\t\t\t\t\t\t\tif (xhr.readyState !== 4) {\n\t\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresponses = {};\n\t\t\t\t\t\t\t\t\tstatus = xhr.status;\n\n\t\t\t\t\t\t\t\t\t// Support: IE<10\n\t\t\t\t\t\t\t\t\t// Accessing binary-data responseText throws an exception\n\t\t\t\t\t\t\t\t\t// (#11426)\n\t\t\t\t\t\t\t\t\tif (typeof xhr.responseText === \"string\") {\n\t\t\t\t\t\t\t\t\t\tresponses.text = xhr.responseText;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Firefox throws an exception when accessing\n\t\t\t\t\t\t\t\t\t// statusText for faulty cross-domain requests\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatusText = xhr.statusText;\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t// We normalize with Webkit giving an empty statusText\n\t\t\t\t\t\t\t\t\t\tstatusText = \"\";\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Filter status for non standard behaviors\n\n\t\t\t\t\t\t\t\t\t// If the request is local and we have data: assume a success\n\t\t\t\t\t\t\t\t\t// (success with no data won't get notified, that's the best we\n\t\t\t\t\t\t\t\t\t// can do given current implementations)\n\t\t\t\t\t\t\t\t\tif (!status && options.isLocal && !options.crossDomain) {\n\t\t\t\t\t\t\t\t\t\tstatus = responses.text ? 200 : 404;\n\t\t\t\t\t\t\t\t\t\t// IE - #1450: sometimes returns 1223 when it should be 204\n\t\t\t\t\t\t\t\t\t} else if (status === 1223) {\n\t\t\t\t\t\t\t\t\t\tstatus = 204;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Call complete if needed\n\t\t\t\t\t\t\tif (responses) {\n\t\t\t\t\t\t\t\tcomplete(status, statusText, responses, xhr.getAllResponseHeaders());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!options.async) {\n\t\t\t\t\t\t\t// if we're in sync mode we fire the callback\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t} else if (xhr.readyState === 4) {\n\t\t\t\t\t\t\t// (IE6 & IE7) if it's in cache and has been\n\t\t\t\t\t\t\t// retrieved directly we need to fire the callback\n\t\t\t\t\t\t\tsetTimeout(callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Add to the list of active xhr callbacks\n\t\t\t\t\t\t\txhr.onreadystatechange = xhrCallbacks[id] = callback;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tabort: function () {\n\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\tcallback(undefined, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\t// Functions to create xhrs\n\tfunction createStandardXHR() {\n\t\ttry {\n\t\t\treturn new window.XMLHttpRequest();\n\t\t} catch (e) {}\n\t}\n\n\tfunction createActiveXHR() {\n\t\ttry {\n\t\t\treturn new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n\t\t} catch (e) {}\n\t}\n\n\t// Install script dataType\n\tjQuery.ajaxSetup({\n\t\taccepts: {\n\t\t\tscript: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n\t\t},\n\t\tcontents: {\n\t\t\tscript: /(?:java|ecma)script/\n\t\t},\n\t\tconverters: {\n\t\t\t\"text script\": function (text) {\n\t\t\t\tjQuery.globalEval(text);\n\t\t\t\treturn text;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Handle cache's special case and global\n\tjQuery.ajaxPrefilter(\"script\", function (s) {\n\t\tif (s.cache === undefined) {\n\t\t\ts.cache = false;\n\t\t}\n\t\tif (s.crossDomain) {\n\t\t\ts.type = \"GET\";\n\t\t\ts.global = false;\n\t\t}\n\t});\n\n\t// Bind script tag hack transport\n\tjQuery.ajaxTransport(\"script\", function (s) {\n\n\t\t// This transport only deals with cross domain requests\n\t\tif (s.crossDomain) {\n\n\t\t\tvar script,\n\t\t\t    head = document.head || jQuery(\"head\")[0] || document.documentElement;\n\n\t\t\treturn {\n\n\t\t\t\tsend: function (_, callback) {\n\n\t\t\t\t\tscript = document.createElement(\"script\");\n\n\t\t\t\t\tscript.async = true;\n\n\t\t\t\t\tif (s.scriptCharset) {\n\t\t\t\t\t\tscript.charset = s.scriptCharset;\n\t\t\t\t\t}\n\n\t\t\t\t\tscript.src = s.url;\n\n\t\t\t\t\t// Attach handlers for all browsers\n\t\t\t\t\tscript.onload = script.onreadystatechange = function (_, isAbort) {\n\n\t\t\t\t\t\tif (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n\n\t\t\t\t\t\t\t// Handle memory leak in IE\n\t\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\n\n\t\t\t\t\t\t\t// Remove the script\n\t\t\t\t\t\t\tif (script.parentNode) {\n\t\t\t\t\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Dereference the script\n\t\t\t\t\t\t\tscript = null;\n\n\t\t\t\t\t\t\t// Callback if not abort\n\t\t\t\t\t\t\tif (!isAbort) {\n\t\t\t\t\t\t\t\tcallback(200, \"success\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n\t\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\t\thead.insertBefore(script, head.firstChild);\n\t\t\t\t},\n\n\t\t\t\tabort: function () {\n\t\t\t\t\tif (script) {\n\t\t\t\t\t\tscript.onload(undefined, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n\t// Default jsonp settings\n\tjQuery.ajaxSetup({\n\t\tjsonp: \"callback\",\n\t\tjsonpCallback: function () {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t});\n\n\t// Detect, normalize options and install callbacks for jsonp requests\n\tjQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\");\n\n\t\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\t\tif (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n\t\t\t// Insert callback into url or form data\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n\t\t\t}\n\n\t\t\t// Use data converter to retrieve json after script execution\n\t\t\ts.converters[\"script json\"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + \" was not called\");\n\t\t\t\t}\n\t\t\t\treturn responseContainer[0];\n\t\t\t};\n\n\t\t\t// force json dataType\n\t\t\ts.dataTypes[0] = \"json\";\n\n\t\t\t// Install callback\n\t\t\toverwritten = window[callbackName];\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t};\n\n\t\t\t// Clean-up function (fires after converters)\n\t\t\tjqXHR.always(function () {\n\t\t\t\t// Restore preexisting value\n\t\t\t\twindow[callbackName] = overwritten;\n\n\t\t\t\t// Save back as free\n\t\t\t\tif (s[callbackName]) {\n\t\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t\t// save the callback name for future use\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t}\n\n\t\t\t\t// Call if it was a function and we have a response\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t});\n\n\t\t\t// Delegate to script\n\t\t\treturn \"script\";\n\t\t}\n\t});\n\n\t// data: string of html\n\t// context (optional): If specified, the fragment will be created in this context, defaults to document\n\t// keepScripts (optional): If true, will include scripts passed in the html string\n\tjQuery.parseHTML = function (data, context, keepScripts) {\n\t\tif (!data || typeof data !== \"string\") {\n\t\t\treturn null;\n\t\t}\n\t\tif (typeof context === \"boolean\") {\n\t\t\tkeepScripts = context;\n\t\t\tcontext = false;\n\t\t}\n\t\tcontext = context || document;\n\n\t\tvar parsed = rsingleTag.exec(data),\n\t\t    scripts = !keepScripts && [];\n\n\t\t// Single tag\n\t\tif (parsed) {\n\t\t\treturn [context.createElement(parsed[1])];\n\t\t}\n\n\t\tparsed = jQuery.buildFragment([data], context, scripts);\n\n\t\tif (scripts && scripts.length) {\n\t\t\tjQuery(scripts).remove();\n\t\t}\n\n\t\treturn jQuery.merge([], parsed.childNodes);\n\t};\n\n\t// Keep a copy of the old load method\n\tvar _load = jQuery.fn.load;\n\n\t/**\r\n  * Load a url into a page\r\n  */\n\tjQuery.fn.load = function (url, params, callback) {\n\t\tif (typeof url !== \"string\" && _load) {\n\t\t\treturn _load.apply(this, arguments);\n\t\t}\n\n\t\tvar selector,\n\t\t    response,\n\t\t    type,\n\t\t    self = this,\n\t\t    off = url.indexOf(\" \");\n\n\t\tif (off >= 0) {\n\t\t\tselector = jQuery.trim(url.slice(off, url.length));\n\t\t\turl = url.slice(0, off);\n\t\t}\n\n\t\t// If it's a function\n\t\tif (jQuery.isFunction(params)) {\n\n\t\t\t// We assume that it's the callback\n\t\t\tcallback = params;\n\t\t\tparams = undefined;\n\n\t\t\t// Otherwise, build a param string\n\t\t} else if (params && typeof params === \"object\") {\n\t\t\ttype = \"POST\";\n\t\t}\n\n\t\t// If we have elements to modify, make the request\n\t\tif (self.length > 0) {\n\t\t\tjQuery.ajax({\n\t\t\t\turl: url,\n\n\t\t\t\t// if \"type\" variable is undefined, then \"GET\" method will be used\n\t\t\t\ttype: type,\n\t\t\t\tdataType: \"html\",\n\t\t\t\tdata: params\n\t\t\t}).done(function (responseText) {\n\n\t\t\t\t// Save response for use in complete callback\n\t\t\t\tresponse = arguments;\n\n\t\t\t\tself.html(selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText);\n\t\t\t}).complete(callback && function (jqXHR, status) {\n\t\t\t\tself.each(callback, response || [jqXHR.responseText, status, jqXHR]);\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t// Attach a bunch of functions for handling common AJAX events\n\tjQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n\t\tjQuery.fn[type] = function (fn) {\n\t\t\treturn this.on(type, fn);\n\t\t};\n\t});\n\n\tjQuery.expr.filters.animated = function (elem) {\n\t\treturn jQuery.grep(jQuery.timers, function (fn) {\n\t\t\treturn elem === fn.elem;\n\t\t}).length;\n\t};\n\n\tvar docElem = window.document.documentElement;\n\n\t/**\r\n  * Gets a window from an element\r\n  */\n\tfunction getWindow(elem) {\n\t\treturn jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n\t}\n\n\tjQuery.offset = {\n\t\tsetOffset: function (elem, options, i) {\n\t\t\tvar curPosition,\n\t\t\t    curLeft,\n\t\t\t    curCSSTop,\n\t\t\t    curTop,\n\t\t\t    curOffset,\n\t\t\t    curCSSLeft,\n\t\t\t    calculatePosition,\n\t\t\t    position = jQuery.css(elem, \"position\"),\n\t\t\t    curElem = jQuery(elem),\n\t\t\t    props = {};\n\n\t\t\t// set position first, in-case top/left are set even on static elem\n\t\t\tif (position === \"static\") {\n\t\t\t\telem.style.position = \"relative\";\n\t\t\t}\n\n\t\t\tcurOffset = curElem.offset();\n\t\t\tcurCSSTop = jQuery.css(elem, \"top\");\n\t\t\tcurCSSLeft = jQuery.css(elem, \"left\");\n\t\t\tcalculatePosition = (position === \"absolute\" || position === \"fixed\") && jQuery.inArray(\"auto\", [curCSSTop, curCSSLeft]) > -1;\n\n\t\t\t// need to be able to calculate position if either top or left is auto and position is either absolute or fixed\n\t\t\tif (calculatePosition) {\n\t\t\t\tcurPosition = curElem.position();\n\t\t\t\tcurTop = curPosition.top;\n\t\t\t\tcurLeft = curPosition.left;\n\t\t\t} else {\n\t\t\t\tcurTop = parseFloat(curCSSTop) || 0;\n\t\t\t\tcurLeft = parseFloat(curCSSLeft) || 0;\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(options)) {\n\t\t\t\toptions = options.call(elem, i, curOffset);\n\t\t\t}\n\n\t\t\tif (options.top != null) {\n\t\t\t\tprops.top = options.top - curOffset.top + curTop;\n\t\t\t}\n\t\t\tif (options.left != null) {\n\t\t\t\tprops.left = options.left - curOffset.left + curLeft;\n\t\t\t}\n\n\t\t\tif (\"using\" in options) {\n\t\t\t\toptions.using.call(elem, props);\n\t\t\t} else {\n\t\t\t\tcurElem.css(props);\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.fn.extend({\n\t\toffset: function (options) {\n\t\t\tif (arguments.length) {\n\t\t\t\treturn options === undefined ? this : this.each(function (i) {\n\t\t\t\t\tjQuery.offset.setOffset(this, options, i);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar docElem,\n\t\t\t    win,\n\t\t\t    box = { top: 0, left: 0 },\n\t\t\t    elem = this[0],\n\t\t\t    doc = elem && elem.ownerDocument;\n\n\t\t\tif (!doc) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\t// Make sure it's not a disconnected DOM node\n\t\t\tif (!jQuery.contains(docElem, elem)) {\n\t\t\t\treturn box;\n\t\t\t}\n\n\t\t\t// If we don't have gBCR, just use 0,0 rather than error\n\t\t\t// BlackBerry 5, iOS 3 (original iPhone)\n\t\t\tif (typeof elem.getBoundingClientRect !== strundefined) {\n\t\t\t\tbox = elem.getBoundingClientRect();\n\t\t\t}\n\t\t\twin = getWindow(doc);\n\t\t\treturn {\n\t\t\t\ttop: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),\n\t\t\t\tleft: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)\n\t\t\t};\n\t\t},\n\n\t\tposition: function () {\n\t\t\tif (!this[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar offsetParent,\n\t\t\t    offset,\n\t\t\t    parentOffset = { top: 0, left: 0 },\n\t\t\t    elem = this[0];\n\n\t\t\t// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent\n\t\t\tif (jQuery.css(elem, \"position\") === \"fixed\") {\n\t\t\t\t// we assume that getBoundingClientRect is available when computed position is fixed\n\t\t\t\toffset = elem.getBoundingClientRect();\n\t\t\t} else {\n\t\t\t\t// Get *real* offsetParent\n\t\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t\t// Get correct offsets\n\t\t\t\toffset = this.offset();\n\t\t\t\tif (!jQuery.nodeName(offsetParent[0], \"html\")) {\n\t\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t\t}\n\n\t\t\t\t// Add offsetParent borders\n\t\t\t\tparentOffset.top += jQuery.css(offsetParent[0], \"borderTopWidth\", true);\n\t\t\t\tparentOffset.left += jQuery.css(offsetParent[0], \"borderLeftWidth\", true);\n\t\t\t}\n\n\t\t\t// Subtract parent offsets and element margins\n\t\t\t// note: when an element has margin: auto the offsetLeft and marginLeft\n\t\t\t// are the same in Safari causing offset.left to incorrectly be 0\n\t\t\treturn {\n\t\t\t\ttop: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n\t\t\t\tleft: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n\t\t\t};\n\t\t},\n\n\t\toffsetParent: function () {\n\t\t\treturn this.map(function () {\n\t\t\t\tvar offsetParent = this.offsetParent || docElem;\n\n\t\t\t\twhile (offsetParent && !jQuery.nodeName(offsetParent, \"html\") && jQuery.css(offsetParent, \"position\") === \"static\") {\n\t\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t\t}\n\t\t\t\treturn offsetParent || docElem;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Create scrollLeft and scrollTop methods\n\tjQuery.each({ scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function (method, prop) {\n\t\tvar top = /Y/.test(prop);\n\n\t\tjQuery.fn[method] = function (val) {\n\t\t\treturn access(this, function (elem, method, val) {\n\t\t\t\tvar win = getWindow(elem);\n\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\treturn win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];\n\t\t\t\t}\n\n\t\t\t\tif (win) {\n\t\t\t\t\twin.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());\n\t\t\t\t} else {\n\t\t\t\t\telem[method] = val;\n\t\t\t\t}\n\t\t\t}, method, val, arguments.length, null);\n\t\t};\n\t});\n\n\t// Add the top/left cssHooks using jQuery.fn.position\n\t// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n\t// getComputedStyle returns percent when specified for top/left/bottom/right\n\t// rather than make the css module depend on the offset module, we just check for it here\n\tjQuery.each([\"top\", \"left\"], function (i, prop) {\n\t\tjQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n\t\t\tif (computed) {\n\t\t\t\tcomputed = curCSS(elem, prop);\n\t\t\t\t// if curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n\t\t\t}\n\t\t});\n\t});\n\n\t// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\tjQuery.each({ Height: \"height\", Width: \"width\" }, function (name, type) {\n\t\tjQuery.each({ padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function (defaultExtra, funcName) {\n\t\t\t// margin is only for outerHeight, outerWidth\n\t\t\tjQuery.fn[funcName] = function (margin, value) {\n\t\t\t\tvar chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n\t\t\t\t    extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n\n\t\t\t\treturn access(this, function (elem, type, value) {\n\t\t\t\t\tvar doc;\n\n\t\t\t\t\tif (jQuery.isWindow(elem)) {\n\t\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\t\treturn elem.document.documentElement[\"client\" + name];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get document width or height\n\t\t\t\t\tif (elem.nodeType === 9) {\n\t\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\n\t\t\t\t\t\t// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\n\t\t\t\t\t\treturn Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value === undefined ?\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css(elem, type, extra) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style(elem, type, value, extra);\n\t\t\t\t}, type, chainable ? margin : undefined, chainable, null);\n\t\t\t};\n\t\t});\n\t});\n\n\t// The number of elements contained in the matched element set\n\tjQuery.fn.size = function () {\n\t\treturn this.length;\n\t};\n\n\tjQuery.fn.andSelf = jQuery.fn.addBack;\n\n\t// Register as a named AMD module, since jQuery can be concatenated with other\n\t// files that may use define, but not via a proper concatenation script that\n\t// understands anonymous AMD modules. A named AMD is safest and most robust\n\t// way to register. Lowercase jquery is used because AMD module names are\n\t// derived from file names, and jQuery is normally delivered in a lowercase\n\t// file name. Do this after creating the global so that if an AMD module wants\n\t// to call noConflict to hide this version of jQuery, it will work.\n\n\t// Note that for maximum portability, libraries that are not jQuery should\n\t// declare themselves as anonymous modules, and avoid setting a global if an\n\t// AMD loader is present. jQuery is a special case. For more information, see\n\t// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn jQuery;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\n\tvar\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\n\tjQuery.noConflict = function (deep) {\n\t\tif (window.$ === jQuery) {\n\t\t\twindow.$ = _$;\n\t\t}\n\n\t\tif (deep && window.jQuery === jQuery) {\n\t\t\twindow.jQuery = _jQuery;\n\t\t}\n\n\t\treturn jQuery;\n\t};\n\n\t// Expose jQuery and $ identifiers, even in\n\t// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n\t// and CommonJS for browser emulators (#13566)\n\tif (typeof noGlobal === strundefined) {\n\t\twindow.jQuery = window.$ = jQuery;\n\t}\n\n\treturn jQuery;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGlicy9qcXVlcnkvanF1ZXJ5LTEuMTEuMi5qcz84MGMyIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImRlbGV0ZWRJZHMiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJzdXBwb3J0IiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwibGVuZ3RoIiwidG9BcnJheSIsImNhbGwiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsImFyZ3MiLCJtYXAiLCJlbGVtIiwiaSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsInNyYyIsImNvcHlJc0FycmF5IiwiY29weSIsIm5hbWUiLCJvcHRpb25zIiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsIm9iaiIsInR5cGUiLCJBcnJheSIsImlzV2luZG93IiwiaXNOdW1lcmljIiwicGFyc2VGbG9hdCIsImlzRW1wdHlPYmplY3QiLCJrZXkiLCJub2RlVHlwZSIsImUiLCJvd25MYXN0IiwiZ2xvYmFsRXZhbCIsImRhdGEiLCJ0cmltIiwiZXhlY1NjcmlwdCIsImNhbWVsQ2FzZSIsInN0cmluZyIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJ2YWx1ZSIsImlzQXJyYXlsaWtlIiwidGV4dCIsIm1ha2VBcnJheSIsImFyciIsInJlc3VsdHMiLCJPYmplY3QiLCJpbkFycmF5IiwibWF4Iiwic2Vjb25kIiwiZ3JlcCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJwcm94eSIsInRtcCIsIm5vdyIsIkRhdGUiLCJzcGxpdCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJNQVhfTkVHQVRJVkUiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJjaGFyYWN0ZXJFbmNvZGluZyIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJlc2NhcGUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm1hdGNoIiwibSIsImdyb3VwcyIsIm9sZCIsIm5pZCIsIm5ld0NvbnRleHQiLCJuZXdTZWxlY3RvciIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJwYXJlbnROb2RlIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0Iiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImRvY3VtZW50RWxlbWVudCIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwiZG9jIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaW5kIiwiZmlsdGVyIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInZhbCIsInNwZWNpZmllZCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsImRpciIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJ4bWwiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImRpc2FibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInRva2VucyIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImFkZENvbWJpbmF0b3IiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGl2MSIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyaXNTaW1wbGUiLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJzZWxmIiwiaXMiLCJyb290alF1ZXJ5IiwiY2hhckF0IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsIm5leHQiLCJwcmV2IiwidW50aWwiLCJzaWJsaW5nIiwibiIsInIiLCJoYXMiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsImwiLCJwb3MiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnRXaW5kb3ciLCJyZXZlcnNlIiwicm5vdHdoaXRlIiwib3B0aW9uc0NhY2hlIiwiY3JlYXRlT3B0aW9ucyIsIm9iamVjdCIsImZsYWciLCJDYWxsYmFja3MiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImZpcmluZ0xlbmd0aCIsImZpcmluZ0luZGV4IiwiZmlyaW5nU3RhcnQiLCJzdGFjayIsIm9uY2UiLCJmaXJlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwicmVtb3ZlIiwiZW1wdHkiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsInByb21pc2UiLCJhbHdheXMiLCJkZWZlcnJlZCIsImZhaWwiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicmVzb2x2ZSIsInJlamVjdCIsInByb2dyZXNzIiwibm90aWZ5IiwicGlwZSIsInN0YXRlU3RyaW5nIiwid2hlbiIsInN1Ym9yZGluYXRlIiwicmVzb2x2ZVZhbHVlcyIsInJlbWFpbmluZyIsInVwZGF0ZUZ1bmMiLCJ2YWx1ZXMiLCJwcm9ncmVzc1ZhbHVlcyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJob2xkIiwid2FpdCIsImJvZHkiLCJzZXRUaW1lb3V0IiwidHJpZ2dlckhhbmRsZXIiLCJvZmYiLCJkZXRhY2giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29tcGxldGVkIiwiZGV0YWNoRXZlbnQiLCJldmVudCIsInJlYWR5U3RhdGUiLCJmcmFtZUVsZW1lbnQiLCJkb1Njcm9sbCIsImRvU2Nyb2xsQ2hlY2siLCJzdHJ1bmRlZmluZWQiLCJpbmxpbmVCbG9ja05lZWRzTGF5b3V0IiwiY29udGFpbmVyIiwic3R5bGUiLCJjc3NUZXh0Iiwiem9vbSIsIm9mZnNldFdpZHRoIiwiZGVsZXRlRXhwYW5kbyIsImFjY2VwdERhdGEiLCJub0RhdGEiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJwYXJzZUpTT04iLCJpc0VtcHR5RGF0YU9iamVjdCIsImludGVybmFsRGF0YSIsInB2dCIsInRoaXNDYWNoZSIsImludGVybmFsS2V5IiwiaXNOb2RlIiwidG9KU09OIiwiaW50ZXJuYWxSZW1vdmVEYXRhIiwiY2xlYW5EYXRhIiwiaGFzRGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwicXVldWUiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsImNzc0V4cGFuZCIsImlzSGlkZGVuIiwiZWwiLCJjc3MiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJyY2hlY2thYmxlVHlwZSIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImxlYWRpbmdXaGl0ZXNwYWNlIiwidGJvZHkiLCJodG1sU2VyaWFsaXplIiwiaHRtbDVDbG9uZSIsImNsb25lTm9kZSIsIm91dGVySFRNTCIsImFwcGVuZENoZWNrZWQiLCJub0Nsb25lQ2hlY2tlZCIsImNoZWNrQ2xvbmUiLCJub0Nsb25lRXZlbnQiLCJjbGljayIsImV2ZW50TmFtZSIsImNoYW5nZSIsImZvY3VzaW4iLCJyZm9ybUVsZW1zIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJyZm9jdXNNb3JwaCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJ0eXBlcyIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmpJbiIsInNwZWNpYWwiLCJldmVudEhhbmRsZSIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwidHJpZ2dlciIsIm9ubHlIYW5kbGVycyIsIm9udHlwZSIsImJ1YmJsZVR5cGUiLCJldmVudFBhdGgiLCJFdmVudCIsImlzVHJpZ2dlciIsIm5hbWVzcGFjZV9yZSIsIm5vQnViYmxlIiwicGFyZW50V2luZG93IiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIl9kZWZhdWx0IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsInNlbCIsImJ1dHRvbiIsInByb3AiLCJvcmlnaW5hbEV2ZW50IiwiZml4SG9vayIsImZpeEhvb2tzIiwibW91c2VIb29rcyIsImtleUhvb2tzIiwicHJvcHMiLCJzcmNFbGVtZW50IiwibWV0YUtleSIsIm9yaWdpbmFsIiwid2hpY2giLCJjaGFyQ29kZSIsImtleUNvZGUiLCJldmVudERvYyIsImZyb21FbGVtZW50IiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJyZWxhdGVkVGFyZ2V0IiwidG9FbGVtZW50IiwibG9hZCIsImZvY3VzIiwiYmx1ciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJidWJibGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJjYW5jZWxCdWJibGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwic3VibWl0QnViYmxlcyIsImZvcm0iLCJfc3VibWl0X2J1YmJsZSIsImNoYW5nZUJ1YmJsZXMiLCJwcm9wZXJ0eU5hbWUiLCJfanVzdF9jaGFuZ2VkIiwiZm9jdXNpbkJ1YmJsZXMiLCJhdHRhY2hlcyIsIm9uIiwib25lIiwib3JpZ0ZuIiwiY3JlYXRlU2FmZUZyYWdtZW50Iiwibm9kZU5hbWVzIiwic2FmZUZyYWciLCJyaW5saW5lalF1ZXJ5Iiwicm5vc2hpbWNhY2hlIiwicmxlYWRpbmdXaGl0ZXNwYWNlIiwicnhodG1sVGFnIiwicnRhZ05hbWUiLCJydGJvZHkiLCJyaHRtbCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGUiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIndyYXBNYXAiLCJvcHRpb24iLCJsZWdlbmQiLCJhcmVhIiwicGFyYW0iLCJ0aGVhZCIsInRyIiwiY29sIiwidGQiLCJzYWZlRnJhZ21lbnQiLCJmcmFnbWVudERpdiIsIm9wdGdyb3VwIiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImdldEFsbCIsImZvdW5kIiwiZml4RGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0Q2hlY2tlZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsIm9sZERhdGEiLCJjdXJEYXRhIiwiZml4Q2xvbmVOb2RlSXNzdWVzIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwiZGVzdEVsZW1lbnRzIiwic3JjRWxlbWVudHMiLCJpblBhZ2UiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsIndyYXAiLCJzYWZlIiwibm9kZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZCIsImRvbU1hbmlwIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwia2VlcERhdGEiLCJodG1sIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJoYXNTY3JpcHRzIiwic2V0IiwiaU5vQ2xvbmUiLCJfZXZhbFVybCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiaW5zZXJ0IiwiaWZyYW1lIiwiZWxlbWRpc3BsYXkiLCJhY3R1YWxEaXNwbGF5IiwiZGlzcGxheSIsImdldERlZmF1bHRDb21wdXRlZFN0eWxlIiwiZGVmYXVsdERpc3BsYXkiLCJ3cml0ZSIsImNsb3NlIiwic2hyaW5rV3JhcEJsb2Nrc1ZhbCIsInNocmlua1dyYXBCbG9ja3MiLCJ3aWR0aCIsInJtYXJnaW4iLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJjdXJDU1MiLCJycG9zaXRpb24iLCJnZXRDb21wdXRlZFN0eWxlIiwib3BlbmVyIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImN1cnJlbnRTdHlsZSIsImxlZnQiLCJycyIsInJzTGVmdCIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29uZGl0aW9uIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsIiwicmVsaWFibGVNYXJnaW5SaWdodFZhbCIsIm9wYWNpdHkiLCJjc3NGbG9hdCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nIiwiTW96Qm94U2l6aW5nIiwiV2Via2l0Qm94U2l6aW5nIiwicmVsaWFibGVIaWRkZW5PZmZzZXRzIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwibWFyZ2luUmlnaHQiLCJvZmZzZXRIZWlnaHQiLCJzd2FwIiwicmFscGhhIiwicm9wYWNpdHkiLCJyZGlzcGxheXN3YXAiLCJybnVtc3BsaXQiLCJycmVsTnVtIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJ2ZW5kb3JQcm9wTmFtZSIsImNhcE5hbWUiLCJvcmlnTmFtZSIsInNob3dIaWRlIiwic2hvdyIsImhpZGRlbiIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImNzc0hvb2tzIiwiY3NzTnVtYmVyIiwiY3NzUHJvcHMiLCIkMSIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwiaGlkZSIsInRvZ2dsZSIsIlR3ZWVuIiwiZWFzaW5nIiwidW5pdCIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwic3RlcCIsInR3ZWVuIiwiZngiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwidGltZXJJZCIsInJmeHR5cGVzIiwicmZ4bnVtIiwicnJ1biIsImFuaW1hdGlvblByZWZpbHRlcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwidHdlZW5lcnMiLCJjcmVhdGVUd2VlbiIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJhbmltYXRpb24iLCJjb2xsZWN0aW9uIiwib3B0cyIsIm9sZGZpcmUiLCJjaGVja0Rpc3BsYXkiLCJhbmltIiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJBbmltYXRpb24iLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInRpY2siLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwidGltZXIiLCJjb21wbGV0ZSIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZ2V0U2V0QXR0cmlidXRlIiwiaHJlZk5vcm1hbGl6ZWQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJlbmN0eXBlIiwib3B0RGlzYWJsZWQiLCJyYWRpb1ZhbHVlIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0Iiwic2Nyb2xsSGVpZ2h0Iiwibm9kZUhvb2siLCJib29sSG9vayIsInJ1c2VEZWZhdWx0IiwiZ2V0U2V0SW5wdXQiLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwic2V0QXR0cmlidXRlTm9kZSIsImNyZWF0ZUF0dHJpYnV0ZSIsImNvb3JkcyIsImNvbnRlbnRlZGl0YWJsZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsIm5vdHhtbCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJyY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJwcm9jZWVkIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJub25jZSIsInJxdWVyeSIsInJ2YWxpZHRva2VucyIsIkpTT04iLCJwYXJzZSIsInJlcXVpcmVOb25Db21tYSIsImRlcHRoIiwic3RyIiwiY29tbWEiLCJvcGVuIiwiRnVuY3Rpb24iLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsIkFjdGl2ZVhPYmplY3QiLCJhc3luYyIsImxvYWRYTUwiLCJhamF4TG9jUGFydHMiLCJhamF4TG9jYXRpb24iLCJyaGFzaCIsInJ0cyIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwicnVybCIsInByZWZpbHRlcnMiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicyIsInJlc3BvbnNlcyIsImZpcnN0RGF0YVR5cGUiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwidGltZW91dFRpbWVyIiwiZmlyZUdsb2JhbHMiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnMiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImxuYW1lIiwib3ZlcnJpZGVNaW1lVHlwZSIsImNvZGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJzdWNjZXNzIiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJ0cmFkaXRpb25hbCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsIm1vZGlmaWVkIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwicjIwIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwieGhyIiwiY3JlYXRlU3RhbmRhcmRYSFIiLCJjcmVhdGVBY3RpdmVYSFIiLCJ4aHJJZCIsInhockNhbGxiYWNrcyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJ1c2VybmFtZSIsInhockZpZWxkcyIsImlzQWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVRleHQiLCJYTUxIdHRwUmVxdWVzdCIsInNjcmlwdCIsImhlYWQiLCJzY3JpcHRDaGFyc2V0IiwiY2hhcnNldCIsIm9ubG9hZCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsIl9sb2FkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJnZXRXaW5kb3ciLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBY0MsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7O0FBRTVCLEtBQUssT0FBT0MsTUFBUCxLQUFrQixRQUFsQixJQUE4QixPQUFPQSxPQUFPQyxPQUFkLEtBQTBCLFFBQTdELEVBQXdFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FELFNBQU9DLE9BQVAsR0FBaUJILE9BQU9JLFFBQVAsR0FDaEJILFFBQVNELE1BQVQsRUFBaUIsSUFBakIsQ0FEZ0IsR0FFaEIsVUFBVUssQ0FBVixFQUFjO0FBQ2IsT0FBSyxDQUFDQSxFQUFFRCxRQUFSLEVBQW1CO0FBQ2xCLFVBQU0sSUFBSUUsS0FBSixDQUFXLDBDQUFYLENBQU47QUFDQTtBQUNELFVBQU9MLFFBQVNJLENBQVQsQ0FBUDtBQUNBLEdBUEY7QUFRQSxFQWhCRCxNQWdCTztBQUNOSixVQUFTRCxNQUFUO0FBQ0E7O0FBRUY7QUFDQyxDQXZCQSxFQXVCQyxPQUFPTyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQSxNQUFoQyxHQUF5QyxJQXZCMUMsRUF1QmdELFVBQVVBLE1BQVYsRUFBa0JDLFFBQWxCLEVBQTZCOztBQUU5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUlDLGFBQWEsRUFBakI7O0FBRUEsS0FBSUMsUUFBUUQsV0FBV0MsS0FBdkI7O0FBRUEsS0FBSUMsU0FBU0YsV0FBV0UsTUFBeEI7O0FBRUEsS0FBSUMsT0FBT0gsV0FBV0csSUFBdEI7O0FBRUEsS0FBSUMsVUFBVUosV0FBV0ksT0FBekI7O0FBRUEsS0FBSUMsYUFBYSxFQUFqQjs7QUFFQSxLQUFJQyxXQUFXRCxXQUFXQyxRQUExQjs7QUFFQSxLQUFJQyxTQUFTRixX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TUFBL0IsRUFBd0M7QUFDdkNiLFVBQU9hLE1BQVAsR0FBZ0JnbkMsT0FBaEI7QUFDQTs7QUFFRCxTQUFPaG5DLE1BQVA7QUFDQSxFQVZEOztBQVlBO0FBQ0E7QUFDQTtBQUNBLEtBQUssT0FBT1osUUFBUCxLQUFvQm9lLFlBQXpCLEVBQXdDO0FBQ3ZDcmUsU0FBT2EsTUFBUCxHQUFnQmIsT0FBTytuQyxDQUFQLEdBQVdsbkMsTUFBM0I7QUFDQTs7QUFLRCxRQUFPQSxNQUFQO0FBRUMsQ0EzbFVBLENBQUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYxLjExLjJcclxuICogaHR0cDovL2pxdWVyeS5jb20vXHJcbiAqXHJcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xyXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXHJcbiAqXHJcbiAqIERhdGU6IDIwMTQtMTItMTdUMTU6MjdaXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XHJcblxyXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIHdpbmRvdyBpcyBwcmVzZW50LFxyXG5cdFx0Ly8gZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeVxyXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBpbmhlcmVudGx5IHBvc3NlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcclxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBqUXVlcnktbWFraW5nIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHNcclxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgd2luZG93XHJcblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XHJcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcclxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XHJcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcclxuXHRcdFx0fTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XHJcblx0fVxyXG5cclxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcclxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XHJcblxyXG4vLyBDYW4ndCBkbyB0aGlzIGJlY2F1c2Ugc2V2ZXJhbCBhcHBzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXHJcbi8vIHRoZSBzdGFjayB2aWEgYXJndW1lbnRzLmNhbGxlci5jYWxsZWUgYW5kIEZpcmVmb3ggZGllcyBpZlxyXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXHJcbi8vXHJcblxyXG52YXIgZGVsZXRlZElkcyA9IFtdO1xyXG5cclxudmFyIHNsaWNlID0gZGVsZXRlZElkcy5zbGljZTtcclxuXHJcbnZhciBjb25jYXQgPSBkZWxldGVkSWRzLmNvbmNhdDtcclxuXHJcbnZhciBwdXNoID0gZGVsZXRlZElkcy5wdXNoO1xyXG5cclxudmFyIGluZGV4T2YgPSBkZWxldGVkSWRzLmluZGV4T2Y7XHJcblxyXG52YXIgY2xhc3MydHlwZSA9IHt9O1xyXG5cclxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcclxuXHJcbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xyXG5cclxudmFyIHN1cHBvcnQgPSB7fTtcclxuXHJcblxyXG5cclxudmFyXHJcblx0dmVyc2lvbiA9IFwiMS4xMS4yXCIsXHJcblxyXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XHJcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xyXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXHJcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxyXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgSUU8OVxyXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxyXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxyXG5cclxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcclxuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxyXG5cdHJkYXNoQWxwaGEgPSAvLShbXFxkYS16XSkvZ2ksXHJcblxyXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcclxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xyXG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xyXG5cdH07XHJcblxyXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xyXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcclxuXHRqcXVlcnk6IHZlcnNpb24sXHJcblxyXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXHJcblxyXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3JcclxuXHRzZWxlY3RvcjogXCJcIixcclxuXHJcblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXHJcblx0bGVuZ3RoOiAwLFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxyXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XHJcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xyXG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cclxuXHJcblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcclxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxyXG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xyXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxyXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XHJcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcclxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcclxuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXHJcblx0Ly8gKFlvdSBjYW4gc2VlZCB0aGUgYXJndW1lbnRzIHdpdGggYW4gYXJyYXkgb2YgYXJncywgYnV0IHRoaXMgaXNcclxuXHQvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pXHJcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjaywgYXJncyApO1xyXG5cdH0sXHJcblxyXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xyXG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xyXG5cdFx0fSkpO1xyXG5cdH0sXHJcblxyXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XHJcblx0fSxcclxuXHJcblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcclxuXHR9LFxyXG5cclxuXHRsYXN0OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xyXG5cdH0sXHJcblxyXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcclxuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbal0gXSA6IFtdICk7XHJcblx0fSxcclxuXHJcblx0ZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTtcclxuXHR9LFxyXG5cclxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXHJcblx0cHVzaDogcHVzaCxcclxuXHRzb3J0OiBkZWxldGVkSWRzLnNvcnQsXHJcblx0c3BsaWNlOiBkZWxldGVkSWRzLnNwbGljZVxyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgc3JjLCBjb3B5SXNBcnJheSwgY29weSwgbmFtZSwgb3B0aW9ucywgY2xvbmUsXHJcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXHJcblx0XHRpID0gMSxcclxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXHJcblx0XHRkZWVwID0gZmFsc2U7XHJcblxyXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cclxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0ZGVlcCA9IHRhcmdldDtcclxuXHJcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XHJcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcclxuXHRcdGkrKztcclxuXHR9XHJcblxyXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxyXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcclxuXHRcdHRhcmdldCA9IHt9O1xyXG5cdH1cclxuXHJcblx0Ly8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXHJcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XHJcblx0XHR0YXJnZXQgPSB0aGlzO1xyXG5cdFx0aS0tO1xyXG5cdH1cclxuXHJcblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXHJcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XHJcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3RcclxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xyXG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XHJcblxyXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3BcclxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXHJcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcclxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XHJcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXHJcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XHJcblxyXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxyXG5cdHJldHVybiB0YXJnZXQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2VcclxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxyXG5cclxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxyXG5cdGlzUmVhZHk6IHRydWUsXHJcblxyXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcclxuXHR9LFxyXG5cclxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxyXG5cclxuXHQvLyBTZWUgdGVzdC91bml0L2NvcmUuanMgZm9yIGRldGFpbHMgY29uY2VybmluZyBpc0Z1bmN0aW9uLlxyXG5cdC8vIFNpbmNlIHZlcnNpb24gMS4zLCBET00gbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGxpa2UgYWxlcnRcclxuXHQvLyBhcmVuJ3Qgc3VwcG9ydGVkLiBUaGV5IHJldHVybiBmYWxzZSBvbiBJRSAoIzI5NjgpLlxyXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xyXG5cdH0sXHJcblxyXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImFycmF5XCI7XHJcblx0fSxcclxuXHJcblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xyXG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PSBvYmoud2luZG93O1xyXG5cdH0sXHJcblxyXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcclxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcclxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxyXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXHJcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAob2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKyAxKSA+PSAwO1xyXG5cdH0sXHJcblxyXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHR2YXIgbmFtZTtcclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0dmFyIGtleTtcclxuXHJcblx0XHQvLyBNdXN0IGJlIGFuIE9iamVjdC5cclxuXHRcdC8vIEJlY2F1c2Ugb2YgSUUsIHdlIGFsc28gaGF2ZSB0byBjaGVjayB0aGUgcHJlc2VuY2Ugb2YgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5LlxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgRE9NIG5vZGVzIGFuZCB3aW5kb3cgb2JqZWN0cyBkb24ndCBwYXNzIHRocm91Z2gsIGFzIHdlbGxcclxuXHRcdGlmICggIW9iaiB8fCBqUXVlcnkudHlwZShvYmopICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxyXG5cdFx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxyXG5cdFx0XHRcdCFoYXNPd24uY2FsbChvYmosIFwiY29uc3RydWN0b3JcIikgJiZcclxuXHRcdFx0XHQhaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgXCJpc1Byb3RvdHlwZU9mXCIpICkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdC8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5N1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0Ly8gSGFuZGxlIGl0ZXJhdGlvbiBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlZm9yZSBvd24gcHJvcGVydGllcy5cclxuXHRcdGlmICggc3VwcG9ydC5vd25MYXN0ICkge1xyXG5cdFx0XHRmb3IgKCBrZXkgaW4gb2JqICkge1xyXG5cdFx0XHRcdHJldHVybiBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxyXG5cdFx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXHJcblx0XHRmb3IgKCBrZXkgaW4gb2JqICkge31cclxuXHJcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XHJcblx0fSxcclxuXHJcblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdGlmICggb2JqID09IG51bGwgKSB7XHJcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cclxuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XHJcblx0XHRcdHR5cGVvZiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcclxuXHQvLyBXb3JrYXJvdW5kcyBiYXNlZCBvbiBmaW5kaW5ncyBieSBKaW0gRHJpc2NvbGxcclxuXHQvLyBodHRwOi8vd2VibG9ncy5qYXZhLm5ldC9ibG9nL2RyaXNjb2xsL2FyY2hpdmUvMjAwOS8wOS8wOC9ldmFsLWphdmFzY3JpcHQtZ2xvYmFsLWNvbnRleHRcclxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggZGF0YSApIHtcclxuXHRcdGlmICggZGF0YSAmJiBqUXVlcnkudHJpbSggZGF0YSApICkge1xyXG5cdFx0XHQvLyBXZSB1c2UgZXhlY1NjcmlwdCBvbiBJbnRlcm5ldCBFeHBsb3JlclxyXG5cdFx0XHQvLyBXZSB1c2UgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIHNvIHRoYXQgY29udGV4dCBpcyB3aW5kb3dcclxuXHRcdFx0Ly8gcmF0aGVyIHRoYW4galF1ZXJ5IGluIEZpcmVmb3hcclxuXHRcdFx0KCB3aW5kb3cuZXhlY1NjcmlwdCB8fCBmdW5jdGlvbiggZGF0YSApIHtcclxuXHRcdFx0XHR3aW5kb3dbIFwiZXZhbFwiIF0uY2FsbCggd2luZG93LCBkYXRhICk7XHJcblx0XHRcdH0gKSggZGF0YSApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcclxuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXHJcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xyXG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XHJcblx0fSxcclxuXHJcblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0fSxcclxuXHJcblx0Ly8gYXJncyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdFx0dmFyIHZhbHVlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aCxcclxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcclxuXHJcblx0XHRpZiAoIGFyZ3MgKSB7XHJcblx0XHRcdGlmICggaXNBcnJheSApIHtcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb2JqO1xyXG5cdH0sXHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XHJcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cclxuXHRcdFx0XCJcIiA6XHJcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xyXG5cdH0sXHJcblxyXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcclxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XHJcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xyXG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxyXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XHJcblx0XHR2YXIgbGVuO1xyXG5cclxuXHRcdGlmICggYXJyICkge1xyXG5cdFx0XHRpZiAoIGluZGV4T2YgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxlbiA9IGFyci5sZW5ndGg7XHJcblx0XHRcdGkgPSBpID8gaSA8IDAgPyBNYXRoLm1heCggMCwgbGVuICsgaSApIDogaSA6IDA7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHQvLyBTa2lwIGFjY2Vzc2luZyBpbiBzcGFyc2UgYXJyYXlzXHJcblx0XHRcdFx0aWYgKCBpIGluIGFyciAmJiBhcnJbIGkgXSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAtMTtcclxuXHR9LFxyXG5cclxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XHJcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXHJcblx0XHRcdGogPSAwLFxyXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xyXG5cclxuXHRcdHdoaWxlICggaiA8IGxlbiApIHtcclxuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHQvLyBXb3JrYXJvdW5kIGNhc3Rpbmcgb2YgLmxlbmd0aCB0byBOYU4gb24gb3RoZXJ3aXNlIGFycmF5bGlrZSBvYmplY3RzIChlLmcuLCBOb2RlTGlzdHMpXHJcblx0XHRpZiAoIGxlbiAhPT0gbGVuICkge1xyXG5cdFx0XHR3aGlsZSAoIHNlY29uZFtqXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaisrIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmaXJzdC5sZW5ndGggPSBpO1xyXG5cclxuXHRcdHJldHVybiBmaXJzdDtcclxuXHR9LFxyXG5cclxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XHJcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxyXG5cdFx0XHRtYXRjaGVzID0gW10sXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXHJcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXHJcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxyXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xyXG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XHJcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbWF0Y2hlcztcclxuXHR9LFxyXG5cclxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcclxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcclxuXHRcdHZhciB2YWx1ZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxyXG5cdFx0XHRyZXQgPSBbXTtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xyXG5cdFx0aWYgKCBpc0FycmF5ICkge1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XHJcblxyXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcclxuXHRndWlkOiAxLFxyXG5cclxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcclxuXHQvLyBhcmd1bWVudHMuXHJcblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcclxuXHRcdHZhciBhcmdzLCBwcm94eSwgdG1wO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XHJcblx0XHRcdGNvbnRleHQgPSBmbjtcclxuXHRcdFx0Zm4gPSB0bXA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcclxuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTaW11bGF0ZWQgYmluZFxyXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xyXG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxyXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XHJcblxyXG5cdFx0cmV0dXJuIHByb3h5O1xyXG5cdH0sXHJcblxyXG5cdG5vdzogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gKyggbmV3IERhdGUoKSApO1xyXG5cdH0sXHJcblxyXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXHJcblx0c3VwcG9ydDogc3VwcG9ydFxyXG59KTtcclxuXHJcbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxyXG5qUXVlcnkuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3JcIi5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKGksIG5hbWUpIHtcclxuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBpc0FycmF5bGlrZSggb2JqICkge1xyXG5cdHZhciBsZW5ndGggPSBvYmoubGVuZ3RoLFxyXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcclxuXHJcblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGlmICggb2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCApIHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcclxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XHJcbn1cclxudmFyIFNpenpsZSA9XHJcbi8qIVxyXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjAtcHJlXHJcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDA4LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNC0xMi0xNlxyXG4gKi9cclxuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG52YXIgaSxcclxuXHRzdXBwb3J0LFxyXG5cdEV4cHIsXHJcblx0Z2V0VGV4dCxcclxuXHRpc1hNTCxcclxuXHR0b2tlbml6ZSxcclxuXHRjb21waWxlLFxyXG5cdHNlbGVjdCxcclxuXHRvdXRlcm1vc3RDb250ZXh0LFxyXG5cdHNvcnRJbnB1dCxcclxuXHRoYXNEdXBsaWNhdGUsXHJcblxyXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcclxuXHRzZXREb2N1bWVudCxcclxuXHRkb2N1bWVudCxcclxuXHRkb2NFbGVtLFxyXG5cdGRvY3VtZW50SXNIVE1MLFxyXG5cdHJidWdneVFTQSxcclxuXHRyYnVnZ3lNYXRjaGVzLFxyXG5cdG1hdGNoZXMsXHJcblx0Y29udGFpbnMsXHJcblxyXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcclxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxyXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcclxuXHRkaXJydW5zID0gMCxcclxuXHRkb25lID0gMCxcclxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAwO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcclxuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxyXG5cclxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXHJcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcclxuXHRhcnIgPSBbXSxcclxuXHRwb3AgPSBhcnIucG9wLFxyXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXHJcblx0cHVzaCA9IGFyci5wdXNoLFxyXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxyXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxyXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxyXG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XHJcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gLTE7XHJcblx0fSxcclxuXHJcblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXHJcblxyXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcclxuXHJcblx0Ly8gV2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXHJcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcclxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC8jY2hhcmFjdGVyc1xyXG5cdGNoYXJhY3RlckVuY29kaW5nID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcclxuXHJcblx0Ly8gTG9vc2VseSBtb2RlbGVkIG9uIENTUyBpZGVudGlmaWVyIGNoYXJhY3RlcnNcclxuXHQvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xyXG5cdC8vIFByb3BlciBzeW50YXg6IGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxyXG5cdGlkZW50aWZpZXIgPSBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3I1wiICksXHJcblxyXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xyXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcclxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxyXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XCIqXFxcXF1cIixcclxuXHJcblx0cHNldWRvcyA9IFwiOihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XFxcXCgoXCIgK1xyXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcclxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxyXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXHJcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcclxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcclxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcclxuXHRcdFwiLipcIiArXHJcblx0XHRcIilcXFxcKXwpXCIsXHJcblxyXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcclxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXHJcblxyXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cclxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxyXG5cclxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxyXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcclxuXHJcblx0bWF0Y2hFeHByID0ge1xyXG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxyXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcclxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncqXCIgKSArIFwiKVwiICksXHJcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXHJcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcclxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxyXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXHJcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcclxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcclxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXHJcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxyXG5cdH0sXHJcblxyXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxyXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXHJcblxyXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxyXG5cclxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcclxuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXHJcblxyXG5cdHJzaWJsaW5nID0gL1srfl0vLFxyXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXHJcblxyXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcclxuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxyXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcclxuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XHJcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxyXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxyXG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXHJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XHJcblx0XHRcdGVzY2FwZWQgOlxyXG5cdFx0XHRoaWdoIDwgMCA/XHJcblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxyXG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcclxuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxyXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxyXG5cdC8vIGVycm9yIGluIElFXHJcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0c2V0RG9jdW1lbnQoKTtcclxuXHR9O1xyXG5cclxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcclxudHJ5IHtcclxuXHRwdXNoLmFwcGx5KFxyXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxyXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcclxuXHQpO1xyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXHJcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxyXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XHJcbn0gY2F0Y2ggKCBlICkge1xyXG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cclxuXHJcblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxyXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcclxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcclxuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcclxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxyXG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgbWF0Y2gsIGVsZW0sIG0sIG5vZGVUeXBlLFxyXG5cdFx0Ly8gUVNBIHZhcnNcclxuXHRcdGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yO1xyXG5cclxuXHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcclxuXHR9XHJcblxyXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xyXG5cdG5vZGVUeXBlID0gY29udGV4dC5ub2RlVHlwZTtcclxuXHJcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XHJcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0fVxyXG5cclxuXHRpZiAoICFzZWVkICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cclxuXHRcdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgd2hlbiBwb3NzaWJsZSAoZS5nLiwgbm90IHVuZGVyIERvY3VtZW50RnJhZ21lbnQpXHJcblx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xyXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiI0lEXCIpXHJcblx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XHJcblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICk7XHJcblx0XHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xyXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoalF1ZXJ5ICM2OTYzKVxyXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcclxuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnRcclxuXHRcdFx0XHRcdGlmICggY29udGV4dC5vd25lckRvY3VtZW50ICYmIChlbGVtID0gY29udGV4dC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXHJcblx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcclxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cclxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIi5DTEFTU1wiKVxyXG5cdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFFTQSBwYXRoXHJcblx0XHRpZiAoIHN1cHBvcnQucXNhICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XHJcblx0XHRcdG5pZCA9IG9sZCA9IGV4cGFuZG87XHJcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xyXG5cdFx0XHRuZXdTZWxlY3RvciA9IG5vZGVUeXBlICE9PSAxICYmIHNlbGVjdG9yO1xyXG5cclxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXHJcblx0XHRcdC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3RcclxuXHRcdFx0Ly8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpXHJcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xyXG5cdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHJcblx0XHRcdFx0aWYgKCAob2xkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkgKSB7XHJcblx0XHRcdFx0XHRuaWQgPSBvbGQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCBuaWQgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcclxuXHJcblx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWQgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XHJcblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbihcIixcIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXHJcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdH0gY2F0Y2gocXNhRXJyb3IpIHtcclxuXHRcdFx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQWxsIG90aGVyc1xyXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbihzdHJpbmcsIE9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcclxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXHJcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcclxuXHR2YXIga2V5cyA9IFtdO1xyXG5cclxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcclxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXHJcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XHJcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xyXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcclxuXHR9XHJcblx0cmV0dXJuIGNhY2hlO1xyXG59XHJcblxyXG4vKipcclxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcclxuICovXHJcbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XHJcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XHJcblx0cmV0dXJuIGZuO1xyXG59XHJcblxyXG4vKipcclxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xyXG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xyXG5cdH0gY2F0Y2ggKGUpIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9IGZpbmFsbHkge1xyXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XHJcblx0XHR9XHJcblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxyXG5cdFx0ZGl2ID0gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xyXG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXHJcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xyXG5cclxuXHR3aGlsZSAoIGktLSApIHtcclxuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcclxuICogQHBhcmFtIHtFbGVtZW50fSBhXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcclxuICovXHJcbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcclxuXHR2YXIgY3VyID0gYiAmJiBhLFxyXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXHJcblx0XHRcdCggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7XHJcblxyXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xyXG5cdGlmICggZGlmZiApIHtcclxuXHRcdHJldHVybiBkaWZmO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcclxuXHRpZiAoIGN1ciApIHtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XHJcblx0XHRcdGlmICggY3VyID09PSBiICkge1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGEgPyAxIDogLTE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XHJcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XHJcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcclxuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XHJcblx0XHRcdHZhciBqLFxyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XHJcblxyXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcclxuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxyXG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcclxuICovXHJcbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xyXG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XHJcbn1cclxuXHJcbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXHJcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIERldGVjdHMgWE1MIG5vZGVzXHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcclxuICovXHJcbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxyXG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxyXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xyXG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcclxuICovXHJcbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XHJcblx0dmFyIGhhc0NvbXBhcmUsIHBhcmVudCxcclxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcclxuXHJcblx0Ly8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVyblxyXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XHJcblx0fVxyXG5cclxuXHQvLyBTZXQgb3VyIGRvY3VtZW50XHJcblx0ZG9jdW1lbnQgPSBkb2M7XHJcblx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblx0cGFyZW50ID0gZG9jLmRlZmF1bHRWaWV3O1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRT44XHJcblx0Ly8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLFxyXG5cdC8vIElFIHdpbGwgdGhyb3cgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gYWNjZXNzaW5nIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSwgc2VlIGpRdWVyeSAjMTM5MzZcclxuXHQvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkXHJcblx0aWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xyXG5cdFx0Ly8gSUUxMSBkb2VzIG5vdCBoYXZlIGF0dGFjaEV2ZW50LCBzbyBhbGwgbXVzdCBzdWZmZXJcclxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xyXG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xyXG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyogU3VwcG9ydCB0ZXN0c1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XHJcblxyXG5cdC8qIEF0dHJpYnV0ZXNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDhcclxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcclxuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcclxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcclxuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcclxuXHR9KTtcclxuXHJcblx0LyogZ2V0RWxlbWVudChzKUJ5KlxyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xyXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcclxuXHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XHJcblx0fSk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDEwXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXHJcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcclxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3RcclxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcclxuXHRcdHJldHVybiAhZG9jLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XHJcblx0fSk7XHJcblxyXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xyXG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XHJcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xyXG5cdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXHJcblx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xyXG5cdFx0XHRcdHJldHVybiBtICYmIG0ucGFyZW50Tm9kZSA/IFsgbSBdIDogW107XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xyXG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxyXG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xyXG5cclxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcclxuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Ly8gVGFnXHJcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XHJcblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcclxuXHJcblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxyXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSA6XHJcblxyXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcclxuXHRcdFx0dmFyIGVsZW0sXHJcblx0XHRcdFx0dG1wID0gW10sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xyXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcclxuXHJcblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcclxuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHRtcDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdH07XHJcblxyXG5cdC8vIENsYXNzXHJcblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcclxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3JcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcclxuXHJcblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcclxuXHRyYnVnZ3lNYXRjaGVzID0gW107XHJcblxyXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXHJcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXHJcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxyXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXHJcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XHJcblx0cmJ1Z2d5UVNBID0gW107XHJcblxyXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2MucXVlcnlTZWxlY3RvckFsbCApKSApIHtcclxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxyXG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2VcclxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XHJcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxyXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxyXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxyXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcclxuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcZl0nIG1zYWxsb3djYXB0dXJlPScnPlwiICtcclxuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XHJcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cclxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXHJcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXHJcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XHJcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC4yKywgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjcrXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXHJcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXHJcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcclxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcclxuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XHJcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcclxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXHJcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxyXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXHJcblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcclxuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcclxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXHJcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXHJcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xyXG5cclxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxyXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXHJcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XHJcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XHJcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcclxuXHJcblx0LyogQ29udGFpbnNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xyXG5cclxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XHJcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcclxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xyXG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXHJcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XHJcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxyXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cclxuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XHJcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcclxuXHRcdFx0KSk7XHJcblx0XHR9IDpcclxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHRpZiAoIGIgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9O1xyXG5cclxuXHQvKiBTb3J0aW5nXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXHJcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblxyXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxyXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xyXG5cdFx0aWYgKCBjb21wYXJlICkge1xyXG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XHJcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xyXG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXHJcblx0XHRcdDE7XHJcblxyXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XHJcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcclxuXHJcblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxyXG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xyXG5cdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cclxuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0MDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XHJcblx0fSA6XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXHJcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcclxuXHRcdFx0YXAgPSBbIGEgXSxcclxuXHRcdFx0YnAgPSBbIGIgXTtcclxuXHJcblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxyXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XHJcblx0XHRcdHJldHVybiBhID09PSBkb2MgPyAtMSA6XHJcblx0XHRcdFx0YiA9PT0gZG9jID8gMSA6XHJcblx0XHRcdFx0YXVwID8gLTEgOlxyXG5cdFx0XHRcdGJ1cCA/IDEgOlxyXG5cdFx0XHRcdHNvcnRJbnB1dCA/XHJcblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxyXG5cdFx0XHRcdDA7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcclxuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xyXG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cclxuXHRcdGN1ciA9IGE7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xyXG5cdFx0fVxyXG5cdFx0Y3VyID0gYjtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcclxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xyXG5cdFx0XHRpKys7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGkgP1xyXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3JcclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3RcclxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcclxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxyXG5cdFx0XHQwO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiBkb2M7XHJcbn07XHJcblxyXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xyXG59O1xyXG5cclxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcclxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XHJcblxyXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcclxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XHJcblxyXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcclxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XHJcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XHJcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xyXG59O1xyXG5cclxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcclxuXHR9XHJcblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XHJcbn07XHJcblxyXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxyXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXHJcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XHJcblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XHJcblx0XHRcdHVuZGVmaW5lZDtcclxuXHJcblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdHZhbCA6XHJcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cclxuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XHJcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xyXG5cdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxufTtcclxuXHJcblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XHJcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XHJcbn07XHJcblxyXG4vKipcclxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xyXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xyXG4gKi9cclxuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcclxuXHR2YXIgZWxlbSxcclxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcclxuXHRcdGogPSAwLFxyXG5cdFx0aSA9IDA7XHJcblxyXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2VcclxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xyXG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xyXG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XHJcblxyXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xyXG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XHJcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xyXG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXHJcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XHJcblx0c29ydElucHV0ID0gbnVsbDtcclxuXHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn07XHJcblxyXG4vKipcclxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcclxuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHR2YXIgbm9kZSxcclxuXHRcdHJldCA9IFwiXCIsXHJcblx0XHRpID0gMCxcclxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0aWYgKCAhbm9kZVR5cGUgKSB7XHJcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxyXG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XHJcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXHJcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XHJcblx0XHR9XHJcblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xyXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xyXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1MylcclxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXHJcblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcclxuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcclxuXHR9XHJcblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcclxuXHJcblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXHJcblx0Y2FjaGVMZW5ndGg6IDUwLFxyXG5cclxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcclxuXHJcblx0bWF0Y2g6IG1hdGNoRXhwcixcclxuXHJcblx0YXR0ckhhbmRsZToge30sXHJcblxyXG5cdGZpbmQ6IHt9LFxyXG5cclxuXHRyZWxhdGl2ZToge1xyXG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcclxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcclxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcclxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XHJcblx0fSxcclxuXHJcblx0cHJlRmlsdGVyOiB7XHJcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblxyXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxyXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XHJcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXHJcblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXHJcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxyXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXHJcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXHJcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcclxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcclxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcclxuXHRcdFx0Ki9cclxuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xyXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XHJcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcclxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXHJcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcclxuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XHJcblxyXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcclxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0dmFyIGV4Y2VzcyxcclxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcclxuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcclxuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XHJcblxyXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xyXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcclxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxyXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcclxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcclxuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcclxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXHJcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGZpbHRlcjoge1xyXG5cclxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xyXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cclxuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XHJcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcclxuXHJcblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XHJcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxyXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcclxuXHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XHJcblx0XHRcdFx0XHRmYWxzZTtcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xyXG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxyXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcclxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcclxuXHJcblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cclxuXHJcblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdH0gOlxyXG5cclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LFxyXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxyXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXHJcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcclxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcclxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxyXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXHJcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcclxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xyXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xyXG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcclxuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxyXG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHVzZUNhY2hlICYmIChjYWNoZSA9IChlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSkgJiYgY2FjaGVbMF0gPT09IGRpcnJ1bnMgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzFdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKSBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJiArK2RpZmYgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQobm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxyXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xyXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xyXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXHJcblx0XHRcdHZhciBhcmdzLFxyXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XHJcblxyXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XHJcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXHJcblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcclxuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXHJcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcclxuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGlkeCxcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGZuO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHBzZXVkb3M6IHtcclxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xyXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcclxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcclxuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXHJcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxyXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcclxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cclxuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXHJcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XHJcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXHJcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxyXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcclxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXHJcblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cclxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcclxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cclxuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xyXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXHJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxyXG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHQvLyBNaXNjZWxsYW5lb3VzXHJcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXHJcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXHJcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxyXG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XHJcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQ29udGVudHNcclxuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXHJcblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcclxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcclxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxyXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xyXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGF0dHI7XHJcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxyXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXHJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cclxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIFsgMCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDE7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KVxyXG5cdH1cclxufTtcclxuXHJcbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xyXG5cclxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcclxuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xyXG59XHJcbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcclxufVxyXG5cclxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXHJcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxyXG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcclxuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcclxuXHJcbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XHJcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXHJcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxyXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xyXG5cclxuXHRpZiAoIGNhY2hlZCApIHtcclxuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XHJcblx0fVxyXG5cclxuXHRzb0ZhciA9IHNlbGVjdG9yO1xyXG5cdGdyb3VwcyA9IFtdO1xyXG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcclxuXHJcblx0d2hpbGUgKCBzb0ZhciApIHtcclxuXHJcblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXHJcblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0aWYgKCBtYXRjaCApIHtcclxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxyXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xyXG5cdFx0XHR9XHJcblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XHJcblx0XHR9XHJcblxyXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xyXG5cclxuXHRcdC8vIENvbWJpbmF0b3JzXHJcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdHRva2Vucy5wdXNoKHtcclxuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcclxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2VcclxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaWx0ZXJzXHJcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xyXG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XHJcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XHJcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXHJcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3NcclxuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcclxuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcclxuXHRyZXR1cm4gcGFyc2VPbmx5ID9cclxuXHRcdHNvRmFyLmxlbmd0aCA6XHJcblx0XHRzb0ZhciA/XHJcblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XHJcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcclxuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcclxuXHRcdHNlbGVjdG9yID0gXCJcIjtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcclxuXHR9XHJcblx0cmV0dXJuIHNlbGVjdG9yO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xyXG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcclxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXHJcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcclxuXHJcblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSA6XHJcblxyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsXHJcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XHJcblxyXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBkaXIgY2FjaGluZ1xyXG5cdFx0XHRpZiAoIHhtbCApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XHJcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0pICYmXHJcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXHJcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xyXG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSA6XHJcblx0XHRtYXRjaGVyc1swXTtcclxufVxyXG5cclxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XHJcblx0fVxyXG5cdHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXHJcblx0XHRpID0gMCxcclxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXHJcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcclxuXHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcclxuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XHJcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xyXG5cdH1cclxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcclxuXHR9XHJcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xyXG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXHJcblx0XHRcdHByZU1hcCA9IFtdLFxyXG5cdFx0XHRwb3N0TWFwID0gW10sXHJcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxyXG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXHJcblxyXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cclxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XHJcblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxyXG5cdFx0XHRcdGVsZW1zLFxyXG5cclxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xyXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXHJcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xyXG5cclxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxyXG5cdFx0XHRcdFx0W10gOlxyXG5cclxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxyXG5cdFx0XHRcdFx0cmVzdWx0cyA6XHJcblx0XHRcdFx0bWF0Y2hlckluO1xyXG5cclxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXHJcblx0XHRpZiAoIG1hdGNoZXIgKSB7XHJcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xyXG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcclxuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xyXG5cclxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxyXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XHJcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXHJcblx0XHRcdFx0XHR0ZW1wID0gW107XHJcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXHJcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcclxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcclxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xyXG5cclxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxyXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xyXG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcclxuXHRcdFx0KTtcclxuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xyXG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXHJcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcclxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXHJcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXHJcblxyXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcclxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxyXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XHJcblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcclxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXHJcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9IF07XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xyXG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcclxuXHJcblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXHJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xyXG5cdFx0XHRcdGogPSArK2k7XHJcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcclxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxyXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcclxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcclxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcclxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxyXG5cdFx0XHRcdFx0bWF0Y2hlcixcclxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XHJcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcclxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxyXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcclxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxyXG5cdFx0XHRcdGkgPSBcIjBcIixcclxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxyXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcclxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcclxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XHJcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcclxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxyXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xyXG5cdFx0XHQvLyBLZWVwIGBpYCBhIHN0cmluZyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgc28gYG1hdGNoZWRDb3VudGAgd2lsbCBiZSBcIjAwXCIgYmVsb3dcclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXHJcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxyXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xyXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XHJcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXHJcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XHJcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3RcclxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xyXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcclxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XHJcblx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcclxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXHJcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XHJcblxyXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xyXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxyXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xyXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcclxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcclxuXHRcdH07XHJcblxyXG5cdHJldHVybiBieVNldCA/XHJcblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcclxuXHRcdHN1cGVyTWF0Y2hlcjtcclxufVxyXG5cclxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHR2YXIgaSxcclxuXHRcdHNldE1hdGNoZXJzID0gW10sXHJcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcclxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcclxuXHJcblx0aWYgKCAhY2FjaGVkICkge1xyXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XHJcblx0XHRpZiAoICFtYXRjaCApIHtcclxuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHRcdH1cclxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XHJcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXHJcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcclxuXHJcblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cclxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdH1cclxuXHRyZXR1cm4gY2FjaGVkO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcclxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xyXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxyXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcclxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XHJcbiAqL1xyXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xyXG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxyXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3RvcixcclxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xyXG5cclxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgbm8gc2VlZCBhbmQgb25seSBvbmUgZ3JvdXBcclxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcclxuXHJcblx0XHQvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRFxyXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xyXG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxyXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXHJcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcclxuXHJcblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcclxuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcclxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XHJcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xyXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XHJcblxyXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXHJcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XHJcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXHJcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXHJcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXHJcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0XHRcdFx0KSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XHJcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xyXG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcclxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXHJcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxyXG5cdFx0c2VlZCxcclxuXHRcdGNvbnRleHQsXHJcblx0XHQhZG9jdW1lbnRJc0hUTUwsXHJcblx0XHRyZXN1bHRzLFxyXG5cdFx0cnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxyXG5cdCk7XHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn07XHJcblxyXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xyXG5cclxuLy8gU29ydCBzdGFiaWxpdHlcclxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xyXG5cclxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xyXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXHJcbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XHJcbnNldERvY3VtZW50KCk7XHJcblxyXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxyXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcclxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XHJcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXHJcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XHJcbn0pO1xyXG5cclxuLy8gU3VwcG9ydDogSUU8OFxyXG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxyXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XHJcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcclxuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRpZiAoICFpc1hNTCApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU8OVxyXG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXHJcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcclxuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xyXG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU8OVxyXG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXHJcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0dmFyIHZhbDtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0XHR2YWwudmFsdWUgOlxyXG5cdFx0XHRcdG51bGw7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbnJldHVybiBTaXp6bGU7XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG5cclxuXHJcbmpRdWVyeS5maW5kID0gU2l6emxlO1xyXG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XHJcbmpRdWVyeS5leHByW1wiOlwiXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XHJcbmpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcclxualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcclxualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xyXG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XHJcblxyXG5cclxuXHJcbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xyXG5cclxudmFyIHJzaW5nbGVUYWcgPSAoL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvKTtcclxuXHJcblxyXG5cclxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcclxuXHJcbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XHJcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XHJcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XHJcblx0XHR9KTtcclxuXHJcblx0fVxyXG5cclxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xyXG5cdFx0fSk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcclxuXHRcdH1cclxuXHJcblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiAoIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBxdWFsaWZpZXIgKSA+PSAwICkgIT09IG5vdDtcclxuXHR9KTtcclxufVxyXG5cclxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xyXG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcclxuXHJcblx0aWYgKCBub3QgKSB7XHJcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cclxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XHJcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcclxuXHRcdH0pKTtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBpLFxyXG5cdFx0XHRyZXQgPSBbXSxcclxuXHRcdFx0c2VsZiA9IHRoaXMsXHJcblx0XHRcdGxlbiA9IHNlbGYubGVuZ3RoO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcclxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcclxuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9LFxyXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlKSApO1xyXG5cdH0sXHJcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSkgKTtcclxuXHR9LFxyXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gISF3aW5ub3coXHJcblx0XHRcdHRoaXMsXHJcblxyXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XHJcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cclxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XHJcblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcclxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcclxuXHRcdFx0ZmFsc2VcclxuXHRcdCkubGVuZ3RoO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcclxuXHJcblxyXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcclxudmFyIHJvb3RqUXVlcnksXHJcblxyXG5cdC8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveClcclxuXHRkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcclxuXHJcblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcclxuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXHJcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXHJcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxyXG5cclxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblx0XHR2YXIgbWF0Y2gsIGVsZW07XHJcblxyXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXHJcblx0XHRpZiAoICFzZWxlY3RvciApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGlmICggc2VsZWN0b3IuY2hhckF0KDApID09PSBcIjxcIiAmJiBzZWxlY3Rvci5jaGFyQXQoIHNlbGVjdG9yLmxlbmd0aCAtIDEgKSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XHJcblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcclxuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcclxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcclxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xyXG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WzBdIDogY29udGV4dDtcclxuXHJcblx0XHRcdFx0XHQvLyBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XHJcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxyXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcclxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcclxuXHRcdFx0XHRcdFx0dHJ1ZVxyXG5cdFx0XHRcdFx0KSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcclxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbMl0gKTtcclxuXHJcblx0XHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xyXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFIGFuZCBPcGVyYSByZXR1cm4gaXRlbXNcclxuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCAhPT0gbWF0Y2hbMl0gKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJvb3RqUXVlcnkuZmluZCggc2VsZWN0b3IgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBpbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxyXG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XHJcblx0XHRcdFx0XHRcdHRoaXNbMF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xyXG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcclxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XHJcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290alF1ZXJ5ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHJcblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxyXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcclxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xyXG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWzBdID0gc2VsZWN0b3I7XHJcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxyXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XHJcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcclxuXHRcdFx0cmV0dXJuIHR5cGVvZiByb290alF1ZXJ5LnJlYWR5ICE9PSBcInVuZGVmaW5lZFwiID9cclxuXHRcdFx0XHRyb290alF1ZXJ5LnJlYWR5KCBzZWxlY3RvciApIDpcclxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xyXG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xyXG5cdH07XHJcblxyXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXHJcbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxyXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xyXG5cclxuXHJcbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcclxuXHQvLyBtZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxyXG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XHJcblx0XHRjaGlsZHJlbjogdHJ1ZSxcclxuXHRcdGNvbnRlbnRzOiB0cnVlLFxyXG5cdFx0bmV4dDogdHJ1ZSxcclxuXHRcdHByZXY6IHRydWVcclxuXHR9O1xyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0ZGlyOiBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcclxuXHRcdHZhciBtYXRjaGVkID0gW10sXHJcblx0XHRcdGN1ciA9IGVsZW1bIGRpciBdO1xyXG5cclxuXHRcdHdoaWxlICggY3VyICYmIGN1ci5ub2RlVHlwZSAhPT0gOSAmJiAodW50aWwgPT09IHVuZGVmaW5lZCB8fCBjdXIubm9kZVR5cGUgIT09IDEgfHwgIWpRdWVyeSggY3VyICkuaXMoIHVudGlsICkpICkge1xyXG5cdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGN1ciA9IGN1cltkaXJdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1hdGNoZWQ7XHJcblx0fSxcclxuXHJcblx0c2libGluZzogZnVuY3Rpb24oIG4sIGVsZW0gKSB7XHJcblx0XHR2YXIgciA9IFtdO1xyXG5cclxuXHRcdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xyXG5cdFx0XHRcdHIucHVzaCggbiApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHI7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcclxuXHRcdHZhciBpLFxyXG5cdFx0XHR0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcclxuXHRcdFx0bGVuID0gdGFyZ2V0cy5sZW5ndGg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XHJcblx0XHR2YXIgY3VyLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRtYXRjaGVkID0gW10sXHJcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxyXG5cdFx0XHRcdDA7XHJcblxyXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzW2ldOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcclxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmIChwb3MgP1xyXG5cdFx0XHRcdFx0cG9zLmluZGV4KGN1cikgPiAtMSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXHJcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW5cclxuXHQvLyB0aGUgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHNcclxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcclxuXHRcdGlmICggIWVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAoIHRoaXNbMF0gJiYgdGhpc1swXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGluZGV4IGluIHNlbGVjdG9yXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmluQXJyYXkoIHRoaXNbMF0sIGpRdWVyeSggZWxlbSApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XHJcblx0XHRyZXR1cm4galF1ZXJ5LmluQXJyYXkoXHJcblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxyXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bMF0gOiBlbGVtLCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXHJcblx0XHRcdGpRdWVyeS51bmlxdWUoXHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxyXG5cdFx0XHQpXHJcblx0XHQpO1xyXG5cdH0sXHJcblxyXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XHJcblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoc2VsZWN0b3IpXHJcblx0XHQpO1xyXG5cdH1cclxufSk7XHJcblxyXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcclxuXHRkbyB7XHJcblx0XHRjdXIgPSBjdXJbIGRpciBdO1xyXG5cdH0gd2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSAxICk7XHJcblxyXG5cdHJldHVybiBjdXI7XHJcbn1cclxuXHJcbmpRdWVyeS5lYWNoKHtcclxuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XHJcblx0fSxcclxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xyXG5cdH0sXHJcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XHJcblx0fSxcclxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoIGVsZW0uZmlyc3RDaGlsZCApO1xyXG5cdH0sXHJcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApID9cclxuXHRcdFx0ZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgZWxlbS5jb250ZW50V2luZG93LmRvY3VtZW50IDpcclxuXHRcdFx0alF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XHJcblx0fVxyXG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xyXG5cclxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xyXG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgcmV0ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXHJcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcclxuXHRcdFx0XHRyZXQgPSBqUXVlcnkudW5pcXVlKCByZXQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcclxuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xyXG5cdFx0XHRcdHJldCA9IHJldC5yZXZlcnNlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xyXG5cdH07XHJcbn0pO1xyXG52YXIgcm5vdHdoaXRlID0gKC9cXFMrL2cpO1xyXG5cclxuXHJcblxyXG4vLyBTdHJpbmcgdG8gT2JqZWN0IG9wdGlvbnMgZm9ybWF0IGNhY2hlXHJcbnZhciBvcHRpb25zQ2FjaGUgPSB7fTtcclxuXHJcbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzIGFuZCBzdG9yZSBpbiBjYWNoZVxyXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xyXG5cdHZhciBvYmplY3QgPSBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSA9IHt9O1xyXG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XHJcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XHJcblx0fSk7XHJcblx0cmV0dXJuIG9iamVjdDtcclxufVxyXG5cclxuLypcclxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XHJcbiAqXHJcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XHJcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxyXG4gKlxyXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxyXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXHJcbiAqXHJcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XHJcbiAqXHJcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcclxuICpcclxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXHJcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcclxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXHJcbiAqXHJcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXHJcbiAqXHJcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxyXG4gKlxyXG4gKi9cclxualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cclxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXHJcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxyXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHQoIG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdIHx8IGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSApIDpcclxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XHJcblxyXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXHJcblx0XHRmaXJpbmcsXHJcblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpXHJcblx0XHRtZW1vcnksXHJcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxyXG5cdFx0ZmlyZWQsXHJcblx0XHQvLyBFbmQgb2YgdGhlIGxvb3Agd2hlbiBmaXJpbmdcclxuXHRcdGZpcmluZ0xlbmd0aCxcclxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IHJlbW92ZSBpZiBuZWVkZWQpXHJcblx0XHRmaXJpbmdJbmRleCxcclxuXHRcdC8vIEZpcnN0IGNhbGxiYWNrIHRvIGZpcmUgKHVzZWQgaW50ZXJuYWxseSBieSBhZGQgYW5kIGZpcmVXaXRoKVxyXG5cdFx0ZmlyaW5nU3RhcnQsXHJcblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxyXG5cdFx0bGlzdCA9IFtdLFxyXG5cdFx0Ly8gU3RhY2sgb2YgZmlyZSBjYWxscyBmb3IgcmVwZWF0YWJsZSBsaXN0c1xyXG5cdFx0c3RhY2sgPSAhb3B0aW9ucy5vbmNlICYmIFtdLFxyXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3NcclxuXHRcdGZpcmUgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHRcdFx0bWVtb3J5ID0gb3B0aW9ucy5tZW1vcnkgJiYgZGF0YTtcclxuXHRcdFx0ZmlyZWQgPSB0cnVlO1xyXG5cdFx0XHRmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7XHJcblx0XHRcdGZpcmluZ1N0YXJ0ID0gMDtcclxuXHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XHJcblx0XHRcdGZpcmluZyA9IHRydWU7XHJcblx0XHRcdGZvciAoIDsgbGlzdCAmJiBmaXJpbmdJbmRleCA8IGZpcmluZ0xlbmd0aDsgZmlyaW5nSW5kZXgrKyApIHtcclxuXHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIGRhdGFbIDAgXSwgZGF0YVsgMSBdICkgPT09IGZhbHNlICYmIG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XHJcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTsgLy8gVG8gcHJldmVudCBmdXJ0aGVyIGNhbGxzIHVzaW5nIGFkZFxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGZpcmluZyA9IGZhbHNlO1xyXG5cdFx0XHRpZiAoIGxpc3QgKSB7XHJcblx0XHRcdFx0aWYgKCBzdGFjayApIHtcclxuXHRcdFx0XHRcdGlmICggc3RhY2subGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRmaXJlKCBzdGFjay5zaGlmdCgpICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxyXG5cdFx0c2VsZiA9IHtcclxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxyXG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHRcdFx0XHRcdC8vIEZpcnN0LCB3ZSBzYXZlIHRoZSBjdXJyZW50IGxlbmd0aFxyXG5cdFx0XHRcdFx0dmFyIHN0YXJ0ID0gbGlzdC5sZW5ndGg7XHJcblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKCBhcmdzICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBhcmcgKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcclxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pKCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdC8vIERvIHdlIG5lZWQgdG8gYWRkIHRoZSBjYWxsYmFja3MgdG8gdGhlXHJcblx0XHRcdFx0XHQvLyBjdXJyZW50IGZpcmluZyBiYXRjaD9cclxuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdC8vIFdpdGggbWVtb3J5LCBpZiB3ZSdyZSBub3QgZmlyaW5nIHRoZW5cclxuXHRcdFx0XHRcdC8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXlcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcclxuXHRcdFx0XHRcdFx0ZmlyaW5nU3RhcnQgPSBzdGFydDtcclxuXHRcdFx0XHRcdFx0ZmlyZSggbWVtb3J5ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcclxuXHRcdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nTGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGgtLTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXHJcblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxyXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdFx0XHRyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDogISEoIGxpc3QgJiYgbGlzdC5sZW5ndGggKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdGZpcmluZ0xlbmd0aCA9IDA7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIEhhdmUgdGhlIGxpc3QgZG8gbm90aGluZyBhbnltb3JlXHJcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gSXMgaXQgZGlzYWJsZWQ/XHJcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIExvY2sgdGhlIGxpc3QgaW4gaXRzIGN1cnJlbnQgc3RhdGVcclxuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c3RhY2sgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBJcyBpdCBsb2NrZWQ/XHJcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICFzdGFjaztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xyXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XHJcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcclxuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XHJcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0c3RhY2sucHVzaCggYXJncyApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0ZmlyZSggYXJncyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcclxuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxyXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdHJldHVybiBzZWxmO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cclxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XHJcblx0XHR2YXIgdHVwbGVzID0gW1xyXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxyXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVzb2x2ZWRcIiBdLFxyXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZWplY3RlZFwiIF0sXHJcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIikgXVxyXG5cdFx0XHRdLFxyXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxyXG5cdFx0XHRwcm9taXNlID0ge1xyXG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xyXG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcclxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XHJcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXHJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0IClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcywgZm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XHJcblx0XHRcdFx0XHR9KS5wcm9taXNlKCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXHJcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxyXG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xyXG5cclxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcclxuXHJcblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXHJcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcclxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XHJcblxyXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxyXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsxXSBdID0gbGlzdC5hZGQ7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcclxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcclxuXHRcdFx0XHRsaXN0LmFkZChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cclxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XHJcblxyXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcclxuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxyXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xyXG5cclxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcclxuXHRcdGlmICggZnVuYyApIHtcclxuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGwgZG9uZSFcclxuXHRcdHJldHVybiBkZWZlcnJlZDtcclxuXHR9LFxyXG5cclxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxyXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcclxuXHJcblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcclxuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcclxuXHJcblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxyXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXHJcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XHJcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcclxuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoLS1yZW1haW5pbmcpICkge1xyXG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xyXG5cclxuXHRcdC8vIGFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcclxuXHRcdGlmICggbGVuZ3RoID4gMSApIHtcclxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcclxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XHJcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSgpXHJcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXHJcblx0XHRcdFx0XHRcdC5mYWlsKCBkZWZlcnJlZC5yZWplY3QgKVxyXG5cdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xyXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxyXG52YXIgcmVhZHlMaXN0O1xyXG5cclxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xyXG5cdC8vIEFkZCB0aGUgY2FsbGJhY2tcclxuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cclxuXHRpc1JlYWR5OiBmYWxzZSxcclxuXHJcblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxyXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXHJcblx0cmVhZHlXYWl0OiAxLFxyXG5cclxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcclxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xyXG5cdFx0aWYgKCBob2xkICkge1xyXG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XHJcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xyXG5cclxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcclxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIGJvZHkgZXhpc3RzLCBhdCBsZWFzdCwgaW4gY2FzZSBJRSBnZXRzIGEgbGl0dGxlIG92ZXJ6ZWFsb3VzICh0aWNrZXQgIzU0NDMpLlxyXG5cdFx0aWYgKCAhZG9jdW1lbnQuYm9keSApIHtcclxuXHRcdFx0cmV0dXJuIHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxyXG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xyXG5cclxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXHJcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcclxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcclxuXHJcblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcclxuXHRcdGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xyXG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xyXG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIENsZWFuLXVwIG1ldGhvZCBmb3IgZG9tIHJlYWR5IGV2ZW50c1xyXG4gKi9cclxuZnVuY3Rpb24gZGV0YWNoKCkge1xyXG5cdGlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHRcdGRvY3VtZW50LmRldGFjaEV2ZW50KCBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLCBjb21wbGV0ZWQgKTtcclxuXHRcdHdpbmRvdy5kZXRhY2hFdmVudCggXCJvbmxvYWRcIiwgY29tcGxldGVkICk7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcclxuICovXHJcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcclxuXHQvLyByZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgaXMgZ29vZCBlbm91Z2ggZm9yIHVzIHRvIGNhbGwgdGhlIGRvbSByZWFkeSBpbiBvbGRJRVxyXG5cdGlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciB8fCBldmVudC50eXBlID09PSBcImxvYWRcIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XHJcblx0XHRkZXRhY2goKTtcclxuXHRcdGpRdWVyeS5yZWFkeSgpO1xyXG5cdH1cclxufVxyXG5cclxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cdGlmICggIXJlYWR5TGlzdCApIHtcclxuXHJcblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcclxuXHJcblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cclxuXHRcdC8vIHdlIG9uY2UgdHJpZWQgdG8gdXNlIHJlYWR5U3RhdGUgXCJpbnRlcmFjdGl2ZVwiIGhlcmUsIGJ1dCBpdCBjYXVzZWQgaXNzdWVzIGxpa2UgdGhlIG9uZVxyXG5cdFx0Ly8gZGlzY292ZXJlZCBieSBDaHJpc1MgaGVyZTogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyODIjY29tbWVudDoxNVxyXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XHJcblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxyXG5cdFx0XHRzZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcclxuXHJcblx0XHQvLyBTdGFuZGFyZHMtYmFzZWQgYnJvd3NlcnMgc3VwcG9ydCBET01Db250ZW50TG9hZGVkXHJcblx0XHR9IGVsc2UgaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXHJcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XHJcblxyXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcclxuXHJcblx0XHQvLyBJZiBJRSBldmVudCBtb2RlbCBpcyB1c2VkXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBFbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsIG1heWJlIGxhdGUgYnV0IHNhZmUgYWxzbyBmb3IgaWZyYW1lc1xyXG5cdFx0XHRkb2N1bWVudC5hdHRhY2hFdmVudCggXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgY29tcGxldGVkICk7XHJcblxyXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xyXG5cdFx0XHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib25sb2FkXCIsIGNvbXBsZXRlZCApO1xyXG5cclxuXHRcdFx0Ly8gSWYgSUUgYW5kIG5vdCBhIGZyYW1lXHJcblx0XHRcdC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHlcclxuXHRcdFx0dmFyIHRvcCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHR0b3AgPSB3aW5kb3cuZnJhbWVFbGVtZW50ID09IG51bGwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cdFx0XHR9IGNhdGNoKGUpIHt9XHJcblxyXG5cdFx0XHRpZiAoIHRvcCAmJiB0b3AuZG9TY3JvbGwgKSB7XHJcblx0XHRcdFx0KGZ1bmN0aW9uIGRvU2Nyb2xsQ2hlY2soKSB7XHJcblx0XHRcdFx0XHRpZiAoICFqUXVlcnkuaXNSZWFkeSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmlcclxuXHRcdFx0XHRcdFx0XHQvLyBodHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vSUVDb250ZW50TG9hZGVkL1xyXG5cdFx0XHRcdFx0XHRcdHRvcC5kb1Njcm9sbChcImxlZnRcIik7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBzZXRUaW1lb3V0KCBkb1Njcm9sbENoZWNrLCA1MCApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBkZXRhY2ggYWxsIGRvbSByZWFkeSBldmVudHNcclxuXHRcdFx0XHRcdFx0ZGV0YWNoKCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnNcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LnJlYWR5KCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xyXG59O1xyXG5cclxuXHJcbnZhciBzdHJ1bmRlZmluZWQgPSB0eXBlb2YgdW5kZWZpbmVkO1xyXG5cclxuXHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIEl0ZXJhdGlvbiBvdmVyIG9iamVjdCdzIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlZm9yZSBpdHMgb3duXHJcbnZhciBpO1xyXG5mb3IgKCBpIGluIGpRdWVyeSggc3VwcG9ydCApICkge1xyXG5cdGJyZWFrO1xyXG59XHJcbnN1cHBvcnQub3duTGFzdCA9IGkgIT09IFwiMFwiO1xyXG5cclxuLy8gTm90ZTogbW9zdCBzdXBwb3J0IHRlc3RzIGFyZSBkZWZpbmVkIGluIHRoZWlyIHJlc3BlY3RpdmUgbW9kdWxlcy5cclxuLy8gZmFsc2UgdW50aWwgdGhlIHRlc3QgaXMgcnVuXHJcbnN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCA9IGZhbHNlO1xyXG5cclxuLy8gRXhlY3V0ZSBBU0FQIGluIGNhc2Ugd2UgbmVlZCB0byBzZXQgYm9keS5zdHlsZS56b29tXHJcbmpRdWVyeShmdW5jdGlvbigpIHtcclxuXHQvLyBNaW5pZmllZDogdmFyIGEsYixjLGRcclxuXHR2YXIgdmFsLCBkaXYsIGJvZHksIGNvbnRhaW5lcjtcclxuXHJcblx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XHJcblx0aWYgKCAhYm9keSB8fCAhYm9keS5zdHlsZSApIHtcclxuXHRcdC8vIFJldHVybiBmb3IgZnJhbWVzZXQgZG9jcyB0aGF0IGRvbid0IGhhdmUgYSBib2R5XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHQvLyBTZXR1cFxyXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCI7XHJcblx0Ym9keS5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cclxuXHRpZiAoIHR5cGVvZiBkaXYuc3R5bGUuem9vbSAhPT0gc3RydW5kZWZpbmVkICkge1xyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdFx0Ly8gQ2hlY2sgaWYgbmF0aXZlbHkgYmxvY2stbGV2ZWwgZWxlbWVudHMgYWN0IGxpa2UgaW5saW5lLWJsb2NrXHJcblx0XHQvLyBlbGVtZW50cyB3aGVuIHNldHRpbmcgdGhlaXIgZGlzcGxheSB0byAnaW5saW5lJyBhbmQgZ2l2aW5nXHJcblx0XHQvLyB0aGVtIGxheW91dFxyXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPSBcImRpc3BsYXk6aW5saW5lO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MXB4O3dpZHRoOjFweDt6b29tOjFcIjtcclxuXHJcblx0XHRzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgPSB2YWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDM7XHJcblx0XHRpZiAoIHZhbCApIHtcclxuXHRcdFx0Ly8gUHJldmVudCBJRSA2IGZyb20gYWZmZWN0aW5nIGxheW91dCBmb3IgcG9zaXRpb25lZCBlbGVtZW50cyAjMTEwNDhcclxuXHRcdFx0Ly8gUHJldmVudCBJRSBmcm9tIHNocmlua2luZyB0aGUgYm9keSBpbiBJRSA3IG1vZGUgIzEyODY5XHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcclxuXHRcdFx0Ym9keS5zdHlsZS56b29tID0gMTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cclxuXHQvLyBFeGVjdXRlIHRoZSB0ZXN0IG9ubHkgaWYgbm90IGFscmVhZHkgZXhlY3V0ZWQgaW4gYW5vdGhlciBtb2R1bGUuXHJcblx0aWYgKHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9PSBudWxsKSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSB0cnVlO1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0ZGVsZXRlIGRpdi50ZXN0O1xyXG5cdFx0fSBjYXRjaCggZSApIHtcclxuXHRcdFx0c3VwcG9ydC5kZWxldGVFeHBhbmRvID0gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLlxyXG5cdGRpdiA9IG51bGw7XHJcbn0pKCk7XHJcblxyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxyXG4gKi9cclxualF1ZXJ5LmFjY2VwdERhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHR2YXIgbm9EYXRhID0galF1ZXJ5Lm5vRGF0YVsgKGVsZW0ubm9kZU5hbWUgKyBcIiBcIikudG9Mb3dlckNhc2UoKSBdLFxyXG5cdFx0bm9kZVR5cGUgPSArZWxlbS5ub2RlVHlwZSB8fCAxO1xyXG5cclxuXHQvLyBEbyBub3Qgc2V0IGRhdGEgb24gbm9uLWVsZW1lbnQgRE9NIG5vZGVzIGJlY2F1c2UgaXQgd2lsbCBub3QgYmUgY2xlYXJlZCAoIzgzMzUpLlxyXG5cdHJldHVybiBub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSA/XHJcblx0XHRmYWxzZSA6XHJcblxyXG5cdFx0Ly8gTm9kZXMgYWNjZXB0IGRhdGEgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQ7IHJlamVjdGlvbiBjYW4gYmUgY29uZGl0aW9uYWxcclxuXHRcdCFub0RhdGEgfHwgbm9EYXRhICE9PSB0cnVlICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NpZFwiKSA9PT0gbm9EYXRhO1xyXG59O1xyXG5cclxuXHJcbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXHJcblx0cm11bHRpRGFzaCA9IC8oW0EtWl0pL2c7XHJcblxyXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xyXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcclxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcclxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cclxuXHRcdHZhciBuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQxXCIgKS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XHJcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XHJcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxyXG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcclxuXHRcdFx0XHRcdCtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcclxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxyXG5cdFx0XHRcdFx0ZGF0YTtcclxuXHRcdFx0fSBjYXRjaCggZSApIHt9XHJcblxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcclxuXHRcdFx0alF1ZXJ5LmRhdGEoIGVsZW0sIGtleSwgZGF0YSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGF0YTtcclxufVxyXG5cclxuLy8gY2hlY2tzIGEgY2FjaGUgb2JqZWN0IGZvciBlbXB0aW5lc3NcclxuZnVuY3Rpb24gaXNFbXB0eURhdGFPYmplY3QoIG9iaiApIHtcclxuXHR2YXIgbmFtZTtcclxuXHRmb3IgKCBuYW1lIGluIG9iaiApIHtcclxuXHJcblx0XHQvLyBpZiB0aGUgcHVibGljIGRhdGEgb2JqZWN0IGlzIGVtcHR5LCB0aGUgcHJpdmF0ZSBpcyBzdGlsbCBlbXB0eVxyXG5cdFx0aWYgKCBuYW1lID09PSBcImRhdGFcIiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb2JqW25hbWVdICkgKSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBuYW1lICE9PSBcInRvSlNPTlwiICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW50ZXJuYWxEYXRhKCBlbGVtLCBuYW1lLCBkYXRhLCBwdnQgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XHJcblx0aWYgKCAhalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciByZXQsIHRoaXNDYWNoZSxcclxuXHRcdGludGVybmFsS2V5ID0galF1ZXJ5LmV4cGFuZG8sXHJcblxyXG5cdFx0Ly8gV2UgaGF2ZSB0byBoYW5kbGUgRE9NIG5vZGVzIGFuZCBKUyBvYmplY3RzIGRpZmZlcmVudGx5IGJlY2F1c2UgSUU2LTdcclxuXHRcdC8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5XHJcblx0XHRpc05vZGUgPSBlbGVtLm5vZGVUeXBlLFxyXG5cclxuXHRcdC8vIE9ubHkgRE9NIG5vZGVzIG5lZWQgdGhlIGdsb2JhbCBqUXVlcnkgY2FjaGU7IEpTIG9iamVjdCBkYXRhIGlzXHJcblx0XHQvLyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUgb2JqZWN0IHNvIEdDIGNhbiBvY2N1ciBhdXRvbWF0aWNhbGx5XHJcblx0XHRjYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sXHJcblxyXG5cdFx0Ly8gT25seSBkZWZpbmluZyBhbiBJRCBmb3IgSlMgb2JqZWN0cyBpZiBpdHMgY2FjaGUgYWxyZWFkeSBleGlzdHMgYWxsb3dzXHJcblx0XHQvLyB0aGUgY29kZSB0byBzaG9ydGN1dCBvbiB0aGUgc2FtZSBwYXRoIGFzIGEgRE9NIG5vZGUgd2l0aCBubyBjYWNoZVxyXG5cdFx0aWQgPSBpc05vZGUgPyBlbGVtWyBpbnRlcm5hbEtleSBdIDogZWxlbVsgaW50ZXJuYWxLZXkgXSAmJiBpbnRlcm5hbEtleTtcclxuXHJcblx0Ly8gQXZvaWQgZG9pbmcgYW55IG1vcmUgd29yayB0aGFuIHdlIG5lZWQgdG8gd2hlbiB0cnlpbmcgdG8gZ2V0IGRhdGEgb24gYW5cclxuXHQvLyBvYmplY3QgdGhhdCBoYXMgbm8gZGF0YSBhdCBhbGxcclxuXHRpZiAoICghaWQgfHwgIWNhY2hlW2lkXSB8fCAoIXB2dCAmJiAhY2FjaGVbaWRdLmRhdGEpKSAmJiBkYXRhID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRpZiAoICFpZCApIHtcclxuXHRcdC8vIE9ubHkgRE9NIG5vZGVzIG5lZWQgYSBuZXcgdW5pcXVlIElEIGZvciBlYWNoIGVsZW1lbnQgc2luY2UgdGhlaXIgZGF0YVxyXG5cdFx0Ly8gZW5kcyB1cCBpbiB0aGUgZ2xvYmFsIGNhY2hlXHJcblx0XHRpZiAoIGlzTm9kZSApIHtcclxuXHRcdFx0aWQgPSBlbGVtWyBpbnRlcm5hbEtleSBdID0gZGVsZXRlZElkcy5wb3AoKSB8fCBqUXVlcnkuZ3VpZCsrO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aWQgPSBpbnRlcm5hbEtleTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmICggIWNhY2hlWyBpZCBdICkge1xyXG5cdFx0Ly8gQXZvaWQgZXhwb3NpbmcgalF1ZXJ5IG1ldGFkYXRhIG9uIHBsYWluIEpTIG9iamVjdHMgd2hlbiB0aGUgb2JqZWN0XHJcblx0XHQvLyBpcyBzZXJpYWxpemVkIHVzaW5nIEpTT04uc3RyaW5naWZ5XHJcblx0XHRjYWNoZVsgaWQgXSA9IGlzTm9kZSA/IHt9IDogeyB0b0pTT046IGpRdWVyeS5ub29wIH07XHJcblx0fVxyXG5cclxuXHQvLyBBbiBvYmplY3QgY2FuIGJlIHBhc3NlZCB0byBqUXVlcnkuZGF0YSBpbnN0ZWFkIG9mIGEga2V5L3ZhbHVlIHBhaXI7IHRoaXMgZ2V0c1xyXG5cdC8vIHNoYWxsb3cgY29waWVkIG92ZXIgb250byB0aGUgZXhpc3RpbmcgY2FjaGVcclxuXHRpZiAoIHR5cGVvZiBuYW1lID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblx0XHRpZiAoIHB2dCApIHtcclxuXHRcdFx0Y2FjaGVbIGlkIF0gPSBqUXVlcnkuZXh0ZW5kKCBjYWNoZVsgaWQgXSwgbmFtZSApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHRoaXNDYWNoZSA9IGNhY2hlWyBpZCBdO1xyXG5cclxuXHQvLyBqUXVlcnkgZGF0YSgpIGlzIHN0b3JlZCBpbiBhIHNlcGFyYXRlIG9iamVjdCBpbnNpZGUgdGhlIG9iamVjdCdzIGludGVybmFsIGRhdGFcclxuXHQvLyBjYWNoZSBpbiBvcmRlciB0byBhdm9pZCBrZXkgY29sbGlzaW9ucyBiZXR3ZWVuIGludGVybmFsIGRhdGEgYW5kIHVzZXItZGVmaW5lZFxyXG5cdC8vIGRhdGEuXHJcblx0aWYgKCAhcHZ0ICkge1xyXG5cdFx0aWYgKCAhdGhpc0NhY2hlLmRhdGEgKSB7XHJcblx0XHRcdHRoaXNDYWNoZS5kYXRhID0ge307XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpc0NhY2hlID0gdGhpc0NhY2hlLmRhdGE7XHJcblx0fVxyXG5cclxuXHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdHRoaXNDYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApIF0gPSBkYXRhO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgZm9yIGJvdGggY29udmVydGVkLXRvLWNhbWVsIGFuZCBub24tY29udmVydGVkIGRhdGEgcHJvcGVydHkgbmFtZXNcclxuXHQvLyBJZiBhIGRhdGEgcHJvcGVydHkgd2FzIHNwZWNpZmllZFxyXG5cdGlmICggdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgKSB7XHJcblxyXG5cdFx0Ly8gRmlyc3QgVHJ5IHRvIGZpbmQgYXMtaXMgcHJvcGVydHkgZGF0YVxyXG5cdFx0cmV0ID0gdGhpc0NhY2hlWyBuYW1lIF07XHJcblxyXG5cdFx0Ly8gVGVzdCBmb3IgbnVsbHx1bmRlZmluZWQgcHJvcGVydHkgZGF0YVxyXG5cdFx0aWYgKCByZXQgPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdC8vIFRyeSB0byBmaW5kIHRoZSBjYW1lbENhc2VkIHByb3BlcnR5XHJcblx0XHRcdHJldCA9IHRoaXNDYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApIF07XHJcblx0XHR9XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldCA9IHRoaXNDYWNoZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludGVybmFsUmVtb3ZlRGF0YSggZWxlbSwgbmFtZSwgcHZ0ICkge1xyXG5cdGlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHR2YXIgdGhpc0NhY2hlLCBpLFxyXG5cdFx0aXNOb2RlID0gZWxlbS5ub2RlVHlwZSxcclxuXHJcblx0XHQvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb25cclxuXHRcdGNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSxcclxuXHRcdGlkID0gaXNOb2RlID8gZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXSA6IGpRdWVyeS5leHBhbmRvO1xyXG5cclxuXHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IG5vIGNhY2hlIGVudHJ5IGZvciB0aGlzIG9iamVjdCwgdGhlcmUgaXMgbm9cclxuXHQvLyBwdXJwb3NlIGluIGNvbnRpbnVpbmdcclxuXHRpZiAoICFjYWNoZVsgaWQgXSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGlmICggbmFtZSApIHtcclxuXHJcblx0XHR0aGlzQ2FjaGUgPSBwdnQgPyBjYWNoZVsgaWQgXSA6IGNhY2hlWyBpZCBdLmRhdGE7XHJcblxyXG5cdFx0aWYgKCB0aGlzQ2FjaGUgKSB7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgbmFtZXMgZm9yIGRhdGEga2V5c1xyXG5cdFx0XHRpZiAoICFqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xyXG5cclxuXHRcdFx0XHQvLyB0cnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxyXG5cdFx0XHRcdGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRuYW1lID0gWyBuYW1lIF07XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyBzcGxpdCB0aGUgY2FtZWwgY2FzZWQgdmVyc2lvbiBieSBzcGFjZXMgdW5sZXNzIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHNcclxuXHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XHJcblx0XHRcdFx0XHRpZiAoIG5hbWUgaW4gdGhpc0NhY2hlICkge1xyXG5cdFx0XHRcdFx0XHRuYW1lID0gWyBuYW1lIF07XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRuYW1lID0gbmFtZS5zcGxpdChcIiBcIik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cclxuXHRcdFx0XHQvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoXCJrZXlcIiwgXCJ2YWxcIikgc2lnbmF0dXJlLFxyXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxyXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXHJcblx0XHRcdFx0Ly8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NlxyXG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxyXG5cdFx0XHRcdG5hbWUgPSBuYW1lLmNvbmNhdCggalF1ZXJ5Lm1hcCggbmFtZSwgalF1ZXJ5LmNhbWVsQ2FzZSApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0ZGVsZXRlIHRoaXNDYWNoZVsgbmFtZVtpXSBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiB0aGVyZSBpcyBubyBkYXRhIGxlZnQgaW4gdGhlIGNhY2hlLCB3ZSB3YW50IHRvIGNvbnRpbnVlXHJcblx0XHRcdC8vIGFuZCBsZXQgdGhlIGNhY2hlIG9iamVjdCBpdHNlbGYgZ2V0IGRlc3Ryb3llZFxyXG5cdFx0XHRpZiAoIHB2dCA/ICFpc0VtcHR5RGF0YU9iamVjdCh0aGlzQ2FjaGUpIDogIWpRdWVyeS5pc0VtcHR5T2JqZWN0KHRoaXNDYWNoZSkgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb25cclxuXHRpZiAoICFwdnQgKSB7XHJcblx0XHRkZWxldGUgY2FjaGVbIGlkIF0uZGF0YTtcclxuXHJcblx0XHQvLyBEb24ndCBkZXN0cm95IHRoZSBwYXJlbnQgY2FjaGUgdW5sZXNzIHRoZSBpbnRlcm5hbCBkYXRhIG9iamVjdFxyXG5cdFx0Ly8gaGFkIGJlZW4gdGhlIG9ubHkgdGhpbmcgbGVmdCBpbiBpdFxyXG5cdFx0aWYgKCAhaXNFbXB0eURhdGFPYmplY3QoIGNhY2hlWyBpZCBdICkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIERlc3Ryb3kgdGhlIGNhY2hlXHJcblx0aWYgKCBpc05vZGUgKSB7XHJcblx0XHRqUXVlcnkuY2xlYW5EYXRhKCBbIGVsZW0gXSwgdHJ1ZSApO1xyXG5cclxuXHQvLyBVc2UgZGVsZXRlIHdoZW4gc3VwcG9ydGVkIGZvciBleHBhbmRvcyBvciBgY2FjaGVgIGlzIG5vdCBhIHdpbmRvdyBwZXIgaXNXaW5kb3cgKCMxMDA4MClcclxuXHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xyXG5cdH0gZWxzZSBpZiAoIHN1cHBvcnQuZGVsZXRlRXhwYW5kbyB8fCBjYWNoZSAhPSBjYWNoZS53aW5kb3cgKSB7XHJcblx0XHQvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovXHJcblx0XHRkZWxldGUgY2FjaGVbIGlkIF07XHJcblxyXG5cdC8vIFdoZW4gYWxsIGVsc2UgZmFpbHMsIG51bGxcclxuXHR9IGVsc2Uge1xyXG5cdFx0Y2FjaGVbIGlkIF0gPSBudWxsO1xyXG5cdH1cclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0Y2FjaGU6IHt9LFxyXG5cclxuXHQvLyBUaGUgZm9sbG93aW5nIGVsZW1lbnRzIChzcGFjZS1zdWZmaXhlZCB0byBhdm9pZCBPYmplY3QucHJvdG90eXBlIGNvbGxpc2lvbnMpXHJcblx0Ly8gdGhyb3cgdW5jYXRjaGFibGUgZXhjZXB0aW9ucyBpZiB5b3UgYXR0ZW1wdCB0byBzZXQgZXhwYW5kbyBwcm9wZXJ0aWVzXHJcblx0bm9EYXRhOiB7XHJcblx0XHRcImFwcGxldCBcIjogdHJ1ZSxcclxuXHRcdFwiZW1iZWQgXCI6IHRydWUsXHJcblx0XHQvLyAuLi5idXQgRmxhc2ggb2JqZWN0cyAod2hpY2ggaGF2ZSB0aGlzIGNsYXNzaWQpICpjYW4qIGhhbmRsZSBleHBhbmRvc1xyXG5cdFx0XCJvYmplY3QgXCI6IFwiY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwXCJcclxuXHR9LFxyXG5cclxuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdGVsZW0gPSBlbGVtLm5vZGVUeXBlID8galF1ZXJ5LmNhY2hlWyBlbGVtW2pRdWVyeS5leHBhbmRvXSBdIDogZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXTtcclxuXHRcdHJldHVybiAhIWVsZW0gJiYgIWlzRW1wdHlEYXRhT2JqZWN0KCBlbGVtICk7XHJcblx0fSxcclxuXHJcblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XHJcblx0XHRyZXR1cm4gaW50ZXJuYWxEYXRhKCBlbGVtLCBuYW1lLCBkYXRhICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lICk7XHJcblx0fSxcclxuXHJcblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEsIHRydWUgKTtcclxuXHR9LFxyXG5cclxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCB0cnVlICk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXHJcblx0XHRcdGVsZW0gPSB0aGlzWzBdLFxyXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdC8vIFNwZWNpYWwgZXhwZWN0aW9ucyBvZiAuZGF0YSBiYXNpY2FsbHkgdGh3YXJ0IGpRdWVyeS5hY2Nlc3MsXHJcblx0XHQvLyBzbyBpbXBsZW1lbnQgdGhlIHJlbGV2YW50IGJlaGF2aW9yIG91cnNlbHZlc1xyXG5cclxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRkYXRhID0galF1ZXJ5LmRhdGEoIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sIFwicGFyc2VkQXR0cnNcIiApICkge1xyXG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcclxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXHJcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XHJcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwicGFyc2VkQXR0cnNcIiwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcclxuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5ICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/XHJcblxyXG5cdFx0XHQvLyBTZXRzIG9uZSB2YWx1ZVxyXG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRhdGEoIHRoaXMsIGtleSwgdmFsdWUgKTtcclxuXHRcdFx0fSkgOlxyXG5cclxuXHRcdFx0Ly8gR2V0cyBvbmUgdmFsdWVcclxuXHRcdFx0Ly8gVHJ5IHRvIGZldGNoIGFueSBpbnRlcm5hbGx5IHN0b3JlZCBkYXRhIGZpcnN0XHJcblx0XHRcdGVsZW0gPyBkYXRhQXR0ciggZWxlbSwga2V5LCBqUXVlcnkuZGF0YSggZWxlbSwga2V5ICkgKSA6IHVuZGVmaW5lZDtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMsIGtleSApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgcXVldWU7XHJcblxyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xyXG5cdFx0XHRxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxyXG5cdFx0XHRpZiAoIGRhdGEgKSB7XHJcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoZGF0YSkgKSB7XHJcblx0XHRcdFx0XHRxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxyXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcclxuXHRcdFx0c3RhcnRMZW5ndGgtLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGZuICkge1xyXG5cclxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xyXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xyXG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGNsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cclxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBub3QgaW50ZW5kZWQgZm9yIHB1YmxpYyBjb25zdW1wdGlvbiAtIGdlbmVyYXRlcyBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm5zIHRoZSBjdXJyZW50IG9uZVxyXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XHJcblx0XHRyZXR1cm4galF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXkgKSB8fCBqUXVlcnkuX2RhdGEoIGVsZW0sIGtleSwge1xyXG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIHR5cGUgKyBcInF1ZXVlXCIgKTtcclxuXHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIGtleSApO1xyXG5cdFx0XHR9KVxyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBzZXR0ZXIgPSAyO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGRhdGEgPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gXCJmeFwiO1xyXG5cdFx0XHRzZXR0ZXItLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0dGhpcyA6XHJcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcclxuXHJcblx0XHRcdFx0Ly8gZW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcclxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbMF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdH0sXHJcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcclxuXHR9LFxyXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcclxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcclxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xyXG5cdFx0dmFyIHRtcCxcclxuXHRcdFx0Y291bnQgPSAxLFxyXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXHJcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xyXG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0b2JqID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG1wID0galF1ZXJ5Ll9kYXRhKCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcclxuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xyXG5cdFx0XHRcdGNvdW50Kys7XHJcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXNvbHZlKCk7XHJcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XHJcblx0fVxyXG59KTtcclxudmFyIHBudW0gPSAoL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8pLnNvdXJjZTtcclxuXHJcbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcclxuXHJcbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcclxuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XHJcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcclxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8ICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cdH07XHJcblxyXG5cclxuXHJcbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxyXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cclxudmFyIGFjY2VzcyA9IGpRdWVyeS5hY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xyXG5cclxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXHJcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XHJcblx0XHRcdGpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XHJcblx0XHR9XHJcblxyXG5cdC8vIFNldHMgb25lIHZhbHVlXHJcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdGNoYWluYWJsZSA9IHRydWU7XHJcblxyXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJhdyA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBidWxrICkge1xyXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcclxuXHRcdFx0aWYgKCByYXcgKSB7XHJcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XHJcblx0XHRcdFx0Zm4gPSBudWxsO1xyXG5cclxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGJ1bGsgPSBmbjtcclxuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZm4gKSB7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdGZuKCBlbGVtc1tpXSwga2V5LCByYXcgPyB2YWx1ZSA6IHZhbHVlLmNhbGwoIGVsZW1zW2ldLCBpLCBmbiggZWxlbXNbaV0sIGtleSApICkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNoYWluYWJsZSA/XHJcblx0XHRlbGVtcyA6XHJcblxyXG5cdFx0Ly8gR2V0c1xyXG5cdFx0YnVsayA/XHJcblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxyXG5cdFx0XHRsZW5ndGggPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7XHJcbn07XHJcbnZhciByY2hlY2thYmxlVHlwZSA9ICgvXig/OmNoZWNrYm94fHJhZGlvKSQvaSk7XHJcblxyXG5cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHQvLyBNaW5pZmllZDogdmFyIGEsYixjXHJcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXHJcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXHJcblx0XHRmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcblx0Ly8gU2V0dXBcclxuXHRkaXYuaW5uZXJIVE1MID0gXCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIjtcclxuXHJcblx0Ly8gSUUgc3RyaXBzIGxlYWRpbmcgd2hpdGVzcGFjZSB3aGVuIC5pbm5lckhUTUwgaXMgdXNlZFxyXG5cdHN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UgPSBkaXYuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMztcclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgdGJvZHkgZWxlbWVudHMgYXJlbid0IGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWRcclxuXHQvLyBJRSB3aWxsIGluc2VydCB0aGVtIGludG8gZW1wdHkgdGFibGVzXHJcblx0c3VwcG9ydC50Ym9keSA9ICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApLmxlbmd0aDtcclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgbGluayBlbGVtZW50cyBnZXQgc2VyaWFsaXplZCBjb3JyZWN0bHkgYnkgaW5uZXJIVE1MXHJcblx0Ly8gVGhpcyByZXF1aXJlcyBhIHdyYXBwZXIgZWxlbWVudCBpbiBJRVxyXG5cdHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSA9ICEhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImxpbmtcIiApLmxlbmd0aDtcclxuXHJcblx0Ly8gTWFrZXMgc3VyZSBjbG9uaW5nIGFuIGh0bWw1IGVsZW1lbnQgZG9lcyBub3QgY2F1c2UgcHJvYmxlbXNcclxuXHQvLyBXaGVyZSBvdXRlckhUTUwgaXMgdW5kZWZpbmVkLCB0aGlzIHN0aWxsIHdvcmtzXHJcblx0c3VwcG9ydC5odG1sNUNsb25lID1cclxuXHRcdGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwibmF2XCIgKS5jbG9uZU5vZGUoIHRydWUgKS5vdXRlckhUTUwgIT09IFwiPDpuYXY+PC86bmF2PlwiO1xyXG5cclxuXHQvLyBDaGVjayBpZiBhIGRpc2Nvbm5lY3RlZCBjaGVja2JveCB3aWxsIHJldGFpbiBpdHMgY2hlY2tlZFxyXG5cdC8vIHZhbHVlIG9mIHRydWUgYWZ0ZXIgYXBwZW5kZWQgdG8gdGhlIERPTSAoSUU2LzcpXHJcblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuXHRpbnB1dC5jaGVja2VkID0gdHJ1ZTtcclxuXHRmcmFnbWVudC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcclxuXHRzdXBwb3J0LmFwcGVuZENoZWNrZWQgPSBpbnB1dC5jaGVja2VkO1xyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxyXG5cdC8vIFN1cHBvcnQ6IElFNi1JRTExK1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcclxuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcclxuXHJcblx0Ly8gIzExMjE3IC0gV2ViS2l0IGxvc2VzIGNoZWNrIHdoZW4gdGhlIG5hbWUgaXMgYWZ0ZXIgdGhlIGNoZWNrZWQgYXR0cmlidXRlXHJcblx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dCB0eXBlPSdyYWRpbycgY2hlY2tlZD0nY2hlY2tlZCcgbmFtZT0ndCcvPlwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNS4xLCBpT1MgNS4xLCBBbmRyb2lkIDQueCwgQW5kcm9pZCAyLjNcclxuXHQvLyBvbGQgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXHJcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0Ly8gT3BlcmEgZG9lcyBub3QgY2xvbmUgZXZlbnRzIChhbmQgdHlwZW9mIGRpdi5hdHRhY2hFdmVudCA9PT0gdW5kZWZpbmVkKS5cclxuXHQvLyBJRTktMTAgY2xvbmVzIGV2ZW50cyBib3VuZCB2aWEgYXR0YWNoRXZlbnQsIGJ1dCB0aGV5IGRvbid0IHRyaWdnZXIgd2l0aCAuY2xpY2soKVxyXG5cdHN1cHBvcnQubm9DbG9uZUV2ZW50ID0gdHJ1ZTtcclxuXHRpZiAoIGRpdi5hdHRhY2hFdmVudCApIHtcclxuXHRcdGRpdi5hdHRhY2hFdmVudCggXCJvbmNsaWNrXCIsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRzdXBwb3J0Lm5vQ2xvbmVFdmVudCA9IGZhbHNlO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsaWNrKCk7XHJcblx0fVxyXG5cclxuXHQvLyBFeGVjdXRlIHRoZSB0ZXN0IG9ubHkgaWYgbm90IGFscmVhZHkgZXhlY3V0ZWQgaW4gYW5vdGhlciBtb2R1bGUuXHJcblx0aWYgKHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9PSBudWxsKSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSB0cnVlO1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0ZGVsZXRlIGRpdi50ZXN0O1xyXG5cdFx0fSBjYXRjaCggZSApIHtcclxuXHRcdFx0c3VwcG9ydC5kZWxldGVFeHBhbmRvID0gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHR2YXIgaSwgZXZlbnROYW1lLFxyXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw5IChsYWNrIHN1Ym1pdC9jaGFuZ2UgYnViYmxlKSwgRmlyZWZveCAyMysgKGxhY2sgZm9jdXNpbiBldmVudClcclxuXHRmb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCBjaGFuZ2U6IHRydWUsIGZvY3VzaW46IHRydWUgfSkge1xyXG5cdFx0ZXZlbnROYW1lID0gXCJvblwiICsgaTtcclxuXHJcblx0XHRpZiAoICEoc3VwcG9ydFsgaSArIFwiQnViYmxlc1wiIF0gPSBldmVudE5hbWUgaW4gd2luZG93KSApIHtcclxuXHRcdFx0Ly8gQmV3YXJlIG9mIENTUCByZXN0cmljdGlvbnMgKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUClcclxuXHRcdFx0ZGl2LnNldEF0dHJpYnV0ZSggZXZlbnROYW1lLCBcInRcIiApO1xyXG5cdFx0XHRzdXBwb3J0WyBpICsgXCJCdWJibGVzXCIgXSA9IGRpdi5hdHRyaWJ1dGVzWyBldmVudE5hbWUgXS5leHBhbmRvID09PSBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuXHJcblx0ZGl2ID0gbnVsbDtcclxufSkoKTtcclxuXHJcblxyXG52YXIgcmZvcm1FbGVtcyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaSxcclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXHJcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLyxcclxuXHRyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcclxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KSQvO1xyXG5cclxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcclxuXHRyZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XHJcblx0cmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcblx0fSBjYXRjaCAoIGVyciApIHsgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXHJcbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXHJcbiAqL1xyXG5qUXVlcnkuZXZlbnQgPSB7XHJcblxyXG5cdGdsb2JhbDoge30sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcclxuXHRcdHZhciB0bXAsIGV2ZW50cywgdCwgaGFuZGxlT2JqSW4sXHJcblx0XHRcdHNwZWNpYWwsIGV2ZW50SGFuZGxlLCBoYW5kbGVPYmosXHJcblx0XHRcdGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcclxuXHRcdFx0ZWxlbURhdGEgPSBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcclxuXHJcblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxyXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xyXG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XHJcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xyXG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xyXG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3RcclxuXHRcdGlmICggIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xyXG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcclxuXHRcdH1cclxuXHRcdGlmICggIShldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSkgKSB7XHJcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XHJcblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcclxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXHJcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IHN0cnVuZGVmaW5lZCAmJiAoIWUgfHwgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGV2ZW50SGFuZGxlLmVsZW0sIGFyZ3VtZW50cyApIDpcclxuXHRcdFx0XHRcdHVuZGVmaW5lZDtcclxuXHRcdFx0fTtcclxuXHRcdFx0Ly8gQWRkIGVsZW0gYXMgYSBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlIGZuIHRvIHByZXZlbnQgYSBtZW1vcnkgbGVhayB3aXRoIElFIG5vbi1uYXRpdmUgZXZlbnRzXHJcblx0XHRcdGV2ZW50SGFuZGxlLmVsZW0gPSBlbGVtO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2VcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xyXG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XHJcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcclxuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCh7XHJcblx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXHJcblx0XHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxyXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcclxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXHJcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcclxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcclxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcclxuXHJcblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XHJcblx0XHRcdGlmICggIShoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdKSApIHtcclxuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XHJcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIvYXR0YWNoRXZlbnQgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdC8vIEJpbmQgdGhlIGdsb2JhbCBldmVudCBoYW5kbGVyIHRvIHRoZSBlbGVtZW50XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBlbGVtLmF0dGFjaEV2ZW50ICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBldmVudEhhbmRsZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcclxuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcclxuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxyXG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xyXG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxyXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRVxyXG5cdFx0ZWxlbSA9IG51bGw7XHJcblx0fSxcclxuXHJcblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcclxuXHRcdHZhciBqLCBoYW5kbGVPYmosIHRtcCxcclxuXHRcdFx0b3JpZ0NvdW50LCB0LCBldmVudHMsXHJcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLFxyXG5cdFx0XHRuYW1lc3BhY2VzLCBvcmlnVHlwZSxcclxuXHRcdFx0ZWxlbURhdGEgPSBqUXVlcnkuaGFzRGF0YSggZWxlbSApICYmIGpRdWVyeS5fZGF0YSggZWxlbSApO1xyXG5cclxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xyXG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XHJcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdHRtcCA9IHRtcFsyXSAmJiBuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICk7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXHJcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XHJcblxyXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcclxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXHJcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXHJcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcclxuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XHJcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxyXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcclxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xyXG5cdFx0XHRkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xyXG5cclxuXHRcdFx0Ly8gcmVtb3ZlRGF0YSBhbHNvIGNoZWNrcyBmb3IgZW1wdGluZXNzIGFuZCBjbGVhcnMgdGhlIGV4cGFuZG8gaWYgZW1wdHlcclxuXHRcdFx0Ly8gc28gdXNlIGl0IGluc3RlYWQgb2YgZGVsZXRlXHJcblx0XHRcdGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwgXCJldmVudHNcIiApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xyXG5cdFx0dmFyIGhhbmRsZSwgb250eXBlLCBjdXIsXHJcblx0XHRcdGJ1YmJsZVR5cGUsIHNwZWNpYWwsIHRtcCwgaSxcclxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXHJcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXHJcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcclxuXHJcblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcclxuXHJcblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xyXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcclxuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZS5pbmRleE9mKFwiLlwiKSA+PSAwICkge1xyXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXHJcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcclxuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcclxuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XHJcblx0XHR9XHJcblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xyXG5cclxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xyXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XHJcblx0XHRcdGV2ZW50IDpcclxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XHJcblxyXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxyXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XHJcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xyXG5cdFx0ZXZlbnQubmFtZXNwYWNlX3JlID0gZXZlbnQubmFtZXNwYWNlID9cclxuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApIDpcclxuXHRcdFx0bnVsbDtcclxuXHJcblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcclxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcclxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XHJcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cclxuXHRcdFx0WyBldmVudCBdIDpcclxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XHJcblxyXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xyXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxyXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcclxuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcclxuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdHRtcCA9IGN1cjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXHJcblx0XHRcdGlmICggdG1wID09PSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSApIHtcclxuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XHJcblx0XHRcdFx0YnViYmxlVHlwZSA6XHJcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcclxuXHRcdFx0aGFuZGxlID0gKCBqUXVlcnkuX2RhdGEoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJiBqUXVlcnkuX2RhdGEoIGN1ciwgXCJoYW5kbGVcIiApO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcclxuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcclxuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGpRdWVyeS5hY2NlcHREYXRhKCBjdXIgKSApIHtcclxuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xyXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRldmVudC50eXBlID0gdHlwZTtcclxuXHJcblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xyXG5cclxuXHRcdFx0aWYgKCAoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlKSAmJlxyXG5cdFx0XHRcdGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cclxuXHRcdFx0XHQvLyBDYW4ndCB1c2UgYW4gLmlzRnVuY3Rpb24oKSBjaGVjayBoZXJlIGJlY2F1c2UgSUU2LzcgZmFpbHMgdGhhdCB0ZXN0LlxyXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcclxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBlbGVtWyB0eXBlIF0gJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2RcclxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XHJcblx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gSUU8OSBkaWVzIG9uIGZvY3VzL2JsdXIgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCMxMjUxOClcclxuXHRcdFx0XHRcdFx0Ly8gb25seSByZXByb2R1Y2libGUgb24gd2luWFAgSUU4IG5hdGl2ZSwgbm90IElFOSBpbiBJRTggbW9kZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxyXG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xyXG5cclxuXHRcdHZhciBpLCByZXQsIGhhbmRsZU9iaiwgbWF0Y2hlZCwgaixcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXHJcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0aGFuZGxlcnMgPSAoIGpRdWVyeS5fZGF0YSggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XHJcblxyXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcclxuXHRcdGFyZ3NbMF0gPSBldmVudDtcclxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcclxuXHJcblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXHJcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xyXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xyXG5cclxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcclxuXHJcblx0XHRcdGogPSAwO1xyXG5cdFx0XHR3aGlsZSAoIChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSkgJiYgIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3JcclxuXHRcdFx0XHQvLyAyKSBoYXZlIG5hbWVzcGFjZShzKSBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cclxuXHRcdFx0XHRpZiAoICFldmVudC5uYW1lc3BhY2VfcmUgfHwgZXZlbnQubmFtZXNwYWNlX3JlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcclxuXHJcblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XHJcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XHJcblxyXG5cdFx0XHRcdFx0cmV0ID0gKCAoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9KS5oYW5kbGUgfHwgaGFuZGxlT2JqLmhhbmRsZXIgKVxyXG5cdFx0XHRcdFx0XHRcdC5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZXZlbnQucmVzdWx0ID0gcmV0KSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcclxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XHJcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcclxuXHRcdHZhciBzZWwsIGhhbmRsZU9iaiwgbWF0Y2hlcywgaSxcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXHJcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxyXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xyXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcclxuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKVxyXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJiAoIWV2ZW50LmJ1dHRvbiB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xyXG5cclxuXHRcdFx0LyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cclxuXHRcdFx0Zm9yICggOyBjdXIgIT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcclxuXHRcdFx0XHQvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovXHJcblxyXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxyXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxyXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmIChjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcclxuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcclxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID49IDAgOlxyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XHJcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcclxuXHR9LFxyXG5cclxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XHJcblx0XHRcdHJldHVybiBldmVudDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcclxuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxyXG5cdFx0XHR0eXBlID0gZXZlbnQudHlwZSxcclxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxyXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xyXG5cclxuXHRcdGlmICggIWZpeEhvb2sgKSB7XHJcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxyXG5cdFx0XHRcdHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XHJcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxyXG5cdFx0XHRcdHt9O1xyXG5cdFx0fVxyXG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcclxuXHJcblx0XHRldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcclxuXHJcblx0XHRpID0gY29weS5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcclxuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHQvLyBGaXggdGFyZ2V0IHByb3BlcnR5ICgjMTkyNSlcclxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAyMyssIFNhZmFyaT9cclxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXHJcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0Ly8gRm9yIG1vdXNlL2tleSBldmVudHMsIG1ldGFLZXk9PWZhbHNlIGlmIGl0J3MgdW5kZWZpbmVkICgjMzM2OCwgIzExMzI4KVxyXG5cdFx0ZXZlbnQubWV0YUtleSA9ICEhZXZlbnQubWV0YUtleTtcclxuXHJcblx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xyXG5cdH0sXHJcblxyXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XHJcblx0cHJvcHM6IFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIuc3BsaXQoXCIgXCIpLFxyXG5cclxuXHRmaXhIb29rczoge30sXHJcblxyXG5cdGtleUhvb2tzOiB7XHJcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLFxyXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xyXG5cclxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXHJcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcclxuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBldmVudDtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRtb3VzZUhvb2tzOiB7XHJcblx0XHRwcm9wczogXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgZnJvbUVsZW1lbnQgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksXHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XHJcblx0XHRcdHZhciBib2R5LCBldmVudERvYywgZG9jLFxyXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbixcclxuXHRcdFx0XHRmcm9tRWxlbWVudCA9IG9yaWdpbmFsLmZyb21FbGVtZW50O1xyXG5cclxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxyXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xyXG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XHJcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xyXG5cclxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XHJcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICsgKCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgcmVsYXRlZFRhcmdldCwgaWYgbmVjZXNzYXJ5XHJcblx0XHRcdGlmICggIWV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgZnJvbUVsZW1lbnQgKSB7XHJcblx0XHRcdFx0ZXZlbnQucmVsYXRlZFRhcmdldCA9IGZyb21FbGVtZW50ID09PSBldmVudC50YXJnZXQgPyBvcmlnaW5hbC50b0VsZW1lbnQgOiBmcm9tRWxlbWVudDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxyXG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxyXG5cdFx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBldmVudDtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRzcGVjaWFsOiB7XHJcblx0XHRsb2FkOiB7XHJcblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcclxuXHRcdFx0bm9CdWJibGU6IHRydWVcclxuXHRcdH0sXHJcblx0XHRmb2N1czoge1xyXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3RcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRcdFx0XHRcdC8vIElmIHdlIGVycm9yIG9uIGZvY3VzIHRvIGhpZGRlbiBlbGVtZW50ICgjMTQ4NiwgIzEyNTE4KSxcclxuXHRcdFx0XHRcdFx0Ly8gbGV0IC50cmlnZ2VyKCkgcnVuIHRoZSBoYW5kbGVyc1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxyXG5cdFx0fSxcclxuXHRcdGJsdXI6IHtcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcclxuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcclxuXHRcdH0sXHJcblx0XHRjbGljazoge1xyXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgJiYgdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayApIHtcclxuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3NcclxuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0YmVmb3JldW5sb2FkOiB7XHJcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xyXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cclxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XHJcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcclxuXHRcdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZS5cclxuXHRcdC8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZVxyXG5cdFx0Ly8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXHJcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXHJcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcclxuXHRcdFx0ZXZlbnQsXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlLFxyXG5cdFx0XHRcdG9yaWdpbmFsRXZlbnQ6IHt9XHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblx0XHRpZiAoIGJ1YmJsZSApIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5jYWxsKCBlbGVtLCBlICk7XHJcblx0XHR9XHJcblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciA/XHJcblx0ZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcclxuXHRcdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTtcclxuXHRcdH1cclxuXHR9IDpcclxuXHRmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xyXG5cdFx0dmFyIG5hbWUgPSBcIm9uXCIgKyB0eXBlO1xyXG5cclxuXHRcdGlmICggZWxlbS5kZXRhY2hFdmVudCApIHtcclxuXHJcblx0XHRcdC8vICM4NTQ1LCAjNzA1NCwgcHJldmVudGluZyBtZW1vcnkgbGVha3MgZm9yIGN1c3RvbSBldmVudHMgaW4gSUU2LThcclxuXHRcdFx0Ly8gZGV0YWNoRXZlbnQgbmVlZGVkIHByb3BlcnR5IG9uIGVsZW1lbnQsIGJ5IG5hbWUgb2YgdGhhdCBldmVudCwgdG8gcHJvcGVybHkgZXhwb3NlIGl0IHRvIEdDXHJcblx0XHRcdGlmICggdHlwZW9mIGVsZW1bIG5hbWUgXSA9PT0gc3RydW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGVsZW1bIG5hbWUgXSA9IG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGVsZW0uZGV0YWNoRXZlbnQoIG5hbWUsIGhhbmRsZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcclxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcclxuXHRpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7XHJcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xyXG5cdH1cclxuXHJcblx0Ly8gRXZlbnQgb2JqZWN0XHJcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XHJcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XHJcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcclxuXHJcblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxyXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXHJcblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XHJcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwgOSwgQW5kcm9pZCA8IDQuMFxyXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHRyZXR1cm5UcnVlIDpcclxuXHRcdFx0cmV0dXJuRmFsc2U7XHJcblxyXG5cdC8vIEV2ZW50IHR5cGVcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhpcy50eXBlID0gc3JjO1xyXG5cdH1cclxuXHJcblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3RcclxuXHRpZiAoIHByb3BzICkge1xyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcclxuXHR9XHJcblxyXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXHJcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XHJcblxyXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcclxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcclxufTtcclxuXHJcbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xyXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcclxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcclxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcclxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXHJcblxyXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcclxuXHRcdGlmICggIWUgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiBwcmV2ZW50RGVmYXVsdCBleGlzdHMsIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcclxuXHRcdGlmICggZS5wcmV2ZW50RGVmYXVsdCApIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHQvLyBPdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2VcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcclxuXHRcdGlmICggIWUgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vIElmIHN0b3BQcm9wYWdhdGlvbiBleGlzdHMsIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcclxuXHRcdGlmICggZS5zdG9wUHJvcGFnYXRpb24gKSB7XHJcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUVcclxuXHRcdC8vIFNldCB0aGUgY2FuY2VsQnViYmxlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byB0cnVlXHJcblx0XHRlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcblx0fSxcclxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XHJcblxyXG5cdFx0aWYgKCBlICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICkge1xyXG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0fVxyXG59O1xyXG5cclxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXHJcbmpRdWVyeS5lYWNoKHtcclxuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxyXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcclxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcclxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXHJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XHJcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcclxuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxyXG5cdFx0YmluZFR5cGU6IGZpeCxcclxuXHJcblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0dmFyIHJldCxcclxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxyXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcclxuXHJcblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cclxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcclxuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApKSApIHtcclxuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xyXG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBJRSBzdWJtaXQgZGVsZWdhdGlvblxyXG5pZiAoICFzdXBwb3J0LnN1Ym1pdEJ1YmJsZXMgKSB7XHJcblxyXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsLnN1Ym1pdCA9IHtcclxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHNcclxuXHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiZm9ybVwiICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBMYXp5LWFkZCBhIHN1Ym1pdCBoYW5kbGVyIHdoZW4gYSBkZXNjZW5kYW50IGZvcm0gbWF5IHBvdGVudGlhbGx5IGJlIHN1Ym1pdHRlZFxyXG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCBcImNsaWNrLl9zdWJtaXQga2V5cHJlc3MuX3N1Ym1pdFwiLCBmdW5jdGlvbiggZSApIHtcclxuXHRcdFx0XHQvLyBOb2RlIG5hbWUgY2hlY2sgYXZvaWRzIGEgVk1MLXJlbGF0ZWQgY3Jhc2ggaW4gSUUgKCM5ODA3KVxyXG5cdFx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQsXHJcblx0XHRcdFx0XHRmb3JtID0galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSB8fCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiYnV0dG9uXCIgKSA/IGVsZW0uZm9ybSA6IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRpZiAoIGZvcm0gJiYgIWpRdWVyeS5fZGF0YSggZm9ybSwgXCJzdWJtaXRCdWJibGVzXCIgKSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGZvcm0sIFwic3VibWl0Ll9zdWJtaXRcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRcdFx0XHRldmVudC5fc3VibWl0X2J1YmJsZSA9IHRydWU7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZm9ybSwgXCJzdWJtaXRCdWJibGVzXCIsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyByZXR1cm4gdW5kZWZpbmVkIHNpbmNlIHdlIGRvbid0IG5lZWQgYW4gZXZlbnQgbGlzdGVuZXJcclxuXHRcdH0sXHJcblxyXG5cdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdC8vIElmIGZvcm0gd2FzIHN1Ym1pdHRlZCBieSB0aGUgdXNlciwgYnViYmxlIHRoZSBldmVudCB1cCB0aGUgdHJlZVxyXG5cdFx0XHRpZiAoIGV2ZW50Ll9zdWJtaXRfYnViYmxlICkge1xyXG5cdFx0XHRcdGRlbGV0ZSBldmVudC5fc3VibWl0X2J1YmJsZTtcclxuXHRcdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSAmJiAhZXZlbnQuaXNUcmlnZ2VyICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBcInN1Ym1pdFwiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHNcclxuXHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiZm9ybVwiICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgZGVsZWdhdGVkIGhhbmRsZXJzOyBjbGVhbkRhdGEgZXZlbnR1YWxseSByZWFwcyBzdWJtaXQgaGFuZGxlcnMgYXR0YWNoZWQgYWJvdmVcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgXCIuX3N1Ym1pdFwiICk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLy8gSUUgY2hhbmdlIGRlbGVnYXRpb24gYW5kIGNoZWNrYm94L3JhZGlvIGZpeFxyXG5pZiAoICFzdXBwb3J0LmNoYW5nZUJ1YmJsZXMgKSB7XHJcblxyXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsLmNoYW5nZSA9IHtcclxuXHJcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggdGhpcy5ub2RlTmFtZSApICkge1xyXG5cdFx0XHRcdC8vIElFIGRvZXNuJ3QgZmlyZSBjaGFuZ2Ugb24gYSBjaGVjay9yYWRpbyB1bnRpbCBibHVyOyB0cmlnZ2VyIGl0IG9uIGNsaWNrXHJcblx0XHRcdFx0Ly8gYWZ0ZXIgYSBwcm9wZXJ0eWNoYW5nZS4gRWF0IHRoZSBibHVyLWNoYW5nZSBpbiBzcGVjaWFsLmNoYW5nZS5oYW5kbGUuXHJcblx0XHRcdFx0Ly8gVGhpcyBzdGlsbCBmaXJlcyBvbmNoYW5nZSBhIHNlY29uZCB0aW1lIGZvciBjaGVjay9yYWRpbyBhZnRlciBibHVyLlxyXG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgfHwgdGhpcy50eXBlID09PSBcInJhZGlvXCIgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCBcInByb3BlcnR5Y2hhbmdlLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09PSBcImNoZWNrZWRcIiApIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9qdXN0X2NoYW5nZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggdGhpcy5fanVzdF9jaGFuZ2VkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5fanVzdF9jaGFuZ2VkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Ly8gQWxsb3cgdHJpZ2dlcmVkLCBzaW11bGF0ZWQgY2hhbmdlIGV2ZW50cyAoIzExNTAwKVxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwiY2hhbmdlXCIsIHRoaXMsIGV2ZW50LCB0cnVlICk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIERlbGVnYXRlZCBldmVudDsgbGF6eS1hZGQgYSBjaGFuZ2UgaGFuZGxlciBvbiBkZXNjZW5kYW50IGlucHV0c1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCBcImJlZm9yZWFjdGl2YXRlLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGUgKSB7XHJcblx0XHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcclxuXHJcblx0XHRcdFx0aWYgKCByZm9ybUVsZW1zLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImNoYW5nZUJ1YmJsZXNcIiApICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWxlbSwgXCJjaGFuZ2UuX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1NpbXVsYXRlZCAmJiAhZXZlbnQuaXNUcmlnZ2VyICkge1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJjaGFuZ2VcIiwgdGhpcy5wYXJlbnROb2RlLCBldmVudCwgdHJ1ZSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJjaGFuZ2VCdWJibGVzXCIsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0dmFyIGVsZW0gPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0XHQvLyBTd2FsbG93IG5hdGl2ZSBjaGFuZ2UgZXZlbnRzIGZyb20gY2hlY2tib3gvcmFkaW8sIHdlIGFscmVhZHkgdHJpZ2dlcmVkIHRoZW0gYWJvdmVcclxuXHRcdFx0aWYgKCB0aGlzICE9PSBlbGVtIHx8IGV2ZW50LmlzU2ltdWxhdGVkIHx8IGV2ZW50LmlzVHJpZ2dlciB8fCAoZWxlbS50eXBlICE9PSBcInJhZGlvXCIgJiYgZWxlbS50eXBlICE9PSBcImNoZWNrYm94XCIpICkge1xyXG5cdFx0XHRcdHJldHVybiBldmVudC5oYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCBcIi5fY2hhbmdlXCIgKTtcclxuXHJcblx0XHRcdHJldHVybiAhcmZvcm1FbGVtcy50ZXN0KCB0aGlzLm5vZGVOYW1lICk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLy8gQ3JlYXRlIFwiYnViYmxpbmdcIiBmb2N1cyBhbmQgYmx1ciBldmVudHNcclxuaWYgKCAhc3VwcG9ydC5mb2N1c2luQnViYmxlcyApIHtcclxuXHRqUXVlcnkuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XHJcblxyXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcclxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICksIHRydWUgKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XHJcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXHJcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGpRdWVyeS5fZGF0YSggZG9jLCBmaXggKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XHJcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRqUXVlcnkuX2RhdGEoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdGF0dGFjaGVzID0galF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCApIC0gMTtcclxuXHJcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XHJcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xyXG5cdFx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBkb2MsIGZpeCApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGRvYywgZml4LCBhdHRhY2hlcyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9KTtcclxufVxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblxyXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgLypJTlRFUk5BTCovIG9uZSApIHtcclxuXHRcdHZhciB0eXBlLCBvcmlnRm47XHJcblxyXG5cdFx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcclxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxyXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xyXG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XHJcblx0XHRcdFx0dGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XHJcblx0XHRcdC8vICggdHlwZXMsIGZuIClcclxuXHRcdFx0Zm4gPSBzZWxlY3RvcjtcclxuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcclxuXHRcdFx0XHRmbiA9IGRhdGE7XHJcblx0XHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXHJcblx0XHRcdFx0Zm4gPSBkYXRhO1xyXG5cdFx0XHRcdGRhdGEgPSBzZWxlY3RvcjtcclxuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XHJcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb25lID09PSAxICkge1xyXG5cdFx0XHRvcmlnRm4gPSBmbjtcclxuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXHJcblx0XHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xyXG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxyXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xyXG5cdH0sXHJcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcclxuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XHJcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcclxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxyXG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XHJcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXHJcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSxcclxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXHJcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcclxuXHRcdFx0KTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcclxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcclxuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xyXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXHJcblx0XHRcdGZuID0gc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBlbGVtID0gdGhpc1swXTtcclxuXHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICkge1xyXG5cdHZhciBsaXN0ID0gbm9kZU5hbWVzLnNwbGl0KCBcInxcIiApLFxyXG5cdFx0c2FmZUZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG5cdGlmICggc2FmZUZyYWcuY3JlYXRlRWxlbWVudCApIHtcclxuXHRcdHdoaWxlICggbGlzdC5sZW5ndGggKSB7XHJcblx0XHRcdHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQoXHJcblx0XHRcdFx0bGlzdC5wb3AoKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gc2FmZUZyYWc7XHJcbn1cclxuXHJcbnZhciBub2RlTmFtZXMgPSBcImFiYnJ8YXJ0aWNsZXxhc2lkZXxhdWRpb3xiZGl8Y2FudmFzfGRhdGF8ZGF0YWxpc3R8ZGV0YWlsc3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8XCIgK1xyXG5cdFx0XCJoZWFkZXJ8aGdyb3VwfG1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwcm9ncmVzc3xzZWN0aW9ufHN1bW1hcnl8dGltZXx2aWRlb1wiLFxyXG5cdHJpbmxpbmVqUXVlcnkgPSAvIGpRdWVyeVxcZCs9XCIoPzpudWxsfFxcZCspXCIvZyxcclxuXHRybm9zaGltY2FjaGUgPSBuZXcgUmVnRXhwKFwiPCg/OlwiICsgbm9kZU5hbWVzICsgXCIpW1xcXFxzLz5dXCIsIFwiaVwiKSxcclxuXHRybGVhZGluZ1doaXRlc3BhY2UgPSAvXlxccysvLFxyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcclxuXHRydGFnTmFtZSA9IC88KFtcXHc6XSspLyxcclxuXHRydGJvZHkgPSAvPHRib2R5L2ksXHJcblx0cmh0bWwgPSAvPHwmIz9cXHcrOy8sXHJcblx0cm5vSW5uZXJodG1sID0gLzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSxcclxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcclxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXHJcblx0cnNjcmlwdFR5cGUgPSAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLFxyXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXHJcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLFxyXG5cclxuXHQvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxyXG5cdHdyYXBNYXAgPSB7XHJcblx0XHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcclxuXHRcdGxlZ2VuZDogWyAxLCBcIjxmaWVsZHNldD5cIiwgXCI8L2ZpZWxkc2V0PlwiIF0sXHJcblx0XHRhcmVhOiBbIDEsIFwiPG1hcD5cIiwgXCI8L21hcD5cIiBdLFxyXG5cdFx0cGFyYW06IFsgMSwgXCI8b2JqZWN0PlwiLCBcIjwvb2JqZWN0PlwiIF0sXHJcblx0XHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXHJcblx0XHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblx0XHRjb2w6IFsgMiwgXCI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxyXG5cdFx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxyXG5cclxuXHRcdC8vIElFNi04IGNhbid0IHNlcmlhbGl6ZSBsaW5rLCBzY3JpcHQsIHN0eWxlLCBvciBhbnkgaHRtbDUgKE5vU2NvcGUpIHRhZ3MsXHJcblx0XHQvLyB1bmxlc3Mgd3JhcHBlZCBpbiBhIGRpdiB3aXRoIG5vbi1icmVha2luZyBjaGFyYWN0ZXJzIGluIGZyb250IG9mIGl0LlxyXG5cdFx0X2RlZmF1bHQ6IHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSA/IFsgMCwgXCJcIiwgXCJcIiBdIDogWyAxLCBcIlg8ZGl2PlwiLCBcIjwvZGl2PlwiICBdXHJcblx0fSxcclxuXHRzYWZlRnJhZ21lbnQgPSBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICksXHJcblx0ZnJhZ21lbnREaXYgPSBzYWZlRnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcclxuXHJcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcclxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcclxud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XHJcblxyXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcclxuXHR2YXIgZWxlbXMsIGVsZW0sXHJcblx0XHRpID0gMCxcclxuXHRcdGZvdW5kID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IHN0cnVuZGVmaW5lZCA/IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApIDpcclxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gc3RydW5kZWZpbmVkID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XHJcblx0XHRcdHVuZGVmaW5lZDtcclxuXHJcblx0aWYgKCAhZm91bmQgKSB7XHJcblx0XHRmb3IgKCBmb3VuZCA9IFtdLCBlbGVtcyA9IGNvbnRleHQuY2hpbGROb2RlcyB8fCBjb250ZXh0OyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdGlmICggIXRhZyB8fCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIHRhZyApICkge1xyXG5cdFx0XHRcdGZvdW5kLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIGZvdW5kLCBnZXRBbGwoIGVsZW0sIHRhZyApICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XHJcblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCBmb3VuZCApIDpcclxuXHRcdGZvdW5kO1xyXG59XHJcblxyXG4vLyBVc2VkIGluIGJ1aWxkRnJhZ21lbnQsIGZpeGVzIHRoZSBkZWZhdWx0Q2hlY2tlZCBwcm9wZXJ0eVxyXG5mdW5jdGlvbiBmaXhEZWZhdWx0Q2hlY2tlZCggZWxlbSApIHtcclxuXHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsZW0udHlwZSApICkge1xyXG5cdFx0ZWxlbS5kZWZhdWx0Q2hlY2tlZCA9IGVsZW0uY2hlY2tlZDtcclxuXHR9XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IElFPDhcclxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XHJcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcclxuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxyXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cclxuXHJcblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcclxuXHRcdFx0ZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKSApIDpcclxuXHRcdGVsZW07XHJcbn1cclxuXHJcbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cclxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcclxuXHRlbGVtLnR5cGUgPSAoalF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0eXBlXCIgKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xyXG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xyXG5cdGlmICggbWF0Y2ggKSB7XHJcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsxXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xyXG5cdH1cclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5cclxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXHJcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcclxuXHR2YXIgZWxlbSxcclxuXHRcdGkgPSAwO1xyXG5cdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImdsb2JhbEV2YWxcIiwgIXJlZkVsZW1lbnRzIHx8IGpRdWVyeS5fZGF0YSggcmVmRWxlbWVudHNbaV0sIFwiZ2xvYmFsRXZhbFwiICkgKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XHJcblxyXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5Lmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0dmFyIHR5cGUsIGksIGwsXHJcblx0XHRvbGREYXRhID0galF1ZXJ5Ll9kYXRhKCBzcmMgKSxcclxuXHRcdGN1ckRhdGEgPSBqUXVlcnkuX2RhdGEoIGRlc3QsIG9sZERhdGEgKSxcclxuXHRcdGV2ZW50cyA9IG9sZERhdGEuZXZlbnRzO1xyXG5cclxuXHRpZiAoIGV2ZW50cyApIHtcclxuXHRcdGRlbGV0ZSBjdXJEYXRhLmhhbmRsZTtcclxuXHRcdGN1ckRhdGEuZXZlbnRzID0ge307XHJcblxyXG5cdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gbWFrZSB0aGUgY2xvbmVkIHB1YmxpYyBkYXRhIG9iamVjdCBhIGNvcHkgZnJvbSB0aGUgb3JpZ2luYWxcclxuXHRpZiAoIGN1ckRhdGEuZGF0YSApIHtcclxuXHRcdGN1ckRhdGEuZGF0YSA9IGpRdWVyeS5leHRlbmQoIHt9LCBjdXJEYXRhLmRhdGEgKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeENsb25lTm9kZUlzc3Vlcyggc3JjLCBkZXN0ICkge1xyXG5cdHZhciBub2RlTmFtZSwgZSwgZGF0YTtcclxuXHJcblx0Ly8gV2UgZG8gbm90IG5lZWQgdG8gZG8gYW55dGhpbmcgZm9yIG5vbi1FbGVtZW50c1xyXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHQvLyBJRTYtOCBjb3BpZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCB3aGVuIHVzaW5nIGNsb25lTm9kZS5cclxuXHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVFdmVudCAmJiBkZXN0WyBqUXVlcnkuZXhwYW5kbyBdICkge1xyXG5cdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCApO1xyXG5cclxuXHRcdGZvciAoIGUgaW4gZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZGVzdCwgZSwgZGF0YS5oYW5kbGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBFdmVudCBkYXRhIGdldHMgcmVmZXJlbmNlZCBpbnN0ZWFkIG9mIGNvcGllZCBpZiB0aGUgZXhwYW5kbyBnZXRzIGNvcGllZCB0b29cclxuXHRcdGRlc3QucmVtb3ZlQXR0cmlidXRlKCBqUXVlcnkuZXhwYW5kbyApO1xyXG5cdH1cclxuXHJcblx0Ly8gSUUgYmxhbmtzIGNvbnRlbnRzIHdoZW4gY2xvbmluZyBzY3JpcHRzLCBhbmQgdHJpZXMgdG8gZXZhbHVhdGUgbmV3bHktc2V0IHRleHRcclxuXHRpZiAoIG5vZGVOYW1lID09PSBcInNjcmlwdFwiICYmIGRlc3QudGV4dCAhPT0gc3JjLnRleHQgKSB7XHJcblx0XHRkaXNhYmxlU2NyaXB0KCBkZXN0ICkudGV4dCA9IHNyYy50ZXh0O1xyXG5cdFx0cmVzdG9yZVNjcmlwdCggZGVzdCApO1xyXG5cclxuXHQvLyBJRTYtMTAgaW1wcm9wZXJseSBjbG9uZXMgY2hpbGRyZW4gb2Ygb2JqZWN0IGVsZW1lbnRzIHVzaW5nIGNsYXNzaWQuXHJcblx0Ly8gSUUxMCB0aHJvd3MgTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3IgaWYgcGFyZW50IGlzIG51bGwsICMxMjEzMi5cclxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdGlmICggZGVzdC5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRkZXN0Lm91dGVySFRNTCA9IHNyYy5vdXRlckhUTUw7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVGhpcyBwYXRoIGFwcGVhcnMgdW5hdm9pZGFibGUgZm9yIElFOS4gV2hlbiBjbG9uaW5nIGFuIG9iamVjdFxyXG5cdFx0Ly8gZWxlbWVudCBpbiBJRTksIHRoZSBvdXRlckhUTUwgc3RyYXRlZ3kgYWJvdmUgaXMgbm90IHN1ZmZpY2llbnQuXHJcblx0XHQvLyBJZiB0aGUgc3JjIGhhcyBpbm5lckhUTUwgYW5kIHRoZSBkZXN0aW5hdGlvbiBkb2VzIG5vdCxcclxuXHRcdC8vIGNvcHkgdGhlIHNyYy5pbm5lckhUTUwgaW50byB0aGUgZGVzdC5pbm5lckhUTUwuICMxMDMyNFxyXG5cdFx0aWYgKCBzdXBwb3J0Lmh0bWw1Q2xvbmUgJiYgKCBzcmMuaW5uZXJIVE1MICYmICFqUXVlcnkudHJpbShkZXN0LmlubmVySFRNTCkgKSApIHtcclxuXHRcdFx0ZGVzdC5pbm5lckhUTUwgPSBzcmMuaW5uZXJIVE1MO1xyXG5cdFx0fVxyXG5cclxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XHJcblx0XHQvLyBJRTYtOCBmYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94XHJcblx0XHQvLyBvciByYWRpbyBidXR0b24uIFdvcnNlLCBJRTYtNyBmYWlsIHRvIGdpdmUgdGhlIGNsb25lZCBlbGVtZW50XHJcblx0XHQvLyBhIGNoZWNrZWQgYXBwZWFyYW5jZSBpZiB0aGUgZGVmYXVsdENoZWNrZWQgdmFsdWUgaXNuJ3QgYWxzbyBzZXRcclxuXHJcblx0XHRkZXN0LmRlZmF1bHRDaGVja2VkID0gZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XHJcblxyXG5cdFx0Ly8gSUU2LTcgZ2V0IGNvbmZ1c2VkIGFuZCBlbmQgdXAgc2V0dGluZyB0aGUgdmFsdWUgb2YgYSBjbG9uZWRcclxuXHRcdC8vIGNoZWNrYm94L3JhZGlvIGJ1dHRvbiB0byBhbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZiBcIm9uXCJcclxuXHRcdGlmICggZGVzdC52YWx1ZSAhPT0gc3JjLnZhbHVlICkge1xyXG5cdFx0XHRkZXN0LnZhbHVlID0gc3JjLnZhbHVlO1xyXG5cdFx0fVxyXG5cclxuXHQvLyBJRTYtOCBmYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZFxyXG5cdC8vIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXHJcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgKSB7XHJcblx0XHRkZXN0LmRlZmF1bHRTZWxlY3RlZCA9IGRlc3Quc2VsZWN0ZWQgPSBzcmMuZGVmYXVsdFNlbGVjdGVkO1xyXG5cclxuXHQvLyBJRTYtOCBmYWlscyB0byBzZXQgdGhlIGRlZmF1bHRWYWx1ZSB0byB0aGUgY29ycmVjdCB2YWx1ZSB3aGVuXHJcblx0Ly8gY2xvbmluZyBvdGhlciB0eXBlcyBvZiBpbnB1dCBmaWVsZHNcclxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XHJcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XHJcblx0fVxyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0dmFyIGRlc3RFbGVtZW50cywgbm9kZSwgY2xvbmUsIGksIHNyY0VsZW1lbnRzLFxyXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cclxuXHRcdGlmICggc3VwcG9ydC5odG1sNUNsb25lIHx8IGpRdWVyeS5pc1hNTERvYyhlbGVtKSB8fCAhcm5vc2hpbWNhY2hlLnRlc3QoIFwiPFwiICsgZWxlbS5ub2RlTmFtZSArIFwiPlwiICkgKSB7XHJcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKTtcclxuXHJcblx0XHQvLyBJRTw9OCBkb2VzIG5vdCBwcm9wZXJseSBjbG9uZSBkZXRhY2hlZCwgdW5rbm93biBlbGVtZW50IG5vZGVzXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRmcmFnbWVudERpdi5pbm5lckhUTUwgPSBlbGVtLm91dGVySFRNTDtcclxuXHRcdFx0ZnJhZ21lbnREaXYucmVtb3ZlQ2hpbGQoIGNsb25lID0gZnJhZ21lbnREaXYuZmlyc3RDaGlsZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggKCFzdXBwb3J0Lm5vQ2xvbmVFdmVudCB8fCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCkgJiZcclxuXHRcdFx0XHQoZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSkgJiYgIWpRdWVyeS5pc1hNTERvYyhlbGVtKSApIHtcclxuXHJcblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXHJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcclxuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcclxuXHJcblx0XHRcdC8vIEZpeCBhbGwgSUUgY2xvbmluZyBpc3N1ZXNcclxuXHRcdFx0Zm9yICggaSA9IDA7IChub2RlID0gc3JjRWxlbWVudHNbaV0pICE9IG51bGw7ICsraSApIHtcclxuXHRcdFx0XHQvLyBFbnN1cmUgdGhhdCB0aGUgZGVzdGluYXRpb24gbm9kZSBpcyBub3QgbnVsbDsgRml4ZXMgIzk1ODdcclxuXHRcdFx0XHRpZiAoIGRlc3RFbGVtZW50c1tpXSApIHtcclxuXHRcdFx0XHRcdGZpeENsb25lTm9kZUlzc3Vlcyggbm9kZSwgZGVzdEVsZW1lbnRzW2ldICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxyXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XHJcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcclxuXHJcblx0XHRcdFx0Zm9yICggaSA9IDA7IChub2RlID0gc3JjRWxlbWVudHNbaV0pICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBub2RlLCBkZXN0RWxlbWVudHNbaV0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XHJcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xyXG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRkZXN0RWxlbWVudHMgPSBzcmNFbGVtZW50cyA9IG5vZGUgPSBudWxsO1xyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxyXG5cdFx0cmV0dXJuIGNsb25lO1xyXG5cdH0sXHJcblxyXG5cdGJ1aWxkRnJhZ21lbnQ6IGZ1bmN0aW9uKCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uICkge1xyXG5cdFx0dmFyIGosIGVsZW0sIGNvbnRhaW5zLFxyXG5cdFx0XHR0bXAsIHRhZywgdGJvZHksIHdyYXAsXHJcblx0XHRcdGwgPSBlbGVtcy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyBFbnN1cmUgYSBzYWZlIGZyYWdtZW50XHJcblx0XHRcdHNhZmUgPSBjcmVhdGVTYWZlRnJhZ21lbnQoIGNvbnRleHQgKSxcclxuXHJcblx0XHRcdG5vZGVzID0gW10sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0ZWxlbSA9IGVsZW1zWyBpIF07XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xyXG5cclxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xyXG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XHJcblxyXG5cdFx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgc2FmZS5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxyXG5cdFx0XHRcdFx0dGFnID0gKHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSlbIDEgXS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XHJcblxyXG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApICsgd3JhcFsyXTtcclxuXHJcblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcclxuXHRcdFx0XHRcdGogPSB3cmFwWzBdO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gTWFudWFsbHkgYWRkIGxlYWRpbmcgd2hpdGVzcGFjZSByZW1vdmVkIGJ5IElFXHJcblx0XHRcdFx0XHRpZiAoICFzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7XHJcblx0XHRcdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIHJsZWFkaW5nV2hpdGVzcGFjZS5leGVjKCBlbGVtIClbMF0gKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFJlbW92ZSBJRSdzIGF1dG9pbnNlcnRlZCA8dGJvZHk+IGZyb20gdGFibGUgZnJhZ21lbnRzXHJcblx0XHRcdFx0XHRpZiAoICFzdXBwb3J0LnRib2R5ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3RyaW5nIHdhcyBhIDx0YWJsZT4sICptYXkqIGhhdmUgc3B1cmlvdXMgPHRib2R5PlxyXG5cdFx0XHRcdFx0XHRlbGVtID0gdGFnID09PSBcInRhYmxlXCIgJiYgIXJ0Ym9keS50ZXN0KCBlbGVtICkgP1xyXG5cdFx0XHRcdFx0XHRcdHRtcC5maXJzdENoaWxkIDpcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gU3RyaW5nIHdhcyBhIGJhcmUgPHRoZWFkPiBvciA8dGZvb3Q+XHJcblx0XHRcdFx0XHRcdFx0d3JhcFsxXSA9PT0gXCI8dGFibGU+XCIgJiYgIXJ0Ym9keS50ZXN0KCBlbGVtICkgP1xyXG5cdFx0XHRcdFx0XHRcdFx0dG1wIDpcclxuXHRcdFx0XHRcdFx0XHRcdDA7XHJcblxyXG5cdFx0XHRcdFx0XHRqID0gZWxlbSAmJiBlbGVtLmNoaWxkTm9kZXMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggKHRib2R5ID0gZWxlbS5jaGlsZE5vZGVzW2pdKSwgXCJ0Ym9keVwiICkgJiYgIXRib2R5LmNoaWxkTm9kZXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5yZW1vdmVDaGlsZCggdGJvZHkgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEZpeCAjMTIzOTIgZm9yIFdlYktpdCBhbmQgSUUgPiA5XHJcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRcdC8vIEZpeCAjMTIzOTIgZm9yIG9sZElFXHJcblx0XHRcdFx0XHR3aGlsZSAoIHRtcC5maXJzdENoaWxkICkge1xyXG5cdFx0XHRcdFx0XHR0bXAucmVtb3ZlQ2hpbGQoIHRtcC5maXJzdENoaWxkICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHByb3BlciBjbGVhbnVwXHJcblx0XHRcdFx0XHR0bXAgPSBzYWZlLmxhc3RDaGlsZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaXggIzExMzU2OiBDbGVhciBlbGVtZW50cyBmcm9tIGZyYWdtZW50XHJcblx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0c2FmZS5yZW1vdmVDaGlsZCggdG1wICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVzZXQgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXNcclxuXHRcdC8vIGFib3V0IHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBET00gaW4gSUUgNi83ICgjODA2MClcclxuXHRcdGlmICggIXN1cHBvcnQuYXBwZW5kQ2hlY2tlZCApIHtcclxuXHRcdFx0alF1ZXJ5LmdyZXAoIGdldEFsbCggbm9kZXMsIFwiaW5wdXRcIiApLCBmaXhEZWZhdWx0Q2hlY2tlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoZWxlbSA9IG5vZGVzWyBpKysgXSkgKSB7XHJcblxyXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xyXG5cdFx0XHQvLyB0aGF0IGVsZW1lbnQsIGRvIG5vdCBkbyBhbnl0aGluZ1xyXG5cdFx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgIT09IC0xICkge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcclxuXHRcdFx0dG1wID0gZ2V0QWxsKCBzYWZlLmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcclxuXHJcblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3RvcnlcclxuXHRcdFx0aWYgKCBjb250YWlucyApIHtcclxuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xyXG5cdFx0XHRpZiAoIHNjcmlwdHMgKSB7XHJcblx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHRtcFsgaisrIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xyXG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0bXAgPSBudWxsO1xyXG5cclxuXHRcdHJldHVybiBzYWZlO1xyXG5cdH0sXHJcblxyXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zLCAvKiBpbnRlcm5hbCAqLyBhY2NlcHREYXRhICkge1xyXG5cdFx0dmFyIGVsZW0sIHR5cGUsIGlkLCBkYXRhLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0aW50ZXJuYWxLZXkgPSBqUXVlcnkuZXhwYW5kbyxcclxuXHRcdFx0Y2FjaGUgPSBqUXVlcnkuY2FjaGUsXHJcblx0XHRcdGRlbGV0ZUV4cGFuZG8gPSBzdXBwb3J0LmRlbGV0ZUV4cGFuZG8sXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbDtcclxuXHJcblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0aWYgKCBhY2NlcHREYXRhIHx8IGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdGlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXTtcclxuXHRcdFx0XHRkYXRhID0gaWQgJiYgY2FjaGVbIGlkIF07XHJcblxyXG5cdFx0XHRcdGlmICggZGF0YSApIHtcclxuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFJlbW92ZSBjYWNoZSBvbmx5IGlmIGl0IHdhcyBub3QgYWxyZWFkeSByZW1vdmVkIGJ5IGpRdWVyeS5ldmVudC5yZW1vdmVcclxuXHRcdFx0XHRcdGlmICggY2FjaGVbIGlkIF0gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRkZWxldGUgY2FjaGVbIGlkIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJRSBkb2VzIG5vdCBhbGxvdyB1cyB0byBkZWxldGUgZXhwYW5kbyBwcm9wZXJ0aWVzIGZyb20gbm9kZXMsXHJcblx0XHRcdFx0XHRcdC8vIG5vciBkb2VzIGl0IGhhdmUgYSByZW1vdmVBdHRyaWJ1dGUgZnVuY3Rpb24gb24gRG9jdW1lbnQgbm9kZXM7XHJcblx0XHRcdFx0XHRcdC8vIHdlIG11c3QgaGFuZGxlIGFsbCBvZiB0aGVzZSBjYXNlc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGRlbGV0ZUV4cGFuZG8gKSB7XHJcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGVsZW1bIGludGVybmFsS2V5IF07XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgZWxlbS5yZW1vdmVBdHRyaWJ1dGUgIT09IHN0cnVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggaW50ZXJuYWxLZXkgKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbVsgaW50ZXJuYWxLZXkgXSA9IG51bGw7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGRlbGV0ZWRJZHMucHVzaCggaWQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XHJcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggKCB0aGlzWzBdICYmIHRoaXNbMF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApLmNyZWF0ZVRleHROb2RlKCB2YWx1ZSApICk7XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH0sXHJcblxyXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xyXG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCBrZWVwRGF0YSAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHRcdHZhciBlbGVtLFxyXG5cdFx0XHRlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cclxuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0gKSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XHJcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlbGVtLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRmb3IgKCA7IChlbGVtID0gdGhpc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3NcclxuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xyXG5cdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RDaGlsZCApIHtcclxuXHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCBlbGVtLmZpcnN0Q2hpbGQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHNlbGVjdCwgZW5zdXJlIHRoYXQgaXQgZGlzcGxheXMgZW1wdHkgKCMxMjMzNilcclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0XHRpZiAoIGVsZW0ub3B0aW9ucyAmJiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwic2VsZWN0XCIgKSApIHtcclxuXHRcdFx0XHRlbGVtLm9wdGlvbnMubGVuZ3RoID0gMDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xyXG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxID9cclxuXHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MLnJlcGxhY2UoIHJpbmxpbmVqUXVlcnksIFwiXCIgKSA6XHJcblx0XHRcdFx0XHR1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcclxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXHJcblx0XHRcdFx0KCBzdXBwb3J0Lmh0bWxTZXJpYWxpemUgfHwgIXJub3NoaW1jYWNoZS50ZXN0KCB2YWx1ZSApICApICYmXHJcblx0XHRcdFx0KCBzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlIHx8ICFybGVhZGluZ1doaXRlc3BhY2UudGVzdCggdmFsdWUgKSApICYmXHJcblx0XHRcdFx0IXdyYXBNYXBbIChydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcclxuXHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGZvciAoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3NcclxuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbaV0gfHwge307XHJcblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcclxuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxyXG5cdFx0XHRcdH0gY2F0Y2goZSkge31cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XHJcblx0XHRcdH1cclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1sgMCBdO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxyXG5cdFx0dGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xyXG5cclxuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcclxuXHJcblx0XHRcdGlmICggYXJnICkge1xyXG5cdFx0XHRcdGFyZy5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxyXG5cdFx0cmV0dXJuIGFyZyAmJiAoYXJnLmxlbmd0aCB8fCBhcmcubm9kZVR5cGUpID8gdGhpcyA6IHRoaXMucmVtb3ZlKCk7XHJcblx0fSxcclxuXHJcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoIHNlbGVjdG9yLCB0cnVlICk7XHJcblx0fSxcclxuXHJcblx0ZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCBjYWxsYmFjayApIHtcclxuXHJcblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXHJcblx0XHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xyXG5cclxuXHRcdHZhciBmaXJzdCwgbm9kZSwgaGFzU2NyaXB0cyxcclxuXHRcdFx0c2NyaXB0cywgZG9jLCBmcmFnbWVudCxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0c2V0ID0gdGhpcyxcclxuXHRcdFx0aU5vQ2xvbmUgPSBsIC0gMSxcclxuXHRcdFx0dmFsdWUgPSBhcmdzWzBdLFxyXG5cdFx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XHJcblxyXG5cdFx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XHJcblx0XHRpZiAoIGlzRnVuY3Rpb24gfHxcclxuXHRcdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxyXG5cdFx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGluZGV4ICkge1xyXG5cdFx0XHRcdHZhciBzZWxmID0gc2V0LmVxKCBpbmRleCApO1xyXG5cdFx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcclxuXHRcdFx0XHRcdGFyZ3NbMF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c2VsZi5kb21NYW5pcCggYXJncywgY2FsbGJhY2sgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBsICkge1xyXG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcclxuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG5cclxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcclxuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGZpcnN0ICkge1xyXG5cdFx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcclxuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW0gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXHJcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcclxuXHRcdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxyXG5cdFx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggdGhpc1tpXSwgbm9kZSwgaSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xyXG5cdFx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXHJcblx0XHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxyXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XHJcblx0XHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdCFqUXVlcnkuX2RhdGEoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiYgalF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggKCBub2RlLnRleHQgfHwgbm9kZS50ZXh0Q29udGVudCB8fCBub2RlLmlubmVySFRNTCB8fCBcIlwiICkucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEZpeCAjMTE4MDk6IEF2b2lkIGxlYWtpbmcgbWVtb3J5XHJcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdCA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goe1xyXG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxyXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXHJcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxyXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXHJcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBlbGVtcyxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdHJldCA9IFtdLFxyXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXHJcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMTtcclxuXHJcblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xyXG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSh0cnVlKTtcclxuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbaV0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcclxuXHJcblx0XHRcdC8vIE1vZGVybiBicm93c2VycyBjYW4gYXBwbHkgalF1ZXJ5IGNvbGxlY3Rpb25zIGFzIGFycmF5cywgYnV0IG9sZElFIG5lZWRzIGEgLmdldCgpXHJcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxuXHJcbnZhciBpZnJhbWUsXHJcblx0ZWxlbWRpc3BsYXkgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XHJcbiAqL1xyXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxyXG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XHJcblx0dmFyIHN0eWxlLFxyXG5cdFx0ZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxyXG5cclxuXHRcdC8vIGdldERlZmF1bHRDb21wdXRlZFN0eWxlIG1pZ2h0IGJlIHJlbGlhYmx5IHVzZWQgb25seSBvbiBhdHRhY2hlZCBlbGVtZW50XHJcblx0XHRkaXNwbGF5ID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlICYmICggc3R5bGUgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoIGVsZW1bIDAgXSApICkgP1xyXG5cclxuXHRcdFx0Ly8gVXNlIG9mIHRoaXMgbWV0aG9kIGlzIGEgdGVtcG9yYXJ5IGZpeCAobW9yZSBsaWtlIG9wdG1pemF0aW9uKSB1bnRpbCBzb21ldGhpbmcgYmV0dGVyIGNvbWVzIGFsb25nLFxyXG5cdFx0XHQvLyBzaW5jZSBpdCB3YXMgcmVtb3ZlZCBmcm9tIHNwZWNpZmljYXRpb24gYW5kIHN1cHBvcnRlZCBvbmx5IGluIEZGXHJcblx0XHRcdHN0eWxlLmRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxyXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XHJcblx0ZWxlbS5kZXRhY2goKTtcclxuXHJcblx0cmV0dXJuIGRpc3BsYXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcclxuICovXHJcbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcclxuXHR2YXIgZG9jID0gZG9jdW1lbnQsXHJcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XHJcblxyXG5cdGlmICggIWRpc3BsYXkgKSB7XHJcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xyXG5cclxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxyXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxyXG5cdFx0XHRpZnJhbWUgPSAoaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSkuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcclxuXHJcblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxyXG5cdFx0XHRkb2MgPSAoIGlmcmFtZVsgMCBdLmNvbnRlbnRXaW5kb3cgfHwgaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50ICkuZG9jdW1lbnQ7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0XHRkb2Mud3JpdGUoKTtcclxuXHRcdFx0ZG9jLmNsb3NlKCk7XHJcblxyXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xyXG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XHJcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGlzcGxheTtcclxufVxyXG5cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHR2YXIgc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcclxuXHJcblx0c3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIHNocmlua1dyYXBCbG9ja3NWYWwgIT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gV2lsbCBiZSBjaGFuZ2VkIGxhdGVyIGlmIG5lZWRlZC5cclxuXHRcdHNocmlua1dyYXBCbG9ja3NWYWwgPSBmYWxzZTtcclxuXHJcblx0XHQvLyBNaW5pZmllZDogdmFyIGIsYyxkXHJcblx0XHR2YXIgZGl2LCBib2R5LCBjb250YWluZXI7XHJcblxyXG5cdFx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XHJcblx0XHRpZiAoICFib2R5IHx8ICFib2R5LnN0eWxlICkge1xyXG5cdFx0XHQvLyBUZXN0IGZpcmVkIHRvbyBlYXJseSBvciBpbiBhbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudCwgZXhpdC5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldHVwXHJcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcclxuXHRcdGJvZHkuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTZcclxuXHRcdC8vIENoZWNrIGlmIGVsZW1lbnRzIHdpdGggbGF5b3V0IHNocmluay13cmFwIHRoZWlyIGNoaWxkcmVuXHJcblx0XHRpZiAoIHR5cGVvZiBkaXYuc3R5bGUuem9vbSAhPT0gc3RydW5kZWZpbmVkICkge1xyXG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyXHJcblx0XHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXHJcblx0XHRcdFx0XCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7XCIgK1xyXG5cdFx0XHRcdFwicGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xyXG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLnN0eWxlLndpZHRoID0gXCI1cHhcIjtcclxuXHRcdFx0c2hyaW5rV3JhcEJsb2Nrc1ZhbCA9IGRpdi5vZmZzZXRXaWR0aCAhPT0gMztcclxuXHRcdH1cclxuXHJcblx0XHRib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHRyZXR1cm4gc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcclxuXHR9O1xyXG5cclxufSkoKTtcclxudmFyIHJtYXJnaW4gPSAoL15tYXJnaW4vKTtcclxuXHJcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcclxuXHJcblxyXG5cclxudmFyIGdldFN0eWxlcywgY3VyQ1NTLFxyXG5cdHJwb3NpdGlvbiA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLztcclxuXHJcbmlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XHJcblx0Z2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxyXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXHJcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcclxuXHRcdGlmICggZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm9wZW5lciApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XHJcblx0fTtcclxuXHJcblx0Y3VyQ1NTID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xyXG5cdFx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcclxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xyXG5cclxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3XHJcblx0XHRyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xyXG5cclxuXHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcclxuXHRcdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxyXG5cdFx0XHQvLyBDaHJvbWUgPCAxNyBhbmQgU2FmYXJpIDUuMCB1c2VzIFwiY29tcHV0ZWQgdmFsdWVcIiBpbnN0ZWFkIG9mIFwidXNlZCB2YWx1ZVwiIGZvciBtYXJnaW4tcmlnaHRcclxuXHRcdFx0Ly8gU2FmYXJpIDUuMS43IChhdCBsZWFzdCkgcmV0dXJucyBwZXJjZW50YWdlIGZvciBhIGxhcmdlciBzZXQgb2YgdmFsdWVzLCBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzXHJcblx0XHRcdC8vIHRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzogaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xyXG5cdFx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG5cdFx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XHJcblx0XHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcclxuXHRcdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xyXG5cclxuXHRcdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XHJcblx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xyXG5cdFx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xyXG5cclxuXHRcdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXHJcblx0XHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcclxuXHRcdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xyXG5cdFx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cclxuXHRcdHJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdHJldCA6XHJcblx0XHRcdHJldCArIFwiXCI7XHJcblx0fTtcclxufSBlbHNlIGlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSApIHtcclxuXHRnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcclxuXHR9O1xyXG5cclxuXHRjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XHJcblx0XHR2YXIgbGVmdCwgcnMsIHJzTGVmdCwgcmV0LFxyXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdFx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHRcdHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWRbIG5hbWUgXSA6IHVuZGVmaW5lZDtcclxuXHJcblx0XHQvLyBBdm9pZCBzZXR0aW5nIHJldCB0byBlbXB0eSBzdHJpbmcgaGVyZVxyXG5cdFx0Ly8gc28gd2UgZG9uJ3QgZGVmYXVsdCB0byBhdXRvXHJcblx0XHRpZiAoIHJldCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlWyBuYW1lIF0gKSB7XHJcblx0XHRcdHJldCA9IHN0eWxlWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRnJvbSB0aGUgYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1xyXG5cdFx0Ly8gaHR0cDovL2VyaWsuZWFlLm5ldC9hcmNoaXZlcy8yMDA3LzA3LzI3LzE4LjU0LjE1LyNjb21tZW50LTEwMjI5MVxyXG5cclxuXHRcdC8vIElmIHdlJ3JlIG5vdCBkZWFsaW5nIHdpdGggYSByZWd1bGFyIHBpeGVsIG51bWJlclxyXG5cdFx0Ly8gYnV0IGEgbnVtYmVyIHRoYXQgaGFzIGEgd2VpcmQgZW5kaW5nLCB3ZSBuZWVkIHRvIGNvbnZlcnQgaXQgdG8gcGl4ZWxzXHJcblx0XHQvLyBidXQgbm90IHBvc2l0aW9uIGNzcyBhdHRyaWJ1dGVzLCBhcyB0aG9zZSBhcmUgcHJvcG9ydGlvbmFsIHRvIHRoZSBwYXJlbnQgZWxlbWVudCBpbnN0ZWFkXHJcblx0XHQvLyBhbmQgd2UgY2FuJ3QgbWVhc3VyZSB0aGUgcGFyZW50IGluc3RlYWQgYmVjYXVzZSBpdCBtaWdodCB0cmlnZ2VyIGEgXCJzdGFja2luZyBkb2xsc1wiIHByb2JsZW1cclxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmICFycG9zaXRpb24udGVzdCggbmFtZSApICkge1xyXG5cclxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG5cdFx0XHRsZWZ0ID0gc3R5bGUubGVmdDtcclxuXHRcdFx0cnMgPSBlbGVtLnJ1bnRpbWVTdHlsZTtcclxuXHRcdFx0cnNMZWZ0ID0gcnMgJiYgcnMubGVmdDtcclxuXHJcblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcclxuXHRcdFx0aWYgKCByc0xlZnQgKSB7XHJcblx0XHRcdFx0cnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XHJcblx0XHRcdH1cclxuXHRcdFx0c3R5bGUubGVmdCA9IG5hbWUgPT09IFwiZm9udFNpemVcIiA/IFwiMWVtXCIgOiByZXQ7XHJcblx0XHRcdHJldCA9IHN0eWxlLnBpeGVsTGVmdCArIFwicHhcIjtcclxuXHJcblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcclxuXHRcdFx0c3R5bGUubGVmdCA9IGxlZnQ7XHJcblx0XHRcdGlmICggcnNMZWZ0ICkge1xyXG5cdFx0XHRcdHJzLmxlZnQgPSByc0xlZnQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cclxuXHRcdHJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdHJldCA6XHJcblx0XHRcdHJldCArIFwiXCIgfHwgXCJhdXRvXCI7XHJcblx0fTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xyXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXHJcblx0cmV0dXJuIHtcclxuXHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBjb25kaXRpb24gPSBjb25kaXRpb25GbigpO1xyXG5cclxuXHRcdFx0aWYgKCBjb25kaXRpb24gPT0gbnVsbCApIHtcclxuXHRcdFx0XHQvLyBUaGUgdGVzdCB3YXMgbm90IHJlYWR5IGF0IHRoaXMgcG9pbnQ7IHNjcmV3IHRoZSBob29rIHRoaXMgdGltZVxyXG5cdFx0XHRcdC8vIGJ1dCBjaGVjayBhZ2FpbiB3aGVuIG5lZWRlZCBuZXh0IHRpbWUuXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGNvbmRpdGlvbiApIHtcclxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWUgdG8gbWlzc2luZyBkZXBlbmRlbmN5KSxcclxuXHRcdFx0XHQvLyByZW1vdmUgaXQuXHJcblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgYXJlIG5vIG90aGVyIGhvb2tzIGZvciBtYXJnaW5SaWdodCwgcmVtb3ZlIHRoZSB3aG9sZSBvYmplY3QuXHJcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXHJcblxyXG5cdFx0XHRyZXR1cm4gKHRoaXMuZ2V0ID0gaG9va0ZuKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHQvLyBNaW5pZmllZDogdmFyIGIsYyxkLGUsZixnLCBoLGlcclxuXHR2YXIgZGl2LCBzdHlsZSwgYSwgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsXHJcblx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwsIHJlbGlhYmxlTWFyZ2luUmlnaHRWYWw7XHJcblxyXG5cdC8vIFNldHVwXHJcblx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiO1xyXG5cdGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYVwiIClbIDAgXTtcclxuXHRzdHlsZSA9IGEgJiYgYS5zdHlsZTtcclxuXHJcblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcclxuXHRpZiAoICFzdHlsZSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHN0eWxlLmNzc1RleHQgPSBcImZsb2F0OmxlZnQ7b3BhY2l0eTouNVwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgZWxlbWVudCBvcGFjaXR5IGV4aXN0cyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXIpXHJcblx0c3VwcG9ydC5vcGFjaXR5ID0gc3R5bGUub3BhY2l0eSA9PT0gXCIwLjVcIjtcclxuXHJcblx0Ly8gVmVyaWZ5IHN0eWxlIGZsb2F0IGV4aXN0ZW5jZVxyXG5cdC8vIChJRSB1c2VzIHN0eWxlRmxvYXQgaW5zdGVhZCBvZiBjc3NGbG9hdClcclxuXHRzdXBwb3J0LmNzc0Zsb2F0ID0gISFzdHlsZS5jc3NGbG9hdDtcclxuXHJcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xyXG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XHJcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcclxuXHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcclxuXHRzdXBwb3J0LmJveFNpemluZyA9IHN0eWxlLmJveFNpemluZyA9PT0gXCJcIiB8fCBzdHlsZS5Nb3pCb3hTaXppbmcgPT09IFwiXCIgfHxcclxuXHRcdHN0eWxlLldlYmtpdEJveFNpemluZyA9PT0gXCJcIjtcclxuXHJcblx0alF1ZXJ5LmV4dGVuZChzdXBwb3J0LCB7XHJcblx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbDtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XHJcblx0XHR9LFxyXG5cclxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0cmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggcmVsaWFibGVNYXJnaW5SaWdodFZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luUmlnaHRWYWw7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xyXG5cdFx0Ly8gTWluaWZpZWQ6IHZhciBiLGMsZCxqXHJcblx0XHR2YXIgZGl2LCBib2R5LCBjb250YWluZXIsIGNvbnRlbnRzO1xyXG5cclxuXHRcdGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJib2R5XCIgKVsgMCBdO1xyXG5cdFx0aWYgKCAhYm9keSB8fCAhYm9keS5zdHlsZSApIHtcclxuXHRcdFx0Ly8gVGVzdCBmaXJlZCB0b28gZWFybHkgb3IgaW4gYW4gdW5zdXBwb3J0ZWQgZW52aXJvbm1lbnQsIGV4aXQuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXR1cFxyXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCI7XHJcblx0XHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XHJcblxyXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxyXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xyXG5cdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcclxuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXHJcblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxJTt0b3A6MSU7XCIgK1xyXG5cdFx0XHRcImJvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NHB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0Ly8gQXNzdW1lIHJlYXNvbmFibGUgdmFsdWVzIGluIHRoZSBhYnNlbmNlIG9mIGdldENvbXB1dGVkU3R5bGVcclxuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBib3hTaXppbmdSZWxpYWJsZVZhbCA9IGZhbHNlO1xyXG5cdFx0cmVsaWFibGVNYXJnaW5SaWdodFZhbCA9IHRydWU7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIGdldENvbXB1dGVkU3R5bGUgc28gdGhhdCB0aGlzIGNvZGUgaXMgbm90IHJ1biBpbiBJRTw5LlxyXG5cdFx0aWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcclxuXHRcdFx0cGl4ZWxQb3NpdGlvblZhbCA9ICggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiwgbnVsbCApIHx8IHt9ICkudG9wICE9PSBcIjElXCI7XHJcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID1cclxuXHRcdFx0XHQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKSB8fCB7IHdpZHRoOiBcIjRweFwiIH0gKS53aWR0aCA9PT0gXCI0cHhcIjtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcblx0XHRcdC8vIERpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcclxuXHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyICgjMzMzMylcclxuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XHJcblx0XHRcdGNvbnRlbnRzID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcclxuXHJcblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcclxuXHRcdFx0Y29udGVudHMuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXHJcblx0XHRcdFx0XCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XHJcblx0XHRcdGNvbnRlbnRzLnN0eWxlLm1hcmdpblJpZ2h0ID0gY29udGVudHMuc3R5bGUud2lkdGggPSBcIjBcIjtcclxuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcclxuXHJcblx0XHRcdHJlbGlhYmxlTWFyZ2luUmlnaHRWYWwgPVxyXG5cdFx0XHRcdCFwYXJzZUZsb2F0KCAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBjb250ZW50cywgbnVsbCApIHx8IHt9ICkubWFyZ2luUmlnaHQgKTtcclxuXHJcblx0XHRcdGRpdi5yZW1vdmVDaGlsZCggY29udGVudHMgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdC8vIENoZWNrIGlmIHRhYmxlIGNlbGxzIHN0aWxsIGhhdmUgb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdGhleSBhcmUgc2V0XHJcblx0XHQvLyB0byBkaXNwbGF5Om5vbmUgYW5kIHRoZXJlIGFyZSBzdGlsbCBvdGhlciB2aXNpYmxlIHRhYmxlIGNlbGxzIGluIGFcclxuXHRcdC8vIHRhYmxlIHJvdzsgaWYgc28sIG9mZnNldFdpZHRoL0hlaWdodCBhcmUgbm90IHJlbGlhYmxlIGZvciB1c2Ugd2hlblxyXG5cdFx0Ly8gZGV0ZXJtaW5pbmcgaWYgYW4gZWxlbWVudCBoYXMgYmVlbiBoaWRkZW4gZGlyZWN0bHkgdXNpbmdcclxuXHRcdC8vIGRpc3BsYXk6bm9uZSAoaXQgaXMgc3RpbGwgc2FmZSB0byB1c2Ugb2Zmc2V0cyBpZiBhIHBhcmVudCBlbGVtZW50IGlzXHJcblx0XHQvLyBoaWRkZW47IGRvbiBzYWZldHkgZ29nZ2xlcyBhbmQgc2VlIGJ1ZyAjNDUxMiBmb3IgbW9yZSBpbmZvcm1hdGlvbikuXHJcblx0XHRkaXYuaW5uZXJIVE1MID0gXCI8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+XCI7XHJcblx0XHRjb250ZW50cyA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0ZFwiICk7XHJcblx0XHRjb250ZW50c1sgMCBdLnN0eWxlLmNzc1RleHQgPSBcIm1hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MDtkaXNwbGF5Om5vbmVcIjtcclxuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwO1xyXG5cdFx0aWYgKCByZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgKSB7XHJcblx0XHRcdGNvbnRlbnRzWyAwIF0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XHJcblx0XHRcdGNvbnRlbnRzWyAxIF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cdFx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgPSBjb250ZW50c1sgMCBdLm9mZnNldEhlaWdodCA9PT0gMDtcclxuXHRcdH1cclxuXHJcblx0XHRib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHR9XHJcblxyXG59KSgpO1xyXG5cclxuXHJcbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXHJcbmpRdWVyeS5zd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdHZhciByZXQsIG5hbWUsXHJcblx0XHRvbGQgPSB7fTtcclxuXHJcblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXHJcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XHJcblx0fVxyXG5cclxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xyXG5cclxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcclxuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5cclxudmFyXHJcblx0XHRyYWxwaGEgPSAvYWxwaGFcXChbXildKlxcKS9pLFxyXG5cdHJvcGFjaXR5ID0gL29wYWNpdHlcXHMqPVxccyooW14pXSopLyxcclxuXHJcblx0Ly8gc3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcclxuXHQvLyBzZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcclxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXHJcblx0cm51bXNwbGl0ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXHJcblx0cnJlbE51bSA9IG5ldyBSZWdFeHAoIFwiXihbKy1dKT0oXCIgKyBwbnVtICsgXCIpXCIsIFwiaVwiICksXHJcblxyXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxyXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcclxuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxyXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxyXG5cdH0sXHJcblxyXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF07XHJcblxyXG5cclxuLy8gcmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxyXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG5hbWUgKSB7XHJcblxyXG5cdC8vIHNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXHJcblx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG5cclxuXHQvLyBjaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXHJcblx0dmFyIGNhcE5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSxcclxuXHRcdG9yaWdOYW1lID0gbmFtZSxcclxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XHJcblxyXG5cdHdoaWxlICggaS0tICkge1xyXG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xyXG5cdFx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm4gbmFtZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBvcmlnTmFtZTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xyXG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXHJcblx0XHR2YWx1ZXMgPSBbXSxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcclxuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcclxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XHJcblx0XHRpZiAoIHNob3cgKSB7XHJcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcclxuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxyXG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XHJcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxyXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xyXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XHJcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgZGVmYXVsdERpc3BsYXkoZWxlbS5ub2RlTmFtZSkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTtcclxuXHJcblx0XHRcdGlmICggZGlzcGxheSAmJiBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xyXG5cdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXHJcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xyXG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XHJcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XHJcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1lbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xyXG5cdHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XHJcblx0cmV0dXJuIG1hdGNoZXMgP1xyXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3NcclxuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxyXG5cdFx0dmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcclxuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xyXG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXHJcblx0XHQ0IDpcclxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcclxuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxyXG5cclxuXHRcdHZhbCA9IDA7XHJcblxyXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcclxuXHRcdC8vIGJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcclxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xyXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcclxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XHJcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xyXG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xyXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblxyXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXHJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xyXG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdmFsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcclxuXHJcblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcclxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXHJcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXHJcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcclxuXHRcdGlzQm9yZGVyQm94ID0gc3VwcG9ydC5ib3hTaXppbmcgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcclxuXHJcblx0Ly8gc29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXHJcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XHJcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XHJcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxyXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcclxuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXHJcblx0XHRpZiAoIHJudW1ub25weC50ZXN0KHZhbCkgKSB7XHJcblx0XHRcdHJldHVybiB2YWw7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gd2UgbmVlZCB0aGUgY2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcclxuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcclxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJiAoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xyXG5cclxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcclxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XHJcblx0fVxyXG5cclxuXHQvLyB1c2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xyXG5cdHJldHVybiAoIHZhbCArXHJcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0ZWxlbSxcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxyXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxyXG5cdFx0XHRzdHlsZXNcclxuXHRcdClcclxuXHQpICsgXCJweFwiO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcclxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcclxuXHRjc3NIb29rczoge1xyXG5cdFx0b3BhY2l0eToge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcclxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcclxuXHRjc3NOdW1iZXI6IHtcclxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcclxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcclxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxyXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXHJcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcclxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxyXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxyXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXHJcblx0XHRcIndpZG93c1wiOiB0cnVlLFxyXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcclxuXHRcdFwiem9vbVwiOiB0cnVlXHJcblx0fSxcclxuXHJcblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxyXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcclxuXHRjc3NQcm9wczoge1xyXG5cdFx0Ly8gbm9ybWFsaXplIGZsb2F0IGNzcyBwcm9wZXJ0eVxyXG5cdFx0XCJmbG9hdFwiOiBzdXBwb3J0LmNzc0Zsb2F0ID8gXCJjc3NGbG9hdFwiIDogXCJzdHlsZUZsb2F0XCJcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxyXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xyXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXHJcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxyXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBzdHlsZSwgb3JpZ05hbWUgKSApO1xyXG5cclxuXHRcdC8vIGdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb25cclxuXHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG5cclxuXHRcdFx0Ly8gY29udmVydCByZWxhdGl2ZSBudW1iZXIgc3RyaW5ncyAoKz0gb3IgLT0pIHRvIHJlbGF0aXZlIG51bWJlcnMuICM3MzQ1XHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAocmV0ID0gcnJlbE51bS5leGVjKCB2YWx1ZSApKSApIHtcclxuXHRcdFx0XHR2YWx1ZSA9ICggcmV0WzFdICsgMSApICogcmV0WzJdICsgcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApICk7XHJcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XHJcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldC4gU2VlOiAjNzExNlxyXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSApIHtcclxuXHRcdFx0XHR2YWx1ZSArPSBcInB4XCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEZpeGVzICM4OTA4LCBpdCBjYW4gYmUgZG9uZSBtb3JlIGNvcnJlY3RseSBieSBzcGVjaWZpbmcgc2V0dGVycyBpbiBjc3NIb29rcyxcclxuXHRcdFx0Ly8gYnV0IGl0IHdvdWxkIG1lYW4gdG8gZGVmaW5lIGVpZ2h0IChmb3IgZXZlcnkgcHJvYmxlbWF0aWMgcHJvcGVydHkpIGlkZW50aWNhbCBmdW5jdGlvbnNcclxuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKFwiYmFja2dyb3VuZFwiKSA9PT0gMCApIHtcclxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxyXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8ICh2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHRcdFx0Ly8gU3dhbGxvdyBlcnJvcnMgZnJvbSAnaW52YWxpZCcgQ1NTIHZhbHVlcyAoIzU1MDkpXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0XHR9IGNhdGNoKGUpIHt9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XHJcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XHJcblx0XHR2YXIgbnVtLCB2YWwsIGhvb2tzLFxyXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcclxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggZWxlbS5zdHlsZSwgb3JpZ05hbWUgKSApO1xyXG5cclxuXHRcdC8vIGdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb25cclxuXHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xyXG5cclxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XHJcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxyXG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL2NvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxyXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XHJcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJldHVybiwgY29udmVydGluZyB0byBudW1iZXIgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcclxuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XHJcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xyXG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcclxuXHRcdH1cclxuXHRcdHJldHVybiB2YWw7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5lYWNoKFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xyXG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdC8vIGNlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxyXG5cdFx0XHRcdC8vIGhvd2V2ZXIsIGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXQgZnJvbSB0aGlzXHJcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiYgZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XHJcblx0XHRcdFx0XHRqUXVlcnkuc3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XHJcblx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgP1xyXG5cdFx0XHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0XHRleHRyYSxcclxuXHRcdFx0XHRcdHN1cHBvcnQuYm94U2l6aW5nICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHRzdHlsZXNcclxuXHRcdFx0XHQpIDogMFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH07XHJcbn0pO1xyXG5cclxuaWYgKCAhc3VwcG9ydC5vcGFjaXR5ICkge1xyXG5cdGpRdWVyeS5jc3NIb29rcy5vcGFjaXR5ID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdC8vIElFIHVzZXMgZmlsdGVycyBmb3Igb3BhY2l0eVxyXG5cdFx0XHRyZXR1cm4gcm9wYWNpdHkudGVzdCggKGNvbXB1dGVkICYmIGVsZW0uY3VycmVudFN0eWxlID8gZWxlbS5jdXJyZW50U3R5bGUuZmlsdGVyIDogZWxlbS5zdHlsZS5maWx0ZXIpIHx8IFwiXCIgKSA/XHJcblx0XHRcdFx0KCAwLjAxICogcGFyc2VGbG9hdCggUmVnRXhwLiQxICkgKSArIFwiXCIgOlxyXG5cdFx0XHRcdGNvbXB1dGVkID8gXCIxXCIgOiBcIlwiO1xyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHN0eWxlID0gZWxlbS5zdHlsZSxcclxuXHRcdFx0XHRjdXJyZW50U3R5bGUgPSBlbGVtLmN1cnJlbnRTdHlsZSxcclxuXHRcdFx0XHRvcGFjaXR5ID0galF1ZXJ5LmlzTnVtZXJpYyggdmFsdWUgKSA/IFwiYWxwaGEob3BhY2l0eT1cIiArIHZhbHVlICogMTAwICsgXCIpXCIgOiBcIlwiLFxyXG5cdFx0XHRcdGZpbHRlciA9IGN1cnJlbnRTdHlsZSAmJiBjdXJyZW50U3R5bGUuZmlsdGVyIHx8IHN0eWxlLmZpbHRlciB8fCBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gSUUgaGFzIHRyb3VibGUgd2l0aCBvcGFjaXR5IGlmIGl0IGRvZXMgbm90IGhhdmUgbGF5b3V0XHJcblx0XHRcdC8vIEZvcmNlIGl0IGJ5IHNldHRpbmcgdGhlIHpvb20gbGV2ZWxcclxuXHRcdFx0c3R5bGUuem9vbSA9IDE7XHJcblxyXG5cdFx0XHQvLyBpZiBzZXR0aW5nIG9wYWNpdHkgdG8gMSwgYW5kIG5vIG90aGVyIGZpbHRlcnMgZXhpc3QgLSBhdHRlbXB0IHRvIHJlbW92ZSBmaWx0ZXIgYXR0cmlidXRlICM2NjUyXHJcblx0XHRcdC8vIGlmIHZhbHVlID09PSBcIlwiLCB0aGVuIHJlbW92ZSBpbmxpbmUgb3BhY2l0eSAjMTI2ODVcclxuXHRcdFx0aWYgKCAoIHZhbHVlID49IDEgfHwgdmFsdWUgPT09IFwiXCIgKSAmJlxyXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIFwiXCIgKSApID09PSBcIlwiICYmXHJcblx0XHRcdFx0XHRzdHlsZS5yZW1vdmVBdHRyaWJ1dGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNldHRpbmcgc3R5bGUuZmlsdGVyIHRvIG51bGwsIFwiXCIgJiBcIiBcIiBzdGlsbCBsZWF2ZSBcImZpbHRlcjpcIiBpbiB0aGUgY3NzVGV4dFxyXG5cdFx0XHRcdC8vIGlmIFwiZmlsdGVyOlwiIGlzIHByZXNlbnQgYXQgYWxsLCBjbGVhclR5cGUgaXMgZGlzYWJsZWQsIHdlIHdhbnQgdG8gYXZvaWQgdGhpc1xyXG5cdFx0XHRcdC8vIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSBpcyBJRSBPbmx5LCBidXQgc28gYXBwYXJlbnRseSBpcyB0aGlzIGNvZGUgcGF0aC4uLlxyXG5cdFx0XHRcdHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSggXCJmaWx0ZXJcIiApO1xyXG5cclxuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBmaWx0ZXIgc3R5bGUgYXBwbGllZCBpbiBhIGNzcyBydWxlIG9yIHVuc2V0IGlubGluZSBvcGFjaXR5LCB3ZSBhcmUgZG9uZVxyXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgfHwgY3VycmVudFN0eWxlICYmICFjdXJyZW50U3R5bGUuZmlsdGVyICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gb3RoZXJ3aXNlLCBzZXQgbmV3IGZpbHRlciB2YWx1ZXNcclxuXHRcdFx0c3R5bGUuZmlsdGVyID0gcmFscGhhLnRlc3QoIGZpbHRlciApID9cclxuXHRcdFx0XHRmaWx0ZXIucmVwbGFjZSggcmFscGhhLCBvcGFjaXR5ICkgOlxyXG5cdFx0XHRcdGZpbHRlciArIFwiIFwiICsgb3BhY2l0eTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcclxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcclxuXHRcdFx0Ly8gV29yayBhcm91bmQgYnkgdGVtcG9yYXJpbHkgc2V0dGluZyBlbGVtZW50IGRpc3BsYXkgdG8gaW5saW5lLWJsb2NrXHJcblx0XHRcdHJldHVybiBqUXVlcnkuc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxyXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xyXG5cdFx0fVxyXG5cdH1cclxuKTtcclxuXHJcbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcclxualF1ZXJ5LmVhY2goe1xyXG5cdG1hcmdpbjogXCJcIixcclxuXHRwYWRkaW5nOiBcIlwiLFxyXG5cdGJvcmRlcjogXCJXaWR0aFwiXHJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcclxuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xyXG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHZhciBpID0gMCxcclxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxyXG5cclxuXHRcdFx0XHQvLyBhc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcclxuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiIFwiKSA6IFsgdmFsdWUgXTtcclxuXHJcblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcclxuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XHJcblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBleHBhbmRlZDtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xyXG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcclxuXHRcdFx0XHRtYXAgPSB7fSxcclxuXHRcdFx0XHRpID0gMDtcclxuXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gbWFwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcclxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XHJcblx0fSxcclxuXHRoaWRlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xyXG5cdH0sXHJcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XHJcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xyXG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XHJcbn1cclxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XHJcblxyXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XHJcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxyXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcclxuXHRcdHRoaXMuZWxlbSA9IGVsZW07XHJcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xyXG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgXCJzd2luZ1wiO1xyXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XHJcblx0XHR0aGlzLmVuZCA9IGVuZDtcclxuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XHJcblx0fSxcclxuXHRjdXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cclxuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxyXG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XHJcblx0fSxcclxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xyXG5cdFx0dmFyIGVhc2VkLFxyXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XHJcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxyXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxyXG5cdFx0XHQpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XHJcblx0XHR9XHJcblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcclxuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xyXG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxufTtcclxuXHJcblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcclxuXHJcblR3ZWVuLnByb3BIb29rcyA9IHtcclxuXHRfZGVmYXVsdDoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRcdHZhciByZXN1bHQ7XHJcblxyXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmXHJcblx0XHRcdFx0KCF0d2Vlbi5lbGVtLnN0eWxlIHx8IHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBwYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcclxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlsc1xyXG5cdFx0XHQvLyBzbywgc2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQuXHJcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMgaXMuXHJcblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcclxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXHJcblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cdFx0XHQvLyB1c2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdCAtIHVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZSAtIHVzZSAuc3R5bGUgaWYgaXRzXHJcblx0XHRcdC8vIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlXHJcblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcclxuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLnN0eWxlICYmICggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8IGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLy8gU3VwcG9ydDogSUUgPD05XHJcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xyXG5cclxuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xyXG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5lYXNpbmcgPSB7XHJcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcclxuXHRcdHJldHVybiBwO1xyXG5cdH0sXHJcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xyXG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcclxuXHJcbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XHJcbmpRdWVyeS5meC5zdGVwID0ge307XHJcblxyXG5cclxuXHJcblxyXG52YXJcclxuXHRmeE5vdywgdGltZXJJZCxcclxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcclxuXHRyZnhudW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApLFxyXG5cdHJydW4gPSAvcXVldWVIb29rcyQvLFxyXG5cdGFuaW1hdGlvblByZWZpbHRlcnMgPSBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcclxuXHR0d2VlbmVycyA9IHtcclxuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKSxcclxuXHRcdFx0XHR0YXJnZXQgPSB0d2Vlbi5jdXIoKSxcclxuXHRcdFx0XHRwYXJ0cyA9IHJmeG51bS5leGVjKCB2YWx1ZSApLFxyXG5cdFx0XHRcdHVuaXQgPSBwYXJ0cyAmJiBwYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxyXG5cclxuXHRcdFx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xyXG5cdFx0XHRcdHN0YXJ0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICt0YXJnZXQgKSAmJlxyXG5cdFx0XHRcdFx0cmZ4bnVtLmV4ZWMoIGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHByb3AgKSApLFxyXG5cdFx0XHRcdHNjYWxlID0gMSxcclxuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMjA7XHJcblxyXG5cdFx0XHRpZiAoIHN0YXJ0ICYmIHN0YXJ0WyAzIF0gIT09IHVuaXQgKSB7XHJcblx0XHRcdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xyXG5cdFx0XHRcdHVuaXQgPSB1bml0IHx8IHN0YXJ0WyAzIF07XHJcblxyXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cclxuXHRcdFx0XHRwYXJ0cyA9IHBhcnRzIHx8IFtdO1xyXG5cclxuXHRcdFx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxyXG5cdFx0XHRcdHN0YXJ0ID0gK3RhcmdldCB8fCAxO1xyXG5cclxuXHRcdFx0XHRkbyB7XHJcblx0XHRcdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKlxyXG5cdFx0XHRcdFx0Ly8gVXNlIGEgc3RyaW5nIGZvciBkb3VibGluZyBmYWN0b3Igc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcclxuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xyXG5cclxuXHRcdFx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcclxuXHRcdFx0XHRcdHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTtcclxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XHJcblxyXG5cdFx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXHJcblx0XHRcdFx0Ly8gQW5kIGJyZWFraW5nIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcclxuXHRcdFx0XHR9IHdoaWxlICggc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVXBkYXRlIHR3ZWVuIHByb3BlcnRpZXNcclxuXHRcdFx0aWYgKCBwYXJ0cyApIHtcclxuXHRcdFx0XHRzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDtcclxuXHRcdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcclxuXHRcdFx0XHQvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb25cclxuXHRcdFx0XHR0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID9cclxuXHRcdFx0XHRcdHN0YXJ0ICsgKCBwYXJ0c1sgMSBdICsgMSApICogcGFydHNbIDIgXSA6XHJcblx0XHRcdFx0XHQrcGFydHNbIDIgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0fSBdXHJcblx0fTtcclxuXHJcbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcclxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XHJcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xyXG5cdH0pO1xyXG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XHJcbn1cclxuXHJcbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXHJcbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XHJcblx0dmFyIHdoaWNoLFxyXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9LFxyXG5cdFx0aSA9IDA7XHJcblxyXG5cdC8vIGlmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcclxuXHQvLyBpZiB3ZSBkb24ndCBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XHJcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XHJcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XHJcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xyXG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBhdHRycztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XHJcblx0dmFyIHR3ZWVuLFxyXG5cdFx0Y29sbGVjdGlvbiA9ICggdHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggdHdlZW5lcnNbIFwiKlwiIF0gKSxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xyXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHtcclxuXHJcblx0XHRcdC8vIHdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XHJcblx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xyXG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXHJcblx0XHRhbmltID0gdGhpcyxcclxuXHRcdG9yaWcgPSB7fSxcclxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcclxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcclxuXHRcdGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImZ4c2hvd1wiICk7XHJcblxyXG5cdC8vIGhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcclxuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xyXG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xyXG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xyXG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XHJcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xyXG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XHJcblx0XHRcdFx0XHRvbGRmaXJlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0aG9va3MudW5xdWV1ZWQrKztcclxuXHJcblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gZG9pbmcgdGhpcyBtYWtlcyBzdXJlIHRoYXQgdGhlIGNvbXBsZXRlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWRcclxuXHRcdFx0Ly8gYmVmb3JlIHRoaXMgY29tcGxldGVzXHJcblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XHJcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Ly8gaGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3NcclxuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XHJcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90XHJcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcclxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXHJcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcclxuXHJcblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxyXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxyXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcclxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cclxuXHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xyXG5cclxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcclxuXHJcblx0XHRcdC8vIGlubGluZS1sZXZlbCBlbGVtZW50cyBhY2NlcHQgaW5saW5lLWJsb2NrO1xyXG5cdFx0XHQvLyBibG9jay1sZXZlbCBlbGVtZW50cyBuZWVkIHRvIGJlIGlubGluZSB3aXRoIGxheW91dFxyXG5cdFx0XHRpZiAoICFzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA9PT0gXCJpbmxpbmVcIiApIHtcclxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzdHlsZS56b29tID0gMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xyXG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG5cdFx0aWYgKCAhc3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzKCkgKSB7XHJcblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xyXG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcclxuXHRcdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gc2hvdy9oaWRlIHBhc3NcclxuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xyXG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcclxuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xyXG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvdyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cclxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcclxuXHJcblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcclxuXHRcdGlmICggZGF0YVNob3cgKSB7XHJcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcclxuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcclxuXHRcdGlmICggdG9nZ2xlICkge1xyXG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgcHJvcDtcclxuXHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBcImZ4c2hvd1wiICk7XHJcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcclxuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcclxuXHJcblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xyXG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcclxuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcclxuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcclxuXHR9IGVsc2UgaWYgKCAoZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSkgPT09IFwiaW5saW5lXCIgKSB7XHJcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xyXG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XHJcblxyXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xyXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xyXG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XHJcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XHJcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcclxuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcclxuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XHJcblx0XHR9XHJcblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcclxuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gbm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbnQgb3ZlcndyaXRlIGtleXMgYWxyZWFkeSBwcmVzZW50LlxyXG5cdFx0XHQvLyBhbHNvIC0gcmV1c2luZyAnaW5kZXgnIGZyb20gYWJvdmUgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXHJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcclxuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XHJcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xyXG5cdHZhciByZXN1bHQsXHJcblx0XHRzdG9wcGVkLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsXHJcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIGRvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxyXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xyXG5cdFx0fSksXHJcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggc3RvcHBlZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXHJcblx0XHRcdFx0Ly8gYXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIDEgLSAoIDAuNSB8fCAwICkgKCMxMjQ5NylcclxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXHJcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxyXG5cdFx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcclxuXHJcblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XHJcblxyXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XHJcblx0XHRcdGVsZW06IGVsZW0sXHJcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxyXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcclxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxyXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXHJcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXHJcblx0XHRcdHR3ZWVuczogW10sXHJcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xyXG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcclxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcclxuXHRcdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHRcdH0sXHJcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXHJcblx0XHRcdFx0XHQvLyBpZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcclxuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxyXG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcclxuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XHJcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gcmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZVxyXG5cdFx0XHRcdC8vIG90aGVyd2lzZSwgcmVqZWN0XHJcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fVxyXG5cdFx0fSksXHJcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcclxuXHJcblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcclxuXHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRyZXN1bHQgPSBhbmltYXRpb25QcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XHJcblx0XHRpZiAoIHJlc3VsdCApIHtcclxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XHJcblxyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XHJcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5meC50aW1lcihcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcclxuXHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxyXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcclxuXHRcdH0pXHJcblx0KTtcclxuXHJcblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcclxuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXHJcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxyXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxyXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XHJcbn1cclxuXHJcbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcclxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcclxuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcclxuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiIFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcHJvcCxcclxuXHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XHJcblxyXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdFx0dHdlZW5lcnNbIHByb3AgXSA9IHR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XHJcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcclxuXHRcdGlmICggcHJlcGVuZCApIHtcclxuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XHJcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xyXG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcclxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXHJcblx0XHRkdXJhdGlvbjogc3BlZWQsXHJcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcclxuXHR9O1xyXG5cclxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgPyBvcHQuZHVyYXRpb24gOlxyXG5cdFx0b3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XHJcblxyXG5cdC8vIG5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxyXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xyXG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xyXG5cdH1cclxuXHJcblx0Ly8gUXVldWVpbmdcclxuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xyXG5cclxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcclxuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XHJcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gb3B0O1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdC8vIHNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcclxuXHJcblx0XHRcdC8vIGFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxyXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fSxcclxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxyXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXHJcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3RcclxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XHJcblxyXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxyXG5cdFx0XHRcdGlmICggZW1wdHkgfHwgalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XHJcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xyXG5cclxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cclxuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcclxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xyXG5cdH0sXHJcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XHJcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xyXG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XHJcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xyXG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xyXG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcclxuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxyXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcclxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxyXG5cdFx0XHRcdGRhdGEgPSBqUXVlcnkuX2RhdGEoIHRoaXMgKTtcclxuXHJcblx0XHRcdGlmICggaW5kZXggKSB7XHJcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcclxuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xyXG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XHJcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcclxuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmICh0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlKSApIHtcclxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcclxuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBzdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkXHJcblx0XHRcdC8vIHRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2ggd2lsbCBkZXF1ZXVlXHJcblx0XHRcdC8vIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kXHJcblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcclxuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgaW5kZXgsXHJcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggdGhpcyApLFxyXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxyXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXHJcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XHJcblxyXG5cdFx0XHQvLyBlbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXHJcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcclxuXHJcblx0XHRcdC8vIGVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxyXG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XHJcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGxvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXHJcblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XHJcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XHJcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XHJcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcclxuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyB0dXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xyXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cclxuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcclxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xyXG5qUXVlcnkuZWFjaCh7XHJcblx0c2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXHJcblx0c2xpZGVVcDogZ2VuRngoXCJoaWRlXCIpLFxyXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeChcInRvZ2dsZVwiKSxcclxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcclxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXHJcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cclxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fTtcclxufSk7XHJcblxyXG5qUXVlcnkudGltZXJzID0gW107XHJcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIHRpbWVyLFxyXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdGkgPSAwO1xyXG5cclxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcclxuXHJcblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcclxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxyXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XHJcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeS5meC5zdG9wKCk7XHJcblx0fVxyXG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xyXG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcclxuXHRpZiAoIHRpbWVyKCkgKSB7XHJcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcclxuXHJcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmICggIXRpbWVySWQgKSB7XHJcblx0XHR0aW1lcklkID0gc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdGNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcclxuXHR0aW1lcklkID0gbnVsbDtcclxufTtcclxuXHJcbmpRdWVyeS5meC5zcGVlZHMgPSB7XHJcblx0c2xvdzogNjAwLFxyXG5cdGZhc3Q6IDIwMCxcclxuXHQvLyBEZWZhdWx0IHNwZWVkXHJcblx0X2RlZmF1bHQ6IDQwMFxyXG59O1xyXG5cclxuXHJcbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cclxuLy8gaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xyXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcclxuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xyXG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcclxuXHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xyXG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuXHRcdH07XHJcblx0fSk7XHJcbn07XHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdC8vIE1pbmlmaWVkOiB2YXIgYSxiLGMsZCxlXHJcblx0dmFyIGlucHV0LCBkaXYsIHNlbGVjdCwgYSwgb3B0O1xyXG5cclxuXHQvLyBTZXR1cFxyXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHRkaXYuc2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiLCBcInRcIiApO1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiO1xyXG5cdGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWyAwIF07XHJcblxyXG5cdC8vIEZpcnN0IGJhdGNoIG9mIHRlc3RzLlxyXG5cdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcblx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpICk7XHJcblx0aW5wdXQgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKVsgMCBdO1xyXG5cclxuXHRhLnN0eWxlLmNzc1RleHQgPSBcInRvcDoxcHhcIjtcclxuXHJcblx0Ly8gVGVzdCBzZXRBdHRyaWJ1dGUgb24gY2FtZWxDYXNlIGNsYXNzLiBJZiBpdCB3b3Jrcywgd2UgbmVlZCBhdHRyRml4ZXMgd2hlbiBkb2luZyBnZXQvc2V0QXR0cmlidXRlIChpZTYvNylcclxuXHRzdXBwb3J0LmdldFNldEF0dHJpYnV0ZSA9IGRpdi5jbGFzc05hbWUgIT09IFwidFwiO1xyXG5cclxuXHQvLyBHZXQgdGhlIHN0eWxlIGluZm9ybWF0aW9uIGZyb20gZ2V0QXR0cmlidXRlXHJcblx0Ly8gKElFIHVzZXMgLmNzc1RleHQgaW5zdGVhZClcclxuXHRzdXBwb3J0LnN0eWxlID0gL3RvcC8udGVzdCggYS5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKSApO1xyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBVUkxzIGFyZW4ndCBtYW5pcHVsYXRlZFxyXG5cdC8vIChJRSBub3JtYWxpemVzIGl0IGJ5IGRlZmF1bHQpXHJcblx0c3VwcG9ydC5ocmVmTm9ybWFsaXplZCA9IGEuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIvYVwiO1xyXG5cclxuXHQvLyBDaGVjayB0aGUgZGVmYXVsdCBjaGVja2JveC9yYWRpbyB2YWx1ZSAoXCJcIiBvbiBXZWJLaXQ7IFwib25cIiBlbHNld2hlcmUpXHJcblx0c3VwcG9ydC5jaGVja09uID0gISFpbnB1dC52YWx1ZTtcclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgYSBzZWxlY3RlZC1ieS1kZWZhdWx0IG9wdGlvbiBoYXMgYSB3b3JraW5nIHNlbGVjdGVkIHByb3BlcnR5LlxyXG5cdC8vIChXZWJLaXQgZGVmYXVsdHMgdG8gZmFsc2UgaW5zdGVhZCBvZiB0cnVlLCBJRSB0b28sIGlmIGl0J3MgaW4gYW4gb3B0Z3JvdXApXHJcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcclxuXHJcblx0Ly8gVGVzdHMgZm9yIGVuY3R5cGUgc3VwcG9ydCBvbiBhIGZvcm0gKCM2NzQzKVxyXG5cdHN1cHBvcnQuZW5jdHlwZSA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIikuZW5jdHlwZTtcclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIG9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlbid0IG1hcmtlZCBhcyBkaXNhYmxlZFxyXG5cdC8vIChXZWJLaXQgbWFya3MgdGhlbSBhcyBkaXNhYmxlZClcclxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xyXG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTggb25seVxyXG5cdC8vIENoZWNrIGlmIHdlIGNhbiB0cnVzdCBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxyXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcclxuXHRzdXBwb3J0LmlucHV0ID0gaW5wdXQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcclxuXHJcblx0Ly8gQ2hlY2sgaWYgYW4gaW5wdXQgbWFpbnRhaW5zIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXHJcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcclxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcclxuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XHJcbn0pKCk7XHJcblxyXG5cclxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxyXG5cdFx0XHRlbGVtID0gdGhpc1swXTtcclxuXHJcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0XHQvLyBoYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXHJcblx0XHRcdFx0XHRyZXQucmVwbGFjZShycmV0dXJuLCBcIlwiKSA6XHJcblx0XHRcdFx0XHQvLyBoYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHR2YXIgdmFsO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFsID0gdmFsdWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcclxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHR2YWwgPSBcIlwiO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xyXG5cdFx0XHRcdHZhbCArPSBcIlwiO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XHJcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xyXG5cclxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcclxuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0dmFsSG9va3M6IHtcclxuXHRcdG9wdGlvbjoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcclxuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xyXG5cdFx0XHRcdFx0dmFsIDpcclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXHJcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXHJcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0c2VsZWN0OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sXHJcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxyXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXHJcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcclxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcclxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxyXG5cdFx0XHRcdFx0aSA9IGluZGV4IDwgMCA/XHJcblx0XHRcdFx0XHRcdG1heCA6XHJcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcclxuXHJcblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xyXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xyXG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdC8vIG9sZElFIGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxyXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXHJcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxyXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT09IG51bGwgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xyXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XHJcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxyXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID49IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTZcclxuXHRcdFx0XHRcdFx0Ly8gV2hlbiBuZXcgb3B0aW9uIGVsZW1lbnQgaXMgYWRkZWQgdG8gc2VsZWN0IGJveCB3ZSBuZWVkIHRvXHJcblx0XHRcdFx0XHRcdC8vIGZvcmNlIHJlZmxvdyBvZiBuZXdseSBhZGRlZCBub2RlIGluIG9yZGVyIHRvIHdvcmthcm91bmQgZGVsYXlcclxuXHRcdFx0XHRcdFx0Ly8gb2YgaW5pdGlhbGl6YXRpb24gcHJvcGVydGllc1xyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IG9wdGlvblNldCA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0XHR9IGNhdGNoICggXyApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gV2lsbCBiZSBleGVjdXRlZCBvbmx5IGluIElFNlxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbi5zY3JvbGxIZWlnaHQ7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XHJcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gb3B0aW9ucztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeShlbGVtKS52YWwoKSwgdmFsdWUgKSA+PSAwICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcclxuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBTdXBwb3J0OiBXZWJraXRcclxuXHRcdFx0Ly8gXCJcIiBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIFwib25cIiBpZiBhIHZhbHVlIGlzbid0IHNwZWNpZmllZFxyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XHJcblx0XHR9O1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgbm9kZUhvb2ssIGJvb2xIb29rLFxyXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlLFxyXG5cdHJ1c2VEZWZhdWx0ID0gL14oPzpjaGVja2VkfHNlbGVjdGVkKSQvaSxcclxuXHRnZXRTZXRBdHRyaWJ1dGUgPSBzdXBwb3J0LmdldFNldEF0dHJpYnV0ZSxcclxuXHRnZXRTZXRJbnB1dCA9IHN1cHBvcnQuaW5wdXQ7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciBob29rcywgcmV0LFxyXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdFx0Ly8gZG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xyXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gc3RydW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxyXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxyXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XHJcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xyXG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xyXG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxyXG5cdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgP1xyXG5cdFx0XHRcdHVuZGVmaW5lZCA6XHJcblx0XHRcdFx0cmV0O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcclxuXHJcblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHR3aGlsZSAoIChuYW1lID0gYXR0ck5hbWVzW2krK10pICkge1xyXG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xyXG5cclxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50ICgjMTA4NzApXHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXHJcblx0XHRcdFx0XHRpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRcdFx0XHQvLyBBbHNvIGNsZWFyIGRlZmF1bHRDaGVja2VkL2RlZmF1bHRTZWxlY3RlZCAoaWYgYXBwcm9wcmlhdGUpXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA9XHJcblx0XHRcdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTZWUgIzk2OTkgZm9yIGV4cGxhbmF0aW9uIG9mIHRoaXMgYXBwcm9hY2ggKHNldHRpbmcgZmlyc3QsIHRoZW4gcmVtb3ZhbClcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmF0dHIoIGVsZW0sIG5hbWUsIFwiXCIgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBnZXRTZXRBdHRyaWJ1dGUgPyBuYW1lIDogcHJvcE5hbWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGF0dHJIb29rczoge1xyXG5cdFx0dHlwZToge1xyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJiBqUXVlcnkubm9kZU5hbWUoZWxlbSwgXCJpbnB1dFwiKSApIHtcclxuXHRcdFx0XHRcdC8vIFNldHRpbmcgdGhlIHR5cGUgb24gYSByYWRpbyBidXR0b24gYWZ0ZXIgdGhlIHZhbHVlIHJlc2V0cyB0aGUgdmFsdWUgaW4gSUU2LTlcclxuXHRcdFx0XHRcdC8vIFJlc2V0IHZhbHVlIHRvIGRlZmF1bHQgaW4gY2FzZSB0eXBlIGlzIHNldCBhZnRlciB2YWx1ZSBkdXJpbmcgY3JlYXRpb25cclxuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xyXG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIEhvb2sgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xyXG5ib29sSG9vayA9IHtcclxuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcclxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xyXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9IGVsc2UgaWYgKCBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHtcclxuXHRcdFx0Ly8gSUU8OCBuZWVkcyB0aGUgKnByb3BlcnR5KiBuYW1lXHJcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCAhZ2V0U2V0QXR0cmlidXRlICYmIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSwgbmFtZSApO1xyXG5cclxuXHRcdC8vIFVzZSBkZWZhdWx0Q2hlY2tlZCBhbmQgZGVmYXVsdFNlbGVjdGVkIGZvciBvbGRJRVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggXCJkZWZhdWx0LVwiICsgbmFtZSApIF0gPSBlbGVtWyBuYW1lIF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBuYW1lO1xyXG5cdH1cclxufTtcclxuXHJcbi8vIFJldHJpZXZlIGJvb2xlYW5zIHNwZWNpYWxseVxyXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblxyXG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcclxuXHJcblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZ2V0U2V0SW5wdXQgJiYgZ2V0U2V0QXR0cmlidXRlIHx8ICFydXNlRGVmYXVsdC50ZXN0KCBuYW1lICkgP1xyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0XHR2YXIgcmV0LCBoYW5kbGU7XHJcblx0XHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcclxuXHRcdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XHJcblx0XHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xyXG5cdFx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cclxuXHRcdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0XHRudWxsO1xyXG5cdFx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fSA6XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA/XHJcblx0XHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxyXG5cdFx0XHRcdFx0bnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxufSk7XHJcblxyXG4vLyBmaXggb2xkSUUgYXR0cm9wZXJ0aWVzXHJcbmlmICggIWdldFNldElucHV0IHx8ICFnZXRTZXRBdHRyaWJ1dGUgKSB7XHJcblx0alF1ZXJ5LmF0dHJIb29rcy52YWx1ZSA9IHtcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XHJcblx0XHRcdFx0Ly8gRG9lcyBub3QgcmV0dXJuIHNvIHRoYXQgc2V0QXR0cmlidXRlIGlzIGFsc28gdXNlZFxyXG5cdFx0XHRcdGVsZW0uZGVmYXVsdFZhbHVlID0gdmFsdWU7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gVXNlIG5vZGVIb29rIGlmIGRlZmluZWQgKCMxOTU0KTsgb3RoZXJ3aXNlIHNldEF0dHJpYnV0ZSBpcyBmaW5lXHJcblx0XHRcdFx0cmV0dXJuIG5vZGVIb29rICYmIG5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbi8vIElFNi83IGRvIG5vdCBzdXBwb3J0IGdldHRpbmcvc2V0dGluZyBzb21lIGF0dHJpYnV0ZXMgd2l0aCBnZXQvc2V0QXR0cmlidXRlXHJcbmlmICggIWdldFNldEF0dHJpYnV0ZSApIHtcclxuXHJcblx0Ly8gVXNlIHRoaXMgZm9yIGFueSBhdHRyaWJ1dGUgaW4gSUU2LzdcclxuXHQvLyBUaGlzIGZpeGVzIGFsbW9zdCBldmVyeSBJRTYvNyBpc3N1ZVxyXG5cdG5vZGVIb29rID0ge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XHJcblx0XHRcdC8vIFNldCB0aGUgZXhpc3Rpbmcgb3IgY3JlYXRlIGEgbmV3IGF0dHJpYnV0ZSBub2RlXHJcblx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcclxuXHRcdFx0aWYgKCAhcmV0ICkge1xyXG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlTm9kZShcclxuXHRcdFx0XHRcdChyZXQgPSBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKCBuYW1lICkpXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0LnZhbHVlID0gdmFsdWUgKz0gXCJcIjtcclxuXHJcblx0XHRcdC8vIEJyZWFrIGFzc29jaWF0aW9uIHdpdGggY2xvbmVkIGVsZW1lbnRzIGJ5IGFsc28gdXNpbmcgc2V0QXR0cmlidXRlICgjOTY0NilcclxuXHRcdFx0aWYgKCBuYW1lID09PSBcInZhbHVlXCIgfHwgdmFsdWUgPT09IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly8gU29tZSBhdHRyaWJ1dGVzIGFyZSBjb25zdHJ1Y3RlZCB3aXRoIGVtcHR5LXN0cmluZyB2YWx1ZXMgd2hlbiBub3QgZGVmaW5lZFxyXG5cdGF0dHJIYW5kbGUuaWQgPSBhdHRySGFuZGxlLm5hbWUgPSBhdHRySGFuZGxlLmNvb3JkcyA9XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRcdHZhciByZXQ7XHJcblx0XHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRcdHJldHVybiAocmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHJldC52YWx1ZSAhPT0gXCJcIiA/XHJcblx0XHRcdFx0XHRyZXQudmFsdWUgOlxyXG5cdFx0XHRcdFx0bnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0Ly8gRml4aW5nIHZhbHVlIHJldHJpZXZhbCBvbiBhIGJ1dHRvbiByZXF1aXJlcyB0aGlzIG1vZHVsZVxyXG5cdGpRdWVyeS52YWxIb29rcy5idXR0b24gPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0XHR2YXIgcmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICk7XHJcblx0XHRcdGlmICggcmV0ICYmIHJldC5zcGVjaWZpZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldC52YWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdHNldDogbm9kZUhvb2suc2V0XHJcblx0fTtcclxuXHJcblx0Ly8gU2V0IGNvbnRlbnRlZGl0YWJsZSB0byBmYWxzZSBvbiByZW1vdmFscygjMTA0MjkpXHJcblx0Ly8gU2V0dGluZyB0byBlbXB0eSBzdHJpbmcgdGhyb3dzIGFuIGVycm9yIGFzIGFuIGludmFsaWQgdmFsdWVcclxuXHRqUXVlcnkuYXR0ckhvb2tzLmNvbnRlbnRlZGl0YWJsZSA9IHtcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xyXG5cdFx0XHRub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlID09PSBcIlwiID8gZmFsc2UgOiB2YWx1ZSwgbmFtZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIFNldCB3aWR0aCBhbmQgaGVpZ2h0IHRvIGF1dG8gaW5zdGVhZCBvZiAwIG9uIGVtcHR5IHN0cmluZyggQnVnICM4MTUwIClcclxuXHQvLyBUaGlzIGlzIGZvciByZW1vdmFsc1xyXG5cdGpRdWVyeS5lYWNoKFsgXCJ3aWR0aFwiLCBcImhlaWdodFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdFx0alF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdID0ge1xyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcIlwiICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIFwiYXV0b1wiICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0pO1xyXG59XHJcblxyXG5pZiAoICFzdXBwb3J0LnN0eWxlICkge1xyXG5cdGpRdWVyeS5hdHRySG9va3Muc3R5bGUgPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBSZXR1cm4gdW5kZWZpbmVkIGluIHRoZSBjYXNlIG9mIGVtcHR5IHN0cmluZ1xyXG5cdFx0XHQvLyBOb3RlOiBJRSB1cHBlcmNhc2VzIGNzcyBwcm9wZXJ0eSBuYW1lcywgYnV0IGlmIHdlIHdlcmUgdG8gLnRvTG93ZXJDYXNlKClcclxuXHRcdFx0Ly8gLmNzc1RleHQsIHRoYXQgd291bGQgZGVzdHJveSBjYXNlIHNlbnN0aXRpdml0eSBpbiBVUkwncywgbGlrZSBpbiBcImJhY2tncm91bmRcIlxyXG5cdFx0XHRyZXR1cm4gZWxlbS5zdHlsZS5jc3NUZXh0IHx8IHVuZGVmaW5lZDtcclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0cmV0dXJuICggZWxlbS5zdHlsZS5jc3NUZXh0ID0gdmFsdWUgKyBcIlwiICk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuXHJcblxyXG5cclxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSxcclxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xyXG5cdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIHRyeS9jYXRjaCBoYW5kbGVzIGNhc2VzIHdoZXJlIElFIGJhbGtzIChzdWNoIGFzIHJlbW92aW5nIGEgcHJvcGVydHkgb24gd2luZG93KVxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHRoaXNbIG5hbWUgXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRkZWxldGUgdGhpc1sgbmFtZSBdO1xyXG5cdFx0XHR9IGNhdGNoKCBlICkge31cclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRwcm9wRml4OiB7XHJcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcclxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxyXG5cdH0sXHJcblxyXG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciByZXQsIGhvb2tzLCBub3R4bWwsXHJcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0XHQvLyBkb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0bm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApO1xyXG5cclxuXHRcdGlmICggbm90eG1sICkge1xyXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXHJcblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0cmV0IDpcclxuXHRcdFx0XHQoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XHJcblx0XHRcdFx0cmV0IDpcclxuXHRcdFx0XHRlbGVtWyBuYW1lIF07XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHJvcEhvb2tzOiB7XHJcblx0XHR0YWJJbmRleDoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcclxuXHRcdFx0XHQvLyBodHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xyXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXHJcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0YWJpbmRleCA/XHJcblx0XHRcdFx0XHRwYXJzZUludCggdGFiaW5kZXgsIDEwICkgOlxyXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgcmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID9cclxuXHRcdFx0XHRcdFx0MCA6XHJcblx0XHRcdFx0XHRcdC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIFNvbWUgYXR0cmlidXRlcyByZXF1aXJlIGEgc3BlY2lhbCBjYWxsIG9uIElFXHJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcclxuaWYgKCAhc3VwcG9ydC5ocmVmTm9ybWFsaXplZCApIHtcclxuXHQvLyBocmVmL3NyYyBwcm9wZXJ0eSBzaG91bGQgZ2V0IHRoZSBmdWxsIG5vcm1hbGl6ZWQgVVJMICgjMTAyOTkvIzEyOTE1KVxyXG5cdGpRdWVyeS5lYWNoKFsgXCJocmVmXCIsIFwic3JjXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0XHRqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF0gPSB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCA0ICk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IFNhZmFyaSwgSUU5K1xyXG4vLyBtaXMtcmVwb3J0cyB0aGUgZGVmYXVsdCBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBhbiBvcHRpb25cclxuLy8gQWNjZXNzaW5nIHRoZSBwYXJlbnQncyBzZWxlY3RlZEluZGV4IHByb3BlcnR5IGZpeGVzIGl0XHJcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XHJcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblxyXG5cdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgaXQgYWxzbyB3b3JrcyB3aXRoIG9wdGdyb3Vwcywgc2VlICM1NzAxXHJcblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmpRdWVyeS5lYWNoKFtcclxuXHRcInRhYkluZGV4XCIsXHJcblx0XCJyZWFkT25seVwiLFxyXG5cdFwibWF4TGVuZ3RoXCIsXHJcblx0XCJjZWxsU3BhY2luZ1wiLFxyXG5cdFwiY2VsbFBhZGRpbmdcIixcclxuXHRcInJvd1NwYW5cIixcclxuXHRcImNvbFNwYW5cIixcclxuXHRcInVzZU1hcFwiLFxyXG5cdFwiZnJhbWVCb3JkZXJcIixcclxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXHJcbl0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XHJcbn0pO1xyXG5cclxuLy8gSUU2LzcgY2FsbCBlbmN0eXBlIGVuY29kaW5nXHJcbmlmICggIXN1cHBvcnQuZW5jdHlwZSApIHtcclxuXHRqUXVlcnkucHJvcEZpeC5lbmN0eXBlID0gXCJlbmNvZGluZ1wiO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG52YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cHJvY2VlZCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZTtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggcHJvY2VlZCApIHtcclxuXHRcdFx0Ly8gVGhlIGRpc2p1bmN0aW9uIGhlcmUgaXMgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSByZW1vdmVDbGFzcylcclxuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XHJcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cclxuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcclxuXHRcdFx0XHRcdFwiIFwiXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0aWYgKCBjdXIgKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xyXG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZTtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBwcm9jZWVkICkge1xyXG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcclxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxyXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XHJcblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XHJcblx0XHRcdFx0XHRcIlwiXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0aWYgKCBjdXIgKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+PSAwICkge1xyXG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxyXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHZhbHVlID8galF1ZXJ5LnRyaW0oIGN1ciApIDogXCJcIjtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcclxuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGksIHRoaXMuY2xhc3NOYW1lLCBzdGF0ZVZhbCksIHN0YXRlVmFsICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHQvLyB0b2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xyXG5cdFx0XHRcdHZhciBjbGFzc05hbWUsXHJcblx0XHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcclxuXHRcdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHRcdHdoaWxlICggKGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdKSApIHtcclxuXHRcdFx0XHRcdC8vIGNoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxyXG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxyXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBzdHJ1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzLmNsYXNzTmFtZSApIHtcclxuXHRcdFx0XHRcdC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcclxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBcImZhbHNlXCIsXHJcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxyXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cclxuXHRcdFx0XHR0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/IFwiXCIgOiBqUXVlcnkuX2RhdGEoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsID0gdGhpcy5sZW5ndGg7XHJcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoXCIgXCIgKyB0aGlzW2ldLmNsYXNzTmFtZSArIFwiIFwiKS5yZXBsYWNlKHJjbGFzcywgXCIgXCIpLmluZGV4T2YoIGNsYXNzTmFtZSApID49IDAgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cclxuXHJcblxyXG5qUXVlcnkuZWFjaCggKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xyXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xyXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cclxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cclxuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XHJcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XHJcblx0fSxcclxuXHJcblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XHJcblx0fSxcclxuXHJcblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xyXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyB0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDogdGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XHJcblxyXG52YXIgcnF1ZXJ5ID0gKC9cXD8vKTtcclxuXHJcblxyXG5cclxudmFyIHJ2YWxpZHRva2VucyA9IC8oLCl8KFxcW3x7KXwofXxdKXxcIig/OlteXCJcXFxcXFxyXFxuXXxcXFxcW1wiXFxcXFxcL2JmbnJ0XXxcXFxcdVtcXGRhLWZBLUZdezR9KSpcIlxccyo6P3x0cnVlfGZhbHNlfG51bGx8LT8oPyEwXFxkKVxcZCsoPzpcXC5cXGQrfCkoPzpbZUVdWystXT9cXGQrfCkvZztcclxuXHJcbmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHQvLyBBdHRlbXB0IHRvIHBhcnNlIHVzaW5nIHRoZSBuYXRpdmUgSlNPTiBwYXJzZXIgZmlyc3RcclxuXHRpZiAoIHdpbmRvdy5KU09OICYmIHdpbmRvdy5KU09OLnBhcnNlICkge1xyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdC8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XHJcblx0XHRyZXR1cm4gd2luZG93LkpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XHJcblx0fVxyXG5cclxuXHR2YXIgcmVxdWlyZU5vbkNvbW1hLFxyXG5cdFx0ZGVwdGggPSBudWxsLFxyXG5cdFx0c3RyID0galF1ZXJ5LnRyaW0oIGRhdGEgKyBcIlwiICk7XHJcblxyXG5cdC8vIEd1YXJkIGFnYWluc3QgaW52YWxpZCAoYW5kIHBvc3NpYmx5IGRhbmdlcm91cykgaW5wdXQgYnkgZW5zdXJpbmcgdGhhdCBub3RoaW5nIHJlbWFpbnNcclxuXHQvLyBhZnRlciByZW1vdmluZyB2YWxpZCB0b2tlbnNcclxuXHRyZXR1cm4gc3RyICYmICFqUXVlcnkudHJpbSggc3RyLnJlcGxhY2UoIHJ2YWxpZHRva2VucywgZnVuY3Rpb24oIHRva2VuLCBjb21tYSwgb3BlbiwgY2xvc2UgKSB7XHJcblxyXG5cdFx0Ly8gRm9yY2UgdGVybWluYXRpb24gaWYgd2Ugc2VlIGEgbWlzcGxhY2VkIGNvbW1hXHJcblx0XHRpZiAoIHJlcXVpcmVOb25Db21tYSAmJiBjb21tYSApIHtcclxuXHRcdFx0ZGVwdGggPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFBlcmZvcm0gbm8gbW9yZSByZXBsYWNlbWVudHMgYWZ0ZXIgcmV0dXJuaW5nIHRvIG91dGVybW9zdCBkZXB0aFxyXG5cdFx0aWYgKCBkZXB0aCA9PT0gMCApIHtcclxuXHRcdFx0cmV0dXJuIHRva2VuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbW1hcyBtdXN0IG5vdCBmb2xsb3cgXCJbXCIsIFwie1wiLCBvciBcIixcIlxyXG5cdFx0cmVxdWlyZU5vbkNvbW1hID0gb3BlbiB8fCBjb21tYTtcclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgbmV3IGRlcHRoXHJcblx0XHQvLyBhcnJheS9vYmplY3Qgb3BlbiAoXCJbXCIgb3IgXCJ7XCIpOiBkZXB0aCArPSB0cnVlIC0gZmFsc2UgKGluY3JlbWVudClcclxuXHRcdC8vIGFycmF5L29iamVjdCBjbG9zZSAoXCJdXCIgb3IgXCJ9XCIpOiBkZXB0aCArPSBmYWxzZSAtIHRydWUgKGRlY3JlbWVudClcclxuXHRcdC8vIG90aGVyIGNhc2VzIChcIixcIiBvciBwcmltaXRpdmUpOiBkZXB0aCArPSB0cnVlIC0gdHJ1ZSAobnVtZXJpYyBjYXN0KVxyXG5cdFx0ZGVwdGggKz0gIWNsb3NlIC0gIW9wZW47XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoaXMgdG9rZW5cclxuXHRcdHJldHVybiBcIlwiO1xyXG5cdH0pICkgP1xyXG5cdFx0KCBGdW5jdGlvbiggXCJyZXR1cm4gXCIgKyBzdHIgKSApKCkgOlxyXG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgSlNPTjogXCIgKyBkYXRhICk7XHJcbn07XHJcblxyXG5cclxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xyXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHR2YXIgeG1sLCB0bXA7XHJcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHR0cnkge1xyXG5cdFx0aWYgKCB3aW5kb3cuRE9NUGFyc2VyICkgeyAvLyBTdGFuZGFyZFxyXG5cdFx0XHR0bXAgPSBuZXcgRE9NUGFyc2VyKCk7XHJcblx0XHRcdHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xyXG5cdFx0fSBlbHNlIHsgLy8gSUVcclxuXHRcdFx0eG1sID0gbmV3IEFjdGl2ZVhPYmplY3QoIFwiTWljcm9zb2Z0LlhNTERPTVwiICk7XHJcblx0XHRcdHhtbC5hc3luYyA9IFwiZmFsc2VcIjtcclxuXHRcdFx0eG1sLmxvYWRYTUwoIGRhdGEgKTtcclxuXHRcdH1cclxuXHR9IGNhdGNoKCBlICkge1xyXG5cdFx0eG1sID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHRpZiAoICF4bWwgfHwgIXhtbC5kb2N1bWVudEVsZW1lbnQgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XHJcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xyXG5cdH1cclxuXHRyZXR1cm4geG1sO1xyXG59O1xyXG5cclxuXHJcbnZhclxyXG5cdC8vIERvY3VtZW50IGxvY2F0aW9uXHJcblx0YWpheExvY1BhcnRzLFxyXG5cdGFqYXhMb2NhdGlvbixcclxuXHJcblx0cmhhc2ggPSAvIy4qJC8sXHJcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxyXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopXFxyPyQvbWcsIC8vIElFIGxlYXZlcyBhbiBcXHIgY2hhcmFjdGVyIGF0IEVPTFxyXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxyXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXHJcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXHJcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxyXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcclxuXHJcblx0LyogUHJlZmlsdGVyc1xyXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXHJcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcclxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XHJcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxyXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcclxuXHQgKi9cclxuXHRwcmVmaWx0ZXJzID0ge30sXHJcblxyXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3NcclxuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXHJcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxyXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHRyYW5zcG9ydHMgPSB7fSxcclxuXHJcblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXHJcblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KFwiKlwiKTtcclxuXHJcbi8vICM4MTM4LCBJRSBtYXkgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nXHJcbi8vIGEgZmllbGQgZnJvbSB3aW5kb3cubG9jYXRpb24gaWYgZG9jdW1lbnQuZG9tYWluIGhhcyBiZWVuIHNldFxyXG50cnkge1xyXG5cdGFqYXhMb2NhdGlvbiA9IGxvY2F0aW9uLmhyZWY7XHJcbn0gY2F0Y2goIGUgKSB7XHJcblx0Ly8gVXNlIHRoZSBocmVmIGF0dHJpYnV0ZSBvZiBhbiBBIGVsZW1lbnRcclxuXHQvLyBzaW5jZSBJRSB3aWxsIG1vZGlmeSBpdCBnaXZlbiBkb2N1bWVudC5sb2NhdGlvblxyXG5cdGFqYXhMb2NhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XHJcblx0YWpheExvY2F0aW9uLmhyZWYgPSBcIlwiO1xyXG5cdGFqYXhMb2NhdGlvbiA9IGFqYXhMb2NhdGlvbi5ocmVmO1xyXG59XHJcblxyXG4vLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHNcclxuYWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdO1xyXG5cclxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxyXG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcclxuXHJcblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxyXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcclxuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRhdGFUeXBlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcclxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxyXG5cdFx0XHR3aGlsZSAoIChkYXRhVHlwZSA9IGRhdGFUeXBlc1tpKytdKSApIHtcclxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxyXG5cdFx0XHRcdGlmICggZGF0YVR5cGUuY2hhckF0KCAwICkgPT09IFwiK1wiICkge1xyXG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xyXG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkudW5zaGlmdCggZnVuYyApO1xyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnB1c2goIGZ1bmMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcclxuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcclxuXHJcblx0dmFyIGluc3BlY3RlZCA9IHt9LFxyXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XHJcblxyXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xyXG5cdFx0dmFyIHNlbGVjdGVkO1xyXG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcclxuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XHJcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XHJcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xyXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xyXG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcclxufVxyXG5cclxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXHJcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXHJcbi8vIEZpeGVzICM5ODg3XHJcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xyXG5cdHZhciBkZWVwLCBrZXksXHJcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XHJcblxyXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XHJcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKGRlZXAgPSB7fSkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmICggZGVlcCApIHtcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRhcmdldDtcclxufVxyXG5cclxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxyXG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxyXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcclxuICovXHJcbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XHJcblx0dmFyIGZpcnN0RGF0YVR5cGUsIGN0LCBmaW5hbERhdGFUeXBlLCB0eXBlLFxyXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxyXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XHJcblxyXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXHJcblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XHJcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXHJcblx0aWYgKCBjdCApIHtcclxuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XHJcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XHJcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXHJcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcclxuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xyXG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXSBdICkge1xyXG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XHJcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxyXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcclxuXHR9XHJcblxyXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcclxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxyXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcclxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XHJcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xyXG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xyXG5cdH1cclxufVxyXG5cclxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxyXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcclxuICovXHJcbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcclxuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcclxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcclxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cclxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XHJcblxyXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xyXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XHJcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcclxuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHJcblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcclxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XHJcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXHJcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XHJcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByZXYgPSBjdXJyZW50O1xyXG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHRcdGlmICggY3VycmVudCApIHtcclxuXHJcblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cclxuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XHJcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXHJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XHJcblxyXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXHJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcclxuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcclxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XHJcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxyXG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXHJcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cclxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzWyBcInRocm93c1wiIF0gKSB7XHJcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xyXG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnQgfTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHJcblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXHJcblx0YWN0aXZlOiAwLFxyXG5cclxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XHJcblx0bGFzdE1vZGlmaWVkOiB7fSxcclxuXHRldGFnOiB7fSxcclxuXHJcblx0YWpheFNldHRpbmdzOiB7XHJcblx0XHR1cmw6IGFqYXhMb2NhdGlvbixcclxuXHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxyXG5cdFx0Z2xvYmFsOiB0cnVlLFxyXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXHJcblx0XHRhc3luYzogdHJ1ZSxcclxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxyXG5cdFx0LypcclxuXHRcdHRpbWVvdXQ6IDAsXHJcblx0XHRkYXRhOiBudWxsLFxyXG5cdFx0ZGF0YVR5cGU6IG51bGwsXHJcblx0XHR1c2VybmFtZTogbnVsbCxcclxuXHRcdHBhc3N3b3JkOiBudWxsLFxyXG5cdFx0Y2FjaGU6IG51bGwsXHJcblx0XHR0aHJvd3M6IGZhbHNlLFxyXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxyXG5cdFx0aGVhZGVyczoge30sXHJcblx0XHQqL1xyXG5cclxuXHRcdGFjY2VwdHM6IHtcclxuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxyXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcclxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcclxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcclxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxyXG5cdFx0fSxcclxuXHJcblx0XHRjb250ZW50czoge1xyXG5cdFx0XHR4bWw6IC94bWwvLFxyXG5cdFx0XHRodG1sOiAvaHRtbC8sXHJcblx0XHRcdGpzb246IC9qc29uL1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZXNwb25zZUZpZWxkczoge1xyXG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcclxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcclxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcclxuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2VcclxuXHRcdGNvbnZlcnRlcnM6IHtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxyXG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXHJcblxyXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcclxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcclxuXHJcblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cclxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcclxuXHJcblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXHJcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XHJcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXHJcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxyXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXHJcblx0XHRmbGF0T3B0aW9uczoge1xyXG5cdFx0XHR1cmw6IHRydWUsXHJcblx0XHRcdGNvbnRleHQ6IHRydWVcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxyXG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cclxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxyXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XHJcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xyXG5cclxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3RcclxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxyXG5cclxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xyXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcclxuXHR9LFxyXG5cclxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcclxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcclxuXHJcblx0Ly8gTWFpbiBtZXRob2RcclxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xyXG5cclxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXHJcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdG9wdGlvbnMgPSB1cmw7XHJcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxyXG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG5cdFx0dmFyIC8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFyc1xyXG5cdFx0XHRwYXJ0cyxcclxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxyXG5cdFx0XHRpLFxyXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXHJcblx0XHRcdGNhY2hlVVJMLFxyXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzIGFzIHN0cmluZ1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXHJcblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXHJcblx0XHRcdHRpbWVvdXRUaW1lcixcclxuXHJcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxyXG5cdFx0XHRmaXJlR2xvYmFscyxcclxuXHJcblx0XHRcdHRyYW5zcG9ydCxcclxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXHJcblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3RcclxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXHJcblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XHJcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxyXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXHJcblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJiAoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xyXG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxyXG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcclxuXHRcdFx0Ly8gRGVmZXJyZWRzXHJcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXHJcblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXHJcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXHJcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcclxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXHJcblx0XHRcdHN0YXRlID0gMCxcclxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXHJcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxyXG5cdFx0XHQvLyBGYWtlIHhoclxyXG5cdFx0XHRqcVhIUiA9IHtcclxuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxyXG5cclxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XHJcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XHJcblx0XHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xyXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXHJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XHJcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xyXG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XHJcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xyXG5cdFx0XHRcdFx0dmFyIGNvZGU7XHJcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XHJcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXHJcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXHJcblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xyXG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XHJcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXHJcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XHJcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcclxuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcclxuXHJcblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcclxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKCM1ODY2OiBJRTcgaXNzdWUgd2l0aCBwcm90b2NvbC1sZXNzIHVybHMpXHJcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxyXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXHJcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKS5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgXCIvL1wiICk7XHJcblxyXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XHJcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xyXG5cclxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3RcclxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHJcblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gd2UgaGF2ZSBhIHByb3RvY29sOmhvc3Q6cG9ydCBtaXNtYXRjaFxyXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XHJcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XHJcblx0XHRcdHMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiZcclxuXHRcdFx0XHQoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8XHJcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cclxuXHRcdFx0XHRcdFx0KCBhamF4TG9jUGFydHNbIDMgXSB8fCAoIGFqYXhMb2NQYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSApXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXHJcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xyXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcclxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybiBqcVhIUjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xyXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcclxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xyXG5cclxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcclxuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcclxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XHJcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcclxuXHJcblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2VcclxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxyXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcclxuXHJcblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxyXG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxyXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcclxuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xyXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcclxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXHJcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcclxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcclxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxyXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcclxuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XHJcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcclxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcclxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXHJcblx0XHRcdFwiQWNjZXB0XCIsXHJcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID9cclxuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxyXG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxyXG5cdFx0KTtcclxuXHJcblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cclxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xyXG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcclxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmICggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcclxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXHJcblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxyXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XHJcblxyXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXHJcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XHJcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEdldCB0cmFuc3BvcnRcclxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxyXG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xyXG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XHJcblxyXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIFRpbWVvdXRcclxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XHJcblx0XHRcdFx0dGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcclxuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRzdGF0ZSA9IDE7XHJcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcclxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcclxuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XHJcblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXHJcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcclxuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcclxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcclxuXHJcblx0XHRcdC8vIENhbGxlZCBvbmNlXHJcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcclxuXHRcdFx0c3RhdGUgPSAyO1xyXG5cclxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcclxuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XHJcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cclxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcclxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XHJcblxyXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxyXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xyXG5cclxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcclxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XHJcblxyXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxyXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcclxuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxyXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xyXG5cclxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXHJcblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKTtcclxuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xyXG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcclxuXHJcblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXHJcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xyXG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBXZSBleHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dFxyXG5cdFx0XHRcdC8vIHRoZW4gbm9ybWFsaXplIHN0YXR1c1RleHQgYW5kIHN0YXR1cyBmb3Igbm9uLWFib3J0c1xyXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XHJcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxyXG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3JcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXHJcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb21wbGV0ZVxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XHJcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXHJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpxWEhSO1xyXG5cdH0sXHJcblxyXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XHJcblx0fSxcclxuXHJcblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcclxuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XHJcblx0XHQvLyBzaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcclxuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xyXG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBqUXVlcnkuYWpheCh7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHR0eXBlOiBtZXRob2QsXHJcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxyXG5cdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xyXG5cdFx0fSk7XHJcblx0fTtcclxufSk7XHJcblxyXG5cclxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xyXG5cdFx0dXJsOiB1cmwsXHJcblx0XHR0eXBlOiBcIkdFVFwiLFxyXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXHJcblx0XHRhc3luYzogZmFsc2UsXHJcblx0XHRnbG9iYWw6IGZhbHNlLFxyXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxyXG5cdH0pO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHtcclxuXHRcdFx0XHRqUXVlcnkodGhpcykud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpc1swXSApIHtcclxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcclxuXHRcdFx0dmFyIHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbMF0ub3duZXJEb2N1bWVudCApLmVxKDApLmNsb25lKHRydWUpO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzWzBdLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbMF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0d3JhcC5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RDaGlsZCAmJiBlbGVtLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdENoaWxkO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGVsZW07XHJcblx0XHRcdH0pLmFwcGVuZCggdGhpcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkge1xyXG5cdFx0XHRcdGpRdWVyeSh0aGlzKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxyXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xyXG5cclxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHtcclxuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCh0aGlzLCBpKSA6IGh0bWwgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9KS5lbmQoKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcclxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXHJcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwIHx8XHJcblx0XHQoIXN1cHBvcnQucmVsaWFibGVIaWRkZW5PZmZzZXRzKCkgJiZcclxuXHRcdFx0KChlbGVtLnN0eWxlICYmIGVsZW0uc3R5bGUuZGlzcGxheSkgfHwgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSkgPT09IFwibm9uZVwiKTtcclxufTtcclxuXHJcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByMjAgPSAvJTIwL2csXHJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXHJcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxyXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcclxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XHJcblxyXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XHJcblx0dmFyIG5hbWU7XHJcblxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xyXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXHJcblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcclxuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcclxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXHJcblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXHJcblx0XHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiA/IGkgOiBcIlwiICkgKyBcIl1cIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXHJcblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxyXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcclxualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xyXG5cdHZhciBwcmVmaXgsXHJcblx0XHRzID0gW10sXHJcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcclxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXHJcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XHJcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxyXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cclxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xyXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXHJcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XHJcblx0XHR9KTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXHJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cclxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xyXG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxyXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xyXG5cdH0sXHJcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXHJcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcclxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XHJcblx0XHR9KVxyXG5cdFx0LmZpbHRlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XHJcblx0XHRcdC8vIFVzZSAuaXMoXCI6ZGlzYWJsZWRcIikgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3NcclxuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxyXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcclxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XHJcblx0XHR9KVxyXG5cdFx0Lm1hcChmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cclxuXHRcdFx0XHRudWxsIDpcclxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0eyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0fSkuZ2V0KCk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG4vLyBDcmVhdGUgdGhlIHJlcXVlc3Qgb2JqZWN0XHJcbi8vIChUaGlzIGlzIHN0aWxsIGF0dGFjaGVkIHRvIGFqYXhTZXR0aW5ncyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcclxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCAhPT0gdW5kZWZpbmVkID9cclxuXHQvLyBTdXBwb3J0OiBJRTYrXHJcblx0ZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0Ly8gWEhSIGNhbm5vdCBhY2Nlc3MgbG9jYWwgZmlsZXMsIGFsd2F5cyB1c2UgQWN0aXZlWCBmb3IgdGhhdCBjYXNlXHJcblx0XHRyZXR1cm4gIXRoaXMuaXNMb2NhbCAmJlxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU3LThcclxuXHRcdFx0Ly8gb2xkSUUgWEhSIGRvZXMgbm90IHN1cHBvcnQgbm9uLVJGQzI2MTYgbWV0aG9kcyAoIzEzMjQwKVxyXG5cdFx0XHQvLyBTZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL21zNTM2NjQ4KHY9dnMuODUpLmFzcHhcclxuXHRcdFx0Ly8gYW5kIGh0dHA6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjOS5odG1sI3NlYzlcclxuXHRcdFx0Ly8gQWx0aG91Z2ggdGhpcyBjaGVjayBmb3Igc2l4IG1ldGhvZHMgaW5zdGVhZCBvZiBlaWdodFxyXG5cdFx0XHQvLyBzaW5jZSBJRSBhbHNvIGRvZXMgbm90IHN1cHBvcnQgXCJ0cmFjZVwiIGFuZCBcImNvbm5lY3RcIlxyXG5cdFx0XHQvXihnZXR8cG9zdHxoZWFkfHB1dHxkZWxldGV8b3B0aW9ucykkL2kudGVzdCggdGhpcy50eXBlICkgJiZcclxuXHJcblx0XHRcdGNyZWF0ZVN0YW5kYXJkWEhSKCkgfHwgY3JlYXRlQWN0aXZlWEhSKCk7XHJcblx0fSA6XHJcblx0Ly8gRm9yIGFsbCBvdGhlciBicm93c2VycywgdXNlIHRoZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdCBvYmplY3RcclxuXHRjcmVhdGVTdGFuZGFyZFhIUjtcclxuXHJcbnZhciB4aHJJZCA9IDAsXHJcblx0eGhyQ2FsbGJhY2tzID0ge30sXHJcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFPDEwXHJcbi8vIE9wZW4gcmVxdWVzdHMgbXVzdCBiZSBtYW51YWxseSBhYm9ydGVkIG9uIHVubG9hZCAoIzUyODApXHJcbi8vIFNlZSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yODU2NzQ2IGZvciBtb3JlIGluZm9cclxuaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XHJcblx0d2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG5cdFx0Zm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7XHJcblx0XHRcdHhockNhbGxiYWNrc1sga2V5IF0oIHVuZGVmaW5lZCwgdHJ1ZSApO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBEZXRlcm1pbmUgc3VwcG9ydCBwcm9wZXJ0aWVzXHJcbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcclxueGhyU3VwcG9ydGVkID0gc3VwcG9ydC5hamF4ID0gISF4aHJTdXBwb3J0ZWQ7XHJcblxyXG4vLyBDcmVhdGUgdHJhbnNwb3J0IGlmIHRoZSBicm93c2VyIGNhbiBwcm92aWRlIGFuIHhoclxyXG5pZiAoIHhoclN1cHBvcnRlZCApIHtcclxuXHJcblx0alF1ZXJ5LmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblx0XHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XHJcblx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluIHx8IHN1cHBvcnQuY29ycyApIHtcclxuXHJcblx0XHRcdHZhciBjYWxsYmFjaztcclxuXHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xyXG5cdFx0XHRcdFx0dmFyIGksXHJcblx0XHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCksXHJcblx0XHRcdFx0XHRcdGlkID0gKyt4aHJJZDtcclxuXHJcblx0XHRcdFx0XHQvLyBPcGVuIHRoZSBzb2NrZXRcclxuXHRcdFx0XHRcdHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxyXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcclxuXHRcdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcclxuXHRcdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XHJcblx0XHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcclxuXHRcdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcclxuXHRcdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXHJcblx0XHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcclxuXHRcdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxyXG5cdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gKSB7XHJcblx0XHRcdFx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFNldCBoZWFkZXJzXHJcblx0XHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRcdFx0Ly8gSUUncyBBY3RpdmVYT2JqZWN0IHRocm93cyBhICdUeXBlIE1pc21hdGNoJyBleGNlcHRpb24gd2hlbiBzZXR0aW5nXHJcblx0XHRcdFx0XHRcdC8vIHJlcXVlc3QgaGVhZGVyIHRvIGEgbnVsbC12YWx1ZS5cclxuXHRcdFx0XHRcdFx0Ly9cclxuXHRcdFx0XHRcdFx0Ly8gVG8ga2VlcCBjb25zaXN0ZW50IHdpdGggb3RoZXIgWEhSIGltcGxlbWVudGF0aW9ucywgY2FzdCB0aGUgdmFsdWVcclxuXHRcdFx0XHRcdFx0Ly8gdG8gc3RyaW5nIGFuZCBpZ25vcmUgYHVuZGVmaW5lZGAuXHJcblx0XHRcdFx0XHRcdGlmICggaGVhZGVyc1sgaSBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSArIFwiXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3RcclxuXHRcdFx0XHRcdC8vIFRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbiB3aGljaCBpcyBhY3R1YWxseVxyXG5cdFx0XHRcdFx0Ly8gaGFuZGxlZCBpbiBqUXVlcnkuYWpheCAoc28gbm8gdHJ5L2NhdGNoIGhlcmUpXHJcblx0XHRcdFx0XHR4aHIuc2VuZCggKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhICkgfHwgbnVsbCApO1xyXG5cclxuXHRcdFx0XHRcdC8vIExpc3RlbmVyXHJcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBfLCBpc0Fib3J0ICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RhdHVzLCBzdGF0dXNUZXh0LCByZXNwb25zZXM7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBXYXMgbmV2ZXIgY2FsbGVkIGFuZCBpcyBhYm9ydGVkIG9yIGNvbXBsZXRlXHJcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgJiYgKCBpc0Fib3J0IHx8IHhoci5yZWFkeVN0YXRlID09PSA0ICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gQ2xlYW4gdXBcclxuXHRcdFx0XHRcdFx0XHRkZWxldGUgeGhyQ2FsbGJhY2tzWyBpZCBdO1xyXG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBqUXVlcnkubm9vcDtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQWJvcnQgbWFudWFsbHkgaWYgbmVlZGVkXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Fib3J0ICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSAhPT0gNCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcyA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzID0geGhyLnN0YXR1cztcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTwxMFxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQWNjZXNzaW5nIGJpbmFyeS1kYXRhIHJlc3BvbnNlVGV4dCB0aHJvd3MgYW4gZXhjZXB0aW9uXHJcblx0XHRcdFx0XHRcdFx0XHQvLyAoIzExNDI2KVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VzLnRleHQgPSB4aHIucmVzcG9uc2VUZXh0O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEZpcmVmb3ggdGhyb3dzIGFuIGV4Y2VwdGlvbiB3aGVuIGFjY2Vzc2luZ1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3RhdHVzVGV4dCBmb3IgZmF1bHR5IGNyb3NzLWRvbWFpbiByZXF1ZXN0c1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0O1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCggZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIlwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEZpbHRlciBzdGF0dXMgZm9yIG5vbiBzdGFuZGFyZCBiZWhhdmlvcnNcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBJZiB0aGUgcmVxdWVzdCBpcyBsb2NhbCBhbmQgd2UgaGF2ZSBkYXRhOiBhc3N1bWUgYSBzdWNjZXNzXHJcblx0XHRcdFx0XHRcdFx0XHQvLyAoc3VjY2VzcyB3aXRoIG5vIGRhdGEgd29uJ3QgZ2V0IG5vdGlmaWVkLCB0aGF0J3MgdGhlIGJlc3Qgd2VcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGNhbiBkbyBnaXZlbiBjdXJyZW50IGltcGxlbWVudGF0aW9ucylcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggIXN0YXR1cyAmJiBvcHRpb25zLmlzTG9jYWwgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1cyA9IHJlc3BvbnNlcy50ZXh0ID8gMjAwIDogNDA0O1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSUUgLSAjMTQ1MDogc29tZXRpbWVzIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMTIyMyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzID0gMjA0O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gQ2FsbCBjb21wbGV0ZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIHN0YXR1cywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzLCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHRpZiAoICFvcHRpb25zLmFzeW5jICkge1xyXG5cdFx0XHRcdFx0XHQvLyBpZiB3ZSdyZSBpbiBzeW5jIG1vZGUgd2UgZmlyZSB0aGUgY2FsbGJhY2tcclxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xyXG5cdFx0XHRcdFx0XHQvLyAoSUU2ICYgSUU3KSBpZiBpdCdzIGluIGNhY2hlIGFuZCBoYXMgYmVlblxyXG5cdFx0XHRcdFx0XHQvLyByZXRyaWV2ZWQgZGlyZWN0bHkgd2UgbmVlZCB0byBmaXJlIHRoZSBjYWxsYmFja1xyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCBjYWxsYmFjayApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gQWRkIHRvIHRoZSBsaXN0IG9mIGFjdGl2ZSB4aHIgY2FsbGJhY2tzXHJcblx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0XHRjYWxsYmFjayggdW5kZWZpbmVkLCB0cnVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBGdW5jdGlvbnMgdG8gY3JlYXRlIHhocnNcclxuZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7XHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0fSBjYXRjaCggZSApIHt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFjdGl2ZVhIUigpIHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MSFRUUFwiICk7XHJcblx0fSBjYXRjaCggZSApIHt9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXHJcbmpRdWVyeS5hamF4U2V0dXAoe1xyXG5cdGFjY2VwdHM6IHtcclxuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXHJcblx0fSxcclxuXHRjb250ZW50czoge1xyXG5cdFx0c2NyaXB0OiAvKD86amF2YXxlY21hKXNjcmlwdC9cclxuXHR9LFxyXG5cdGNvbnZlcnRlcnM6IHtcclxuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XHJcblx0XHRcdHJldHVybiB0ZXh0O1xyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGdsb2JhbFxyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XHJcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRzLmNhY2hlID0gZmFsc2U7XHJcblx0fVxyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHMudHlwZSA9IFwiR0VUXCI7XHJcblx0XHRzLmdsb2JhbCA9IGZhbHNlO1xyXG5cdH1cclxufSk7XHJcblxyXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcclxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKHMpIHtcclxuXHJcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHJcblx0XHR2YXIgc2NyaXB0LFxyXG5cdFx0XHRoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBqUXVlcnkoXCJoZWFkXCIpWzBdIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cclxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG5cclxuXHRcdFx0XHRzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRpZiAoIHMuc2NyaXB0Q2hhcnNldCApIHtcclxuXHRcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gcy5zY3JpcHRDaGFyc2V0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c2NyaXB0LnNyYyA9IHMudXJsO1xyXG5cclxuXHRcdFx0XHQvLyBBdHRhY2ggaGFuZGxlcnMgZm9yIGFsbCBicm93c2Vyc1xyXG5cdFx0XHRcdHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBpc0Fib3J0IHx8ICFzY3JpcHQucmVhZHlTdGF0ZSB8fCAvbG9hZGVkfGNvbXBsZXRlLy50ZXN0KCBzY3JpcHQucmVhZHlTdGF0ZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIG1lbW9yeSBsZWFrIGluIElFXHJcblx0XHRcdFx0XHRcdHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSB0aGUgc2NyaXB0XHJcblx0XHRcdFx0XHRcdGlmICggc2NyaXB0LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0c2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0aGUgc2NyaXB0XHJcblx0XHRcdFx0XHRcdHNjcmlwdCA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBDYWxsYmFjayBpZiBub3QgYWJvcnRcclxuXHRcdFx0XHRcdFx0aWYgKCAhaXNBYm9ydCApIHtcclxuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayggMjAwLCBcInN1Y2Nlc3NcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0Ly8gQ2lyY3VtdmVudCBJRTYgYnVncyB3aXRoIGJhc2UgZWxlbWVudHMgKCMyNzA5IGFuZCAjNDM3OCkgYnkgcHJlcGVuZGluZ1xyXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxyXG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKCBzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCApO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggc2NyaXB0ICkge1xyXG5cdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCggdW5kZWZpbmVkLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXHJcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcclxuXHJcbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcclxualF1ZXJ5LmFqYXhTZXR1cCh7XHJcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcclxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xyXG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XHJcblx0XHRyZXR1cm4gY2FsbGJhY2s7XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcclxuXHJcblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxyXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cclxuXHRcdFx0XCJ1cmxcIiA6XHJcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiYgISggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSAmJiByanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcclxuXHRcdCk7XHJcblxyXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcclxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcclxuXHJcblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XHJcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xyXG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XHJcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXHJcblx0XHRpZiAoIGpzb25Qcm9wICkge1xyXG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxyXG5cdFx0cy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcclxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXHJcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XHJcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcclxuXHRcdGpxWEhSLmFsd2F5cyhmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxyXG5cdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XHJcblxyXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxyXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xyXG5cdFx0XHRcdC8vIG1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxyXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHRcdFx0Ly8gc2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxyXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXHJcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XHJcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxyXG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXHJcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCwgZGVmYXVsdHMgdG8gZG9jdW1lbnRcclxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xyXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xyXG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XHJcblx0XHRjb250ZXh0ID0gZmFsc2U7XHJcblx0fVxyXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG5cclxuXHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXHJcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xyXG5cclxuXHQvLyBTaW5nbGUgdGFnXHJcblx0aWYgKCBwYXJzZWQgKSB7XHJcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07XHJcblx0fVxyXG5cclxuXHRwYXJzZWQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcclxuXHJcblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcclxufTtcclxuXHJcblxyXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXHJcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xyXG5cclxuLyoqXHJcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcclxuICovXHJcbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcclxuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XHJcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdH1cclxuXHJcblx0dmFyIHNlbGVjdG9yLCByZXNwb25zZSwgdHlwZSxcclxuXHRcdHNlbGYgPSB0aGlzLFxyXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xyXG5cclxuXHRpZiAoIG9mZiA+PSAwICkge1xyXG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYsIHVybC5sZW5ndGggKSApO1xyXG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcclxuXHR9XHJcblxyXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xyXG5cclxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXHJcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcclxuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcclxuXHJcblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xyXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3RcclxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcclxuXHRcdGpRdWVyeS5hamF4KHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblxyXG5cdFx0XHQvLyBpZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkXHJcblx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcclxuXHRcdFx0ZGF0YTogcGFyYW1zXHJcblx0XHR9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XHJcblxyXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcclxuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XHJcblxyXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cclxuXHJcblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XHJcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXHJcblx0XHRcdFx0alF1ZXJ5KFwiPGRpdj5cIikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxyXG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xyXG5cclxuXHRcdH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcclxuXHRcdFx0c2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5cclxuXHJcbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXHJcbmpRdWVyeS5lYWNoKCBbIFwiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCIgXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XHJcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcclxuXHR9O1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XHJcblx0fSkubGVuZ3RoO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbnZhciBkb2NFbGVtID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/XHJcblx0XHRlbGVtIDpcclxuXHRcdGVsZW0ubm9kZVR5cGUgPT09IDkgP1xyXG5cdFx0XHRlbGVtLmRlZmF1bHRWaWV3IHx8IGVsZW0ucGFyZW50V2luZG93IDpcclxuXHRcdFx0ZmFsc2U7XHJcbn1cclxuXHJcbmpRdWVyeS5vZmZzZXQgPSB7XHJcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcclxuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXHJcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXHJcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcclxuXHRcdFx0cHJvcHMgPSB7fTtcclxuXHJcblx0XHQvLyBzZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXHJcblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XHJcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XHJcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcclxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxyXG5cdFx0XHRqUXVlcnkuaW5BcnJheShcImF1dG9cIiwgWyBjdXJDU1NUb3AsIGN1ckNTU0xlZnQgXSApID4gLTE7XHJcblxyXG5cdFx0Ly8gbmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXIgdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXHJcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xyXG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcclxuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xyXG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XHJcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XHJcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcclxuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcclxuXHRcdH1cclxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XHJcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHRoaXMgOlxyXG5cdFx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcclxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XHJcblxyXG5cdFx0aWYgKCAhZG9jICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXHJcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcclxuXHRcdFx0cmV0dXJuIGJveDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB3ZSBkb24ndCBoYXZlIGdCQ1IsIGp1c3QgdXNlIDAsMCByYXRoZXIgdGhhbiBlcnJvclxyXG5cdFx0Ly8gQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHN0cnVuZGVmaW5lZCApIHtcclxuXHRcdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdH1cclxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6IGJveC50b3AgICsgKCB3aW4ucGFnZVlPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxUb3AgKSAgLSAoIGRvY0VsZW0uY2xpZW50VG9wICB8fCAwICksXHJcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgKCB3aW4ucGFnZVhPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxMZWZ0ICkgLSAoIGRvY0VsZW0uY2xpZW50TGVmdCB8fCAwIClcclxuXHRcdH07XHJcblx0fSxcclxuXHJcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxyXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xyXG5cclxuXHRcdC8vIGZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxyXG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xyXG5cdFx0XHQvLyB3ZSBhc3N1bWUgdGhhdCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgYXZhaWxhYmxlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcclxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XHJcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XHJcblxyXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXHJcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XHJcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XHJcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcclxuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCAgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcclxuXHRcdC8vIG5vdGU6IHdoZW4gYW4gZWxlbWVudCBoYXMgbWFyZ2luOiBhdXRvIHRoZSBvZmZzZXRMZWZ0IGFuZCBtYXJnaW5MZWZ0XHJcblx0XHQvLyBhcmUgdGhlIHNhbWUgaW4gU2FmYXJpIGNhdXNpbmcgb2Zmc2V0LmxlZnQgdG8gaW5jb3JyZWN0bHkgYmUgMFxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dG9wOiAgb2Zmc2V0LnRvcCAgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxyXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUpXHJcblx0XHR9O1xyXG5cdH0sXHJcblxyXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xyXG5cclxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsIFwiaHRtbFwiICkgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApICkge1xyXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xyXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XHJcblx0dmFyIHRvcCA9IC9ZLy50ZXN0KCBwcm9wICk7XHJcblxyXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xyXG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XHJcblxyXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHJldHVybiB3aW4gPyAocHJvcCBpbiB3aW4pID8gd2luWyBwcm9wIF0gOlxyXG5cdFx0XHRcdFx0d2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgbWV0aG9kIF0gOlxyXG5cdFx0XHRcdFx0ZWxlbVsgbWV0aG9kIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggd2luICkge1xyXG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcclxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbExlZnQoKSxcclxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IGpRdWVyeSggd2luICkuc2Nyb2xsVG9wKClcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTtcclxuXHR9O1xyXG59KTtcclxuXHJcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXHJcbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxyXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0XHJcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCB3ZSBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXHJcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcclxuXHRcdFx0XHQvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcclxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcclxuXHRcdFx0XHRcdGNvbXB1dGVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0KTtcclxufSk7XHJcblxyXG5cclxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXHJcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcclxuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xyXG5cdFx0Ly8gbWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXHJcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcclxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0dmFyIGRvYztcclxuXHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcclxuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXHJcblx0XHRcdFx0XHQvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XHJcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxyXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSwgd2hpY2hldmVyIGlzIGdyZWF0ZXN0XHJcblx0XHRcdFx0XHQvLyB1bmZvcnR1bmF0ZWx5LCB0aGlzIGNhdXNlcyBidWcgIzM4MzggaW4gSUU2Lzggb25seSwgYnV0IHRoZXJlIGlzIGN1cnJlbnRseSBubyBnb29kLCBzbWFsbCB3YXkgdG8gZml4IGl0LlxyXG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxyXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXHJcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcclxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XHJcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XHJcblx0XHR9O1xyXG5cdH0pO1xyXG59KTtcclxuXHJcblxyXG4vLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldFxyXG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzLmxlbmd0aDtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XHJcblxyXG5cclxuXHJcblxyXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxyXG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3RcclxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxyXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2VcclxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXHJcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cclxuXHJcbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXHJcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cclxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxyXG5cclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcclxuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBqUXVlcnk7XHJcblx0fSk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbnZhclxyXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxyXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxyXG5cclxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxyXG5cdF8kID0gd2luZG93LiQ7XHJcblxyXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xyXG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcclxuXHRcdHdpbmRvdy4kID0gXyQ7XHJcblx0fVxyXG5cclxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xyXG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5O1xyXG59O1xyXG5cclxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpblxyXG4vLyBBTUQgKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxyXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXHJcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBzdHJ1bmRlZmluZWQgKSB7XHJcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5yZXR1cm4galF1ZXJ5O1xyXG5cclxufSkpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9saWJzL2pxdWVyeS9qcXVlcnktMS4xMS4yLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*! iScroll v5.2.0-snapshot ~ (c) 2008-2017 Matteo Spinelli ~ http://cubiq.org/license */\n(function (window, document, Math) {\n\tvar rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n\t\twindow.setTimeout(callback, 1000 / 60);\n\t};\n\n\tvar utils = function () {\n\t\tvar me = {};\n\n\t\tvar _elementStyle = document.createElement('div').style;\n\t\tvar _vendor = function () {\n\t\t\tvar vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],\n\t\t\t    transform,\n\t\t\t    i = 0,\n\t\t\t    l = vendors.length;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\ttransform = vendors[i] + 'ransform';\n\t\t\t\tif (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}();\n\n\t\tfunction _prefixStyle(style) {\n\t\t\tif (_vendor === false) return false;\n\t\t\tif (_vendor === '') return style;\n\t\t\treturn _vendor + style.charAt(0).toUpperCase() + style.substr(1);\n\t\t}\n\n\t\tme.getTime = Date.now || function getTime() {\n\t\t\treturn new Date().getTime();\n\t\t};\n\n\t\tme.extend = function (target, obj) {\n\t\t\tfor (var i in obj) {\n\t\t\t\ttarget[i] = obj[i];\n\t\t\t}\n\t\t};\n\n\t\tme.addEvent = function (el, type, fn, capture) {\n\t\t\tel.addEventListener(type, fn, !!capture);\n\t\t};\n\n\t\tme.removeEvent = function (el, type, fn, capture) {\n\t\t\tel.removeEventListener(type, fn, !!capture);\n\t\t};\n\n\t\tme.prefixPointerEvent = function (pointerEvent) {\n\t\t\treturn window.MSPointerEvent ? 'MSPointer' + pointerEvent.charAt(7).toUpperCase() + pointerEvent.substr(8) : pointerEvent;\n\t\t};\n\n\t\tme.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {\n\t\t\tvar distance = current - start,\n\t\t\t    speed = Math.abs(distance) / time,\n\t\t\t    destination,\n\t\t\t    duration;\n\n\t\t\tdeceleration = deceleration === undefined ? 0.0006 : deceleration;\n\n\t\t\tdestination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);\n\t\t\tduration = speed / deceleration;\n\n\t\t\tif (destination < lowerMargin) {\n\t\t\t\tdestination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;\n\t\t\t\tdistance = Math.abs(destination - current);\n\t\t\t\tduration = distance / speed;\n\t\t\t} else if (destination > 0) {\n\t\t\t\tdestination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : 0;\n\t\t\t\tdistance = Math.abs(current) + destination;\n\t\t\t\tduration = distance / speed;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdestination: Math.round(destination),\n\t\t\t\tduration: duration\n\t\t\t};\n\t\t};\n\n\t\tvar _transform = _prefixStyle('transform');\n\n\t\tme.extend(me, {\n\t\t\thasTransform: _transform !== false,\n\t\t\thasPerspective: _prefixStyle('perspective') in _elementStyle,\n\t\t\thasTouch: 'ontouchstart' in window,\n\t\t\thasPointer: !!(window.PointerEvent || window.MSPointerEvent), // IE10 is prefixed\n\t\t\thasTransition: _prefixStyle('transition') in _elementStyle\n\t\t});\n\n\t\t/*\n  This should find all Android browsers lower than build 535.19 (both stock browser and webview)\n  - galaxy S2 is ok\n     - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`\n     - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n    - galaxy S3 is badAndroid (stock brower, webview)\n      `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n    - galaxy S4 is badAndroid (stock brower, webview)\n      `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n    - galaxy S5 is OK\n      `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`\n    - galaxy S6 is OK\n      `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`\n   */\n\t\tme.isBadAndroid = function () {\n\t\t\tvar appVersion = window.navigator.appVersion;\n\t\t\t// Android browser is not a chrome browser.\n\t\t\tif (/Android/.test(appVersion) && !/Chrome\\/\\d/.test(appVersion)) {\n\t\t\t\tvar safariVersion = appVersion.match(/Safari\\/(\\d+.\\d)/);\n\t\t\t\tif (safariVersion && typeof safariVersion === \"object\" && safariVersion.length >= 2) {\n\t\t\t\t\treturn parseFloat(safariVersion[1]) < 535.19;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}();\n\n\t\tme.extend(me.style = {}, {\n\t\t\ttransform: _transform,\n\t\t\ttransitionTimingFunction: _prefixStyle('transitionTimingFunction'),\n\t\t\ttransitionDuration: _prefixStyle('transitionDuration'),\n\t\t\ttransitionDelay: _prefixStyle('transitionDelay'),\n\t\t\ttransformOrigin: _prefixStyle('transformOrigin'),\n\t\t\ttouchAction: _prefixStyle('touchAction')\n\t\t});\n\n\t\tme.hasClass = function (e, c) {\n\t\t\tvar re = new RegExp(\"(^|\\\\s)\" + c + \"(\\\\s|$)\");\n\t\t\treturn re.test(e.className);\n\t\t};\n\n\t\tme.addClass = function (e, c) {\n\t\t\tif (me.hasClass(e, c)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar newclass = e.className.split(' ');\n\t\t\tnewclass.push(c);\n\t\t\te.className = newclass.join(' ');\n\t\t};\n\n\t\tme.removeClass = function (e, c) {\n\t\t\tif (!me.hasClass(e, c)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar re = new RegExp(\"(^|\\\\s)\" + c + \"(\\\\s|$)\", 'g');\n\t\t\te.className = e.className.replace(re, ' ');\n\t\t};\n\n\t\tme.offset = function (el) {\n\t\t\tvar left = -el.offsetLeft,\n\t\t\t    top = -el.offsetTop;\n\n\t\t\t// jshint -W084\n\t\t\twhile (el = el.offsetParent) {\n\t\t\t\tleft -= el.offsetLeft;\n\t\t\t\ttop -= el.offsetTop;\n\t\t\t}\n\t\t\t// jshint +W084\n\n\t\t\treturn {\n\t\t\t\tleft: left,\n\t\t\t\ttop: top\n\t\t\t};\n\t\t};\n\n\t\tme.preventDefaultException = function (el, exceptions) {\n\t\t\tfor (var i in exceptions) {\n\t\t\t\tif (exceptions[i].test(el[i])) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tme.extend(me.eventType = {}, {\n\t\t\ttouchstart: 1,\n\t\t\ttouchmove: 1,\n\t\t\ttouchend: 1,\n\n\t\t\tmousedown: 2,\n\t\t\tmousemove: 2,\n\t\t\tmouseup: 2,\n\n\t\t\tpointerdown: 3,\n\t\t\tpointermove: 3,\n\t\t\tpointerup: 3,\n\n\t\t\tMSPointerDown: 3,\n\t\t\tMSPointerMove: 3,\n\t\t\tMSPointerUp: 3\n\t\t});\n\n\t\tme.extend(me.ease = {}, {\n\t\t\tquadratic: {\n\t\t\t\tstyle: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n\t\t\t\tfn: function (k) {\n\t\t\t\t\treturn k * (2 - k);\n\t\t\t\t}\n\t\t\t},\n\t\t\tcircular: {\n\t\t\t\tstyle: 'cubic-bezier(0.1, 0.57, 0.1, 1)', // Not properly \"circular\" but this looks better, it should be (0.075, 0.82, 0.165, 1)\n\t\t\t\tfn: function (k) {\n\t\t\t\t\treturn Math.sqrt(1 - --k * k);\n\t\t\t\t}\n\t\t\t},\n\t\t\tback: {\n\t\t\t\tstyle: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',\n\t\t\t\tfn: function (k) {\n\t\t\t\t\tvar b = 4;\n\t\t\t\t\treturn (k = k - 1) * k * ((b + 1) * k + b) + 1;\n\t\t\t\t}\n\t\t\t},\n\t\t\tbounce: {\n\t\t\t\tstyle: '',\n\t\t\t\tfn: function (k) {\n\t\t\t\t\tif ((k /= 1) < 1 / 2.75) {\n\t\t\t\t\t\treturn 7.5625 * k * k;\n\t\t\t\t\t} else if (k < 2 / 2.75) {\n\t\t\t\t\t\treturn 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n\t\t\t\t\t} else if (k < 2.5 / 2.75) {\n\t\t\t\t\t\treturn 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\telastic: {\n\t\t\t\tstyle: '',\n\t\t\t\tfn: function (k) {\n\t\t\t\t\tvar f = 0.22,\n\t\t\t\t\t    e = 0.4;\n\n\t\t\t\t\tif (k === 0) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (k == 1) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tme.tap = function (e, eventName) {\n\t\t\tvar ev = document.createEvent('Event');\n\t\t\tev.initEvent(eventName, true, true);\n\t\t\tev.pageX = e.pageX;\n\t\t\tev.pageY = e.pageY;\n\t\t\te.target.dispatchEvent(ev);\n\t\t};\n\n\t\tme.click = function (e) {\n\t\t\tvar target = e.target,\n\t\t\t    ev;\n\n\t\t\tif (!/(SELECT|INPUT|TEXTAREA)/i.test(target.tagName)) {\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent\n\t\t\t\t// initMouseEvent is deprecated.\n\t\t\t\tev = document.createEvent(window.MouseEvent ? 'MouseEvents' : 'Event');\n\t\t\t\tev.initEvent('click', true, true);\n\t\t\t\tev.view = e.view || window;\n\t\t\t\tev.detail = 1;\n\t\t\t\tev.screenX = target.screenX || 0;\n\t\t\t\tev.screenY = target.screenY || 0;\n\t\t\t\tev.clientX = target.clientX || 0;\n\t\t\t\tev.clientY = target.clientY || 0;\n\t\t\t\tev.ctrlKey = !!e.ctrlKey;\n\t\t\t\tev.altKey = !!e.altKey;\n\t\t\t\tev.shiftKey = !!e.shiftKey;\n\t\t\t\tev.metaKey = !!e.metaKey;\n\t\t\t\tev.button = 0;\n\t\t\t\tev.relatedTarget = null;\n\t\t\t\tev._constructed = true;\n\t\t\t\ttarget.dispatchEvent(ev);\n\t\t\t}\n\t\t};\n\n\t\tme.getTouchAction = function (eventPassthrough, addPinch) {\n\t\t\tvar touchAction = 'none';\n\t\t\tif (eventPassthrough === 'vertical') {\n\t\t\t\ttouchAction = 'pan-y';\n\t\t\t} else if (eventPassthrough === 'horizontal') {\n\t\t\t\ttouchAction = 'pan-x';\n\t\t\t}\n\t\t\tif (addPinch && touchAction != 'none') {\n\t\t\t\t// add pinch-zoom support if the browser supports it, but if not (eg. Chrome <55) do nothing\n\t\t\t\ttouchAction += ' pinch-zoom';\n\t\t\t}\n\t\t\treturn touchAction;\n\t\t};\n\n\t\tme.getRect = function (el) {\n\t\t\tif (el instanceof SVGElement) {\n\t\t\t\tvar rect = el.getBoundingClientRect();\n\t\t\t\treturn {\n\t\t\t\t\ttop: rect.top,\n\t\t\t\t\tleft: rect.left,\n\t\t\t\t\twidth: rect.width,\n\t\t\t\t\theight: rect.height\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttop: el.offsetTop,\n\t\t\t\t\tleft: el.offsetLeft,\n\t\t\t\t\twidth: el.offsetWidth,\n\t\t\t\t\theight: el.offsetHeight\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\treturn me;\n\t}();\n\tfunction IScroll(el, options) {\n\t\tthis.wrapper = typeof el == 'string' ? document.querySelector(el) : el;\n\t\tthis.scroller = this.wrapper.children[0];\n\t\tthis.scrollerStyle = this.scroller.style; // cache style for better performance\n\n\t\tthis.options = {\n\n\t\t\tresizeScrollbars: true,\n\n\t\t\tmouseWheelSpeed: 20,\n\n\t\t\tsnapThreshold: 0.334,\n\n\t\t\t// INSERT POINT: OPTIONS\n\t\t\tdisablePointer: !utils.hasPointer,\n\t\t\tdisableTouch: utils.hasPointer || !utils.hasTouch,\n\t\t\tdisableMouse: utils.hasPointer || utils.hasTouch,\n\t\t\tstartX: 0,\n\t\t\tstartY: 0,\n\t\t\tscrollY: true,\n\t\t\tdirectionLockThreshold: 5,\n\t\t\tmomentum: true,\n\n\t\t\tbounce: true,\n\t\t\tbounceTime: 600,\n\t\t\tbounceEasing: '',\n\n\t\t\tpreventDefault: true,\n\t\t\tpreventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },\n\n\t\t\tHWCompositing: true,\n\t\t\tuseTransition: true,\n\t\t\tuseTransform: true,\n\t\t\tbindToWrapper: typeof window.onmousedown === \"undefined\"\n\t\t};\n\n\t\tfor (var i in options) {\n\t\t\tthis.options[i] = options[i];\n\t\t}\n\n\t\t// Normalize options\n\t\tthis.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';\n\n\t\tthis.options.useTransition = utils.hasTransition && this.options.useTransition;\n\t\tthis.options.useTransform = utils.hasTransform && this.options.useTransform;\n\n\t\tthis.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;\n\t\tthis.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;\n\n\t\t// If you want eventPassthrough I have to lock one of the axes\n\t\tthis.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;\n\t\tthis.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;\n\n\t\t// With eventPassthrough we also need lockDirection mechanism\n\t\tthis.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;\n\t\tthis.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;\n\n\t\tthis.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;\n\n\t\tthis.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;\n\n\t\tif (this.options.tap === true) {\n\t\t\tthis.options.tap = 'tap';\n\t\t}\n\n\t\t// https://github.com/cubiq/iscroll/issues/1029\n\t\tif (!this.options.useTransition && !this.options.useTransform) {\n\t\t\tif (!/relative|absolute/i.test(this.scrollerStyle.position)) {\n\t\t\t\tthis.scrollerStyle.position = \"relative\";\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.shrinkScrollbars == 'scale') {\n\t\t\tthis.options.useTransition = false;\n\t\t}\n\n\t\tthis.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;\n\n\t\t// INSERT POINT: NORMALIZATION\n\n\t\t// Some defaults\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.directionX = 0;\n\t\tthis.directionY = 0;\n\t\tthis._events = {};\n\n\t\t// INSERT POINT: DEFAULTS\n\n\t\tthis._init();\n\t\tthis.refresh();\n\n\t\tthis.scrollTo(this.options.startX, this.options.startY);\n\t\tthis.enable();\n\t}\n\n\tIScroll.prototype = {\n\t\tversion: '5.2.0-snapshot',\n\n\t\t_init: function () {\n\t\t\tthis._initEvents();\n\n\t\t\tif (this.options.scrollbars || this.options.indicators) {\n\t\t\t\tthis._initIndicators();\n\t\t\t}\n\n\t\t\tif (this.options.mouseWheel) {\n\t\t\t\tthis._initWheel();\n\t\t\t}\n\n\t\t\tif (this.options.snap) {\n\t\t\t\tthis._initSnap();\n\t\t\t}\n\n\t\t\tif (this.options.keyBindings) {\n\t\t\t\tthis._initKeys();\n\t\t\t}\n\n\t\t\t// INSERT POINT: _init\n\t\t},\n\n\t\tdestroy: function () {\n\t\t\tthis._initEvents(true);\n\t\t\tclearTimeout(this.resizeTimeout);\n\t\t\tthis.resizeTimeout = null;\n\t\t\tthis._execEvent('destroy');\n\t\t},\n\n\t\t_transitionEnd: function (e) {\n\t\t\tif (e.target != this.scroller || !this.isInTransition) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._transitionTime();\n\t\t\tif (!this.resetPosition(this.options.bounceTime)) {\n\t\t\t\tthis.isInTransition = false;\n\t\t\t\tthis._execEvent('scrollEnd');\n\t\t\t}\n\t\t},\n\n\t\t_start: function (e) {\n\t\t\t// React to left mouse button only\n\t\t\tif (utils.eventType[e.type] != 1) {\n\t\t\t\t// for button property\n\t\t\t\t// http://unixpapa.com/js/mouse.html\n\t\t\t\tvar button;\n\t\t\t\tif (!e.which) {\n\t\t\t\t\t/* IE case */\n\t\t\t\t\tbutton = e.button < 2 ? 0 : e.button == 4 ? 1 : 2;\n\t\t\t\t} else {\n\t\t\t\t\t/* All others */\n\t\t\t\t\tbutton = e.button;\n\t\t\t\t}\n\t\t\t\tif (button !== 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.enabled || this.initiated && utils.eventType[e.type] !== this.initiated) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\n\t\t\tvar point = e.touches ? e.touches[0] : e,\n\t\t\t    pos;\n\n\t\t\tthis.initiated = utils.eventType[e.type];\n\t\t\tthis.moved = false;\n\t\t\tthis.distX = 0;\n\t\t\tthis.distY = 0;\n\t\t\tthis.directionX = 0;\n\t\t\tthis.directionY = 0;\n\t\t\tthis.directionLocked = 0;\n\n\t\t\tthis.startTime = utils.getTime();\n\n\t\t\tif (this.options.useTransition && this.isInTransition) {\n\t\t\t\tthis._transitionTime();\n\t\t\t\tthis.isInTransition = false;\n\t\t\t\tpos = this.getComputedPosition();\n\t\t\t\tthis._translate(Math.round(pos.x), Math.round(pos.y));\n\t\t\t\tthis._execEvent('scrollEnd');\n\t\t\t} else if (!this.options.useTransition && this.isAnimating) {\n\t\t\t\tthis.isAnimating = false;\n\t\t\t\tthis._execEvent('scrollEnd');\n\t\t\t}\n\n\t\t\tthis.startX = this.x;\n\t\t\tthis.startY = this.y;\n\t\t\tthis.absStartX = this.x;\n\t\t\tthis.absStartY = this.y;\n\t\t\tthis.pointX = point.pageX;\n\t\t\tthis.pointY = point.pageY;\n\n\t\t\tthis._execEvent('beforeScrollStart');\n\t\t},\n\n\t\t_move: function (e) {\n\t\t\tif (!this.enabled || utils.eventType[e.type] !== this.initiated) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.options.preventDefault) {\n\t\t\t\t// increases performance on Android? TODO: check!\n\t\t\t\te.preventDefault();\n\t\t\t}\n\n\t\t\tvar point = e.touches ? e.touches[0] : e,\n\t\t\t    deltaX = point.pageX - this.pointX,\n\t\t\t    deltaY = point.pageY - this.pointY,\n\t\t\t    timestamp = utils.getTime(),\n\t\t\t    newX,\n\t\t\t    newY,\n\t\t\t    absDistX,\n\t\t\t    absDistY;\n\n\t\t\tthis.pointX = point.pageX;\n\t\t\tthis.pointY = point.pageY;\n\n\t\t\tthis.distX += deltaX;\n\t\t\tthis.distY += deltaY;\n\t\t\tabsDistX = Math.abs(this.distX);\n\t\t\tabsDistY = Math.abs(this.distY);\n\n\t\t\t// We need to move at least 10 pixels for the scrolling to initiate\n\t\t\tif (timestamp - this.endTime > 300 && absDistX < 10 && absDistY < 10) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If you are scrolling in one direction lock the other\n\t\t\tif (!this.directionLocked && !this.options.freeScroll) {\n\t\t\t\tif (absDistX > absDistY + this.options.directionLockThreshold) {\n\t\t\t\t\tthis.directionLocked = 'h'; // lock horizontally\n\t\t\t\t} else if (absDistY >= absDistX + this.options.directionLockThreshold) {\n\t\t\t\t\tthis.directionLocked = 'v'; // lock vertically\n\t\t\t\t} else {\n\t\t\t\t\tthis.directionLocked = 'n'; // no lock\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.directionLocked == 'h') {\n\t\t\t\tif (this.options.eventPassthrough == 'vertical') {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t} else if (this.options.eventPassthrough == 'horizontal') {\n\t\t\t\t\tthis.initiated = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeltaY = 0;\n\t\t\t} else if (this.directionLocked == 'v') {\n\t\t\t\tif (this.options.eventPassthrough == 'horizontal') {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t} else if (this.options.eventPassthrough == 'vertical') {\n\t\t\t\t\tthis.initiated = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeltaX = 0;\n\t\t\t}\n\n\t\t\tdeltaX = this.hasHorizontalScroll ? deltaX : 0;\n\t\t\tdeltaY = this.hasVerticalScroll ? deltaY : 0;\n\n\t\t\tnewX = this.x + deltaX;\n\t\t\tnewY = this.y + deltaY;\n\n\t\t\t// Slow down if outside of the boundaries\n\t\t\tif (newX > 0 || newX < this.maxScrollX) {\n\t\t\t\tnewX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;\n\t\t\t}\n\t\t\tif (newY > 0 || newY < this.maxScrollY) {\n\t\t\t\tnewY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;\n\t\t\t}\n\n\t\t\tthis.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;\n\t\t\tthis.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;\n\n\t\t\tif (!this.moved) {\n\t\t\t\tthis._execEvent('scrollStart');\n\t\t\t}\n\n\t\t\tthis.moved = true;\n\n\t\t\tthis._translate(newX, newY);\n\n\t\t\t/* REPLACE START: _move */\n\n\t\t\tif (timestamp - this.startTime > 300) {\n\t\t\t\tthis.startTime = timestamp;\n\t\t\t\tthis.startX = this.x;\n\t\t\t\tthis.startY = this.y;\n\t\t\t}\n\n\t\t\t/* REPLACE END: _move */\n\t\t},\n\n\t\t_end: function (e) {\n\t\t\tif (!this.enabled || utils.eventType[e.type] !== this.initiated) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\n\t\t\tvar point = e.changedTouches ? e.changedTouches[0] : e,\n\t\t\t    momentumX,\n\t\t\t    momentumY,\n\t\t\t    duration = utils.getTime() - this.startTime,\n\t\t\t    newX = Math.round(this.x),\n\t\t\t    newY = Math.round(this.y),\n\t\t\t    distanceX = Math.abs(newX - this.startX),\n\t\t\t    distanceY = Math.abs(newY - this.startY),\n\t\t\t    time = 0,\n\t\t\t    easing = '';\n\n\t\t\tthis.isInTransition = 0;\n\t\t\tthis.initiated = 0;\n\t\t\tthis.endTime = utils.getTime();\n\n\t\t\t// reset if we are outside of the boundaries\n\t\t\tif (this.resetPosition(this.options.bounceTime)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.scrollTo(newX, newY); // ensures that the last position is rounded\n\n\t\t\t// we scrolled less than 10 pixels\n\t\t\tif (!this.moved) {\n\t\t\t\tif (this.options.tap) {\n\t\t\t\t\tutils.tap(e, this.options.tap);\n\t\t\t\t}\n\n\t\t\t\tif (this.options.click) {\n\t\t\t\t\tutils.click(e);\n\t\t\t\t}\n\n\t\t\t\tthis._execEvent('scrollCancel');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100) {\n\t\t\t\tthis._execEvent('flick');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// start momentum animation if needed\n\t\t\tif (this.options.momentum && duration < 300) {\n\t\t\t\tmomentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };\n\t\t\t\tmomentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };\n\t\t\t\tnewX = momentumX.destination;\n\t\t\t\tnewY = momentumY.destination;\n\t\t\t\ttime = Math.max(momentumX.duration, momentumY.duration);\n\t\t\t\tthis.isInTransition = 1;\n\t\t\t}\n\n\t\t\tif (this.options.snap) {\n\t\t\t\tvar snap = this._nearestSnap(newX, newY);\n\t\t\t\tthis.currentPage = snap;\n\t\t\t\ttime = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(newX - snap.x), 1000), Math.min(Math.abs(newY - snap.y), 1000)), 300);\n\t\t\t\tnewX = snap.x;\n\t\t\t\tnewY = snap.y;\n\n\t\t\t\tthis.directionX = 0;\n\t\t\t\tthis.directionY = 0;\n\t\t\t\teasing = this.options.bounceEasing;\n\t\t\t}\n\n\t\t\t// INSERT POINT: _end\n\n\t\t\tif (newX != this.x || newY != this.y) {\n\t\t\t\t// change easing function when scroller goes out of the boundaries\n\t\t\t\tif (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {\n\t\t\t\t\teasing = utils.ease.quadratic;\n\t\t\t\t}\n\n\t\t\t\tthis.scrollTo(newX, newY, time, easing);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._execEvent('scrollEnd');\n\t\t},\n\n\t\t_resize: function () {\n\t\t\tvar that = this;\n\n\t\t\tclearTimeout(this.resizeTimeout);\n\n\t\t\tthis.resizeTimeout = setTimeout(function () {\n\t\t\t\tthat.refresh();\n\t\t\t}, this.options.resizePolling);\n\t\t},\n\n\t\tresetPosition: function (time) {\n\t\t\tvar x = this.x,\n\t\t\t    y = this.y;\n\n\t\t\ttime = time || 0;\n\n\t\t\tif (!this.hasHorizontalScroll || this.x > 0) {\n\t\t\t\tx = 0;\n\t\t\t} else if (this.x < this.maxScrollX) {\n\t\t\t\tx = this.maxScrollX;\n\t\t\t}\n\n\t\t\tif (!this.hasVerticalScroll || this.y > 0) {\n\t\t\t\ty = 0;\n\t\t\t} else if (this.y < this.maxScrollY) {\n\t\t\t\ty = this.maxScrollY;\n\t\t\t}\n\n\t\t\tif (x == this.x && y == this.y) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.scrollTo(x, y, time, this.options.bounceEasing);\n\n\t\t\treturn true;\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.enabled = false;\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.enabled = true;\n\t\t},\n\n\t\trefresh: function () {\n\t\t\tutils.getRect(this.wrapper); // Force reflow\n\n\t\t\tthis.wrapperWidth = this.wrapper.clientWidth;\n\t\t\tthis.wrapperHeight = this.wrapper.clientHeight;\n\n\t\t\tvar rect = utils.getRect(this.scroller);\n\t\t\t/* REPLACE START: refresh */\n\n\t\t\tthis.scrollerWidth = rect.width;\n\t\t\tthis.scrollerHeight = rect.height;\n\n\t\t\tthis.maxScrollX = this.wrapperWidth - this.scrollerWidth;\n\t\t\tthis.maxScrollY = this.wrapperHeight - this.scrollerHeight;\n\n\t\t\t/* REPLACE END: refresh */\n\n\t\t\tthis.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;\n\t\t\tthis.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;\n\n\t\t\tif (!this.hasHorizontalScroll) {\n\t\t\t\tthis.maxScrollX = 0;\n\t\t\t\tthis.scrollerWidth = this.wrapperWidth;\n\t\t\t}\n\n\t\t\tif (!this.hasVerticalScroll) {\n\t\t\t\tthis.maxScrollY = 0;\n\t\t\t\tthis.scrollerHeight = this.wrapperHeight;\n\t\t\t}\n\n\t\t\tthis.endTime = 0;\n\t\t\tthis.directionX = 0;\n\t\t\tthis.directionY = 0;\n\n\t\t\tif (utils.hasPointer && !this.options.disablePointer) {\n\t\t\t\t// The wrapper should have `touchAction` property for using pointerEvent.\n\t\t\t\tthis.wrapper.style[utils.style.touchAction] = utils.getTouchAction(this.options.eventPassthrough, true);\n\n\t\t\t\t// case. not support 'pinch-zoom'\n\t\t\t\t// https://github.com/cubiq/iscroll/issues/1118#issuecomment-270057583\n\t\t\t\tif (!this.wrapper.style[utils.style.touchAction]) {\n\t\t\t\t\tthis.wrapper.style[utils.style.touchAction] = utils.getTouchAction(this.options.eventPassthrough, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.wrapperOffset = utils.offset(this.wrapper);\n\n\t\t\tthis._execEvent('refresh');\n\n\t\t\tthis.resetPosition();\n\n\t\t\t// INSERT POINT: _refresh\n\t\t},\n\n\t\ton: function (type, fn) {\n\t\t\tif (!this._events[type]) {\n\t\t\t\tthis._events[type] = [];\n\t\t\t}\n\n\t\t\tthis._events[type].push(fn);\n\t\t},\n\n\t\toff: function (type, fn) {\n\t\t\tif (!this._events[type]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar index = this._events[type].indexOf(fn);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis._events[type].splice(index, 1);\n\t\t\t}\n\t\t},\n\n\t\t_execEvent: function (type) {\n\t\t\tif (!this._events[type]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar i = 0,\n\t\t\t    l = this._events[type].length;\n\n\t\t\tif (!l) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tthis._events[type][i].apply(this, [].slice.call(arguments, 1));\n\t\t\t}\n\t\t},\n\n\t\tscrollBy: function (x, y, time, easing) {\n\t\t\tx = this.x + x;\n\t\t\ty = this.y + y;\n\t\t\ttime = time || 0;\n\n\t\t\tthis.scrollTo(x, y, time, easing);\n\t\t},\n\n\t\tscrollTo: function (x, y, time, easing) {\n\t\t\teasing = easing || utils.ease.circular;\n\n\t\t\tthis.isInTransition = this.options.useTransition && time > 0;\n\t\t\tvar transitionType = this.options.useTransition && easing.style;\n\t\t\tif (!time || transitionType) {\n\t\t\t\tif (transitionType) {\n\t\t\t\t\tthis._transitionTimingFunction(easing.style);\n\t\t\t\t\tthis._transitionTime(time);\n\t\t\t\t}\n\t\t\t\tthis._translate(x, y);\n\t\t\t} else {\n\t\t\t\tthis._animate(x, y, time, easing.fn);\n\t\t\t}\n\t\t},\n\n\t\tscrollToElement: function (el, time, offsetX, offsetY, easing) {\n\t\t\tel = el.nodeType ? el : this.scroller.querySelector(el);\n\n\t\t\tif (!el) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pos = utils.offset(el);\n\n\t\t\tpos.left -= this.wrapperOffset.left;\n\t\t\tpos.top -= this.wrapperOffset.top;\n\n\t\t\t// if offsetX/Y are true we center the element to the screen\n\t\t\tvar elRect = utils.getRect(el);\n\t\t\tvar wrapperRect = utils.getRect(this.wrapper);\n\t\t\tif (offsetX === true) {\n\t\t\t\toffsetX = Math.round(elRect.width / 2 - wrapperRect.width / 2);\n\t\t\t}\n\t\t\tif (offsetY === true) {\n\t\t\t\toffsetY = Math.round(elRect.height / 2 - wrapperRect.height / 2);\n\t\t\t}\n\n\t\t\tpos.left -= offsetX || 0;\n\t\t\tpos.top -= offsetY || 0;\n\n\t\t\tpos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;\n\t\t\tpos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;\n\n\t\t\ttime = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;\n\n\t\t\tthis.scrollTo(pos.left, pos.top, time, easing);\n\t\t},\n\n\t\t_transitionTime: function (time) {\n\t\t\tif (!this.options.useTransition) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttime = time || 0;\n\t\t\tvar durationProp = utils.style.transitionDuration;\n\t\t\tif (!durationProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.scrollerStyle[durationProp] = time + 'ms';\n\n\t\t\tif (!time && utils.isBadAndroid) {\n\t\t\t\tthis.scrollerStyle[durationProp] = '0.0001ms';\n\t\t\t\t// remove 0.0001ms\n\t\t\t\tvar self = this;\n\t\t\t\trAF(function () {\n\t\t\t\t\tif (self.scrollerStyle[durationProp] === '0.0001ms') {\n\t\t\t\t\t\tself.scrollerStyle[durationProp] = '0s';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.indicators) {\n\t\t\t\tfor (var i = this.indicators.length; i--;) {\n\t\t\t\t\tthis.indicators[i].transitionTime(time);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// INSERT POINT: _transitionTime\n\t\t},\n\n\t\t_transitionTimingFunction: function (easing) {\n\t\t\tthis.scrollerStyle[utils.style.transitionTimingFunction] = easing;\n\n\t\t\tif (this.indicators) {\n\t\t\t\tfor (var i = this.indicators.length; i--;) {\n\t\t\t\t\tthis.indicators[i].transitionTimingFunction(easing);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// INSERT POINT: _transitionTimingFunction\n\t\t},\n\n\t\t_translate: function (x, y) {\n\t\t\tif (this.options.useTransform) {\n\n\t\t\t\t/* REPLACE START: _translate */\n\n\t\t\t\tthis.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;\n\n\t\t\t\t/* REPLACE END: _translate */\n\t\t\t} else {\n\t\t\t\tx = Math.round(x);\n\t\t\t\ty = Math.round(y);\n\t\t\t\tthis.scrollerStyle.left = x + 'px';\n\t\t\t\tthis.scrollerStyle.top = y + 'px';\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\tif (this.indicators) {\n\t\t\t\tfor (var i = this.indicators.length; i--;) {\n\t\t\t\t\tthis.indicators[i].updatePosition();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// INSERT POINT: _translate\n\t\t},\n\n\t\t_initEvents: function (remove) {\n\t\t\tvar eventType = remove ? utils.removeEvent : utils.addEvent,\n\t\t\t    target = this.options.bindToWrapper ? this.wrapper : window;\n\n\t\t\teventType(window, 'orientationchange', this);\n\t\t\teventType(window, 'resize', this);\n\n\t\t\tif (this.options.click) {\n\t\t\t\teventType(this.wrapper, 'click', this, true);\n\t\t\t}\n\n\t\t\tif (!this.options.disableMouse) {\n\t\t\t\teventType(this.wrapper, 'mousedown', this);\n\t\t\t\teventType(target, 'mousemove', this);\n\t\t\t\teventType(target, 'mousecancel', this);\n\t\t\t\teventType(target, 'mouseup', this);\n\t\t\t}\n\n\t\t\tif (utils.hasPointer && !this.options.disablePointer) {\n\t\t\t\teventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);\n\t\t\t\teventType(target, utils.prefixPointerEvent('pointermove'), this);\n\t\t\t\teventType(target, utils.prefixPointerEvent('pointercancel'), this);\n\t\t\t\teventType(target, utils.prefixPointerEvent('pointerup'), this);\n\t\t\t}\n\n\t\t\tif (utils.hasTouch && !this.options.disableTouch) {\n\t\t\t\teventType(this.wrapper, 'touchstart', this);\n\t\t\t\teventType(target, 'touchmove', this);\n\t\t\t\teventType(target, 'touchcancel', this);\n\t\t\t\teventType(target, 'touchend', this);\n\t\t\t}\n\n\t\t\teventType(this.scroller, 'transitionend', this);\n\t\t\teventType(this.scroller, 'webkitTransitionEnd', this);\n\t\t\teventType(this.scroller, 'oTransitionEnd', this);\n\t\t\teventType(this.scroller, 'MSTransitionEnd', this);\n\t\t},\n\n\t\tgetComputedPosition: function () {\n\t\t\tvar matrix = window.getComputedStyle(this.scroller, null),\n\t\t\t    x,\n\t\t\t    y;\n\n\t\t\tif (this.options.useTransform) {\n\t\t\t\tmatrix = matrix[utils.style.transform].split(')')[0].split(', ');\n\t\t\t\tx = +(matrix[12] || matrix[4]);\n\t\t\t\ty = +(matrix[13] || matrix[5]);\n\t\t\t} else {\n\t\t\t\tx = +matrix.left.replace(/[^-\\d.]/g, '');\n\t\t\t\ty = +matrix.top.replace(/[^-\\d.]/g, '');\n\t\t\t}\n\n\t\t\treturn { x: x, y: y };\n\t\t},\n\t\t_initIndicators: function () {\n\t\t\tvar interactive = this.options.interactiveScrollbars,\n\t\t\t    customStyle = typeof this.options.scrollbars != 'string',\n\t\t\t    indicators = [],\n\t\t\t    indicator;\n\n\t\t\tvar that = this;\n\n\t\t\tthis.indicators = [];\n\n\t\t\tif (this.options.scrollbars) {\n\t\t\t\t// Vertical scrollbar\n\t\t\t\tif (this.options.scrollY) {\n\t\t\t\t\tindicator = {\n\t\t\t\t\t\tel: createDefaultScrollbar('v', interactive, this.options.scrollbars),\n\t\t\t\t\t\tinteractive: interactive,\n\t\t\t\t\t\tdefaultScrollbars: true,\n\t\t\t\t\t\tcustomStyle: customStyle,\n\t\t\t\t\t\tresize: this.options.resizeScrollbars,\n\t\t\t\t\t\tshrink: this.options.shrinkScrollbars,\n\t\t\t\t\t\tfade: this.options.fadeScrollbars,\n\t\t\t\t\t\tlistenX: false\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.wrapper.appendChild(indicator.el);\n\t\t\t\t\tindicators.push(indicator);\n\t\t\t\t}\n\n\t\t\t\t// Horizontal scrollbar\n\t\t\t\tif (this.options.scrollX) {\n\t\t\t\t\tindicator = {\n\t\t\t\t\t\tel: createDefaultScrollbar('h', interactive, this.options.scrollbars),\n\t\t\t\t\t\tinteractive: interactive,\n\t\t\t\t\t\tdefaultScrollbars: true,\n\t\t\t\t\t\tcustomStyle: customStyle,\n\t\t\t\t\t\tresize: this.options.resizeScrollbars,\n\t\t\t\t\t\tshrink: this.options.shrinkScrollbars,\n\t\t\t\t\t\tfade: this.options.fadeScrollbars,\n\t\t\t\t\t\tlistenY: false\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.wrapper.appendChild(indicator.el);\n\t\t\t\t\tindicators.push(indicator);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.options.indicators) {\n\t\t\t\t// TODO: check concat compatibility\n\t\t\t\tindicators = indicators.concat(this.options.indicators);\n\t\t\t}\n\n\t\t\tfor (var i = indicators.length; i--;) {\n\t\t\t\tthis.indicators.push(new Indicator(this, indicators[i]));\n\t\t\t}\n\n\t\t\t// TODO: check if we can use array.map (wide compatibility and performance issues)\n\t\t\tfunction _indicatorsMap(fn) {\n\t\t\t\tif (that.indicators) {\n\t\t\t\t\tfor (var i = that.indicators.length; i--;) {\n\t\t\t\t\t\tfn.call(that.indicators[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.options.fadeScrollbars) {\n\t\t\t\tthis.on('scrollEnd', function () {\n\t\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\t\tthis.fade();\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.on('scrollCancel', function () {\n\t\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\t\tthis.fade();\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.on('scrollStart', function () {\n\t\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\t\tthis.fade(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.on('beforeScrollStart', function () {\n\t\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\t\tthis.fade(1, true);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.on('refresh', function () {\n\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\tthis.refresh();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.on('destroy', function () {\n\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\tthis.destroy();\n\t\t\t\t});\n\n\t\t\t\tdelete this.indicators;\n\t\t\t});\n\t\t},\n\n\t\t_initWheel: function () {\n\t\t\tutils.addEvent(this.wrapper, 'wheel', this);\n\t\t\tutils.addEvent(this.wrapper, 'mousewheel', this);\n\t\t\tutils.addEvent(this.wrapper, 'DOMMouseScroll', this);\n\n\t\t\tthis.on('destroy', function () {\n\t\t\t\tclearTimeout(this.wheelTimeout);\n\t\t\t\tthis.wheelTimeout = null;\n\t\t\t\tutils.removeEvent(this.wrapper, 'wheel', this);\n\t\t\t\tutils.removeEvent(this.wrapper, 'mousewheel', this);\n\t\t\t\tutils.removeEvent(this.wrapper, 'DOMMouseScroll', this);\n\t\t\t});\n\t\t},\n\n\t\t_wheel: function (e) {\n\t\t\tif (!this.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\te.preventDefault();\n\n\t\t\tvar wheelDeltaX,\n\t\t\t    wheelDeltaY,\n\t\t\t    newX,\n\t\t\t    newY,\n\t\t\t    that = this;\n\n\t\t\tif (this.wheelTimeout === undefined) {\n\t\t\t\tthat._execEvent('scrollStart');\n\t\t\t}\n\n\t\t\t// Execute the scrollEnd event after 400ms the wheel stopped scrolling\n\t\t\tclearTimeout(this.wheelTimeout);\n\t\t\tthis.wheelTimeout = setTimeout(function () {\n\t\t\t\tif (!that.options.snap) {\n\t\t\t\t\tthat._execEvent('scrollEnd');\n\t\t\t\t}\n\t\t\t\tthat.wheelTimeout = undefined;\n\t\t\t}, 400);\n\n\t\t\tif ('deltaX' in e) {\n\t\t\t\tif (e.deltaMode === 1) {\n\t\t\t\t\twheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;\n\t\t\t\t\twheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;\n\t\t\t\t} else {\n\t\t\t\t\twheelDeltaX = -e.deltaX;\n\t\t\t\t\twheelDeltaY = -e.deltaY;\n\t\t\t\t}\n\t\t\t} else if ('wheelDeltaX' in e) {\n\t\t\t\twheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;\n\t\t\t\twheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;\n\t\t\t} else if ('wheelDelta' in e) {\n\t\t\t\twheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;\n\t\t\t} else if ('detail' in e) {\n\t\t\t\twheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twheelDeltaX *= this.options.invertWheelDirection;\n\t\t\twheelDeltaY *= this.options.invertWheelDirection;\n\n\t\t\tif (!this.hasVerticalScroll) {\n\t\t\t\twheelDeltaX = wheelDeltaY;\n\t\t\t\twheelDeltaY = 0;\n\t\t\t}\n\n\t\t\tif (this.options.snap) {\n\t\t\t\tnewX = this.currentPage.pageX;\n\t\t\t\tnewY = this.currentPage.pageY;\n\n\t\t\t\tif (wheelDeltaX > 0) {\n\t\t\t\t\tnewX--;\n\t\t\t\t} else if (wheelDeltaX < 0) {\n\t\t\t\t\tnewX++;\n\t\t\t\t}\n\n\t\t\t\tif (wheelDeltaY > 0) {\n\t\t\t\t\tnewY--;\n\t\t\t\t} else if (wheelDeltaY < 0) {\n\t\t\t\t\tnewY++;\n\t\t\t\t}\n\n\t\t\t\tthis.goToPage(newX, newY);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnewX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);\n\t\t\tnewY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);\n\n\t\t\tthis.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;\n\t\t\tthis.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;\n\n\t\t\tif (newX > 0) {\n\t\t\t\tnewX = 0;\n\t\t\t} else if (newX < this.maxScrollX) {\n\t\t\t\tnewX = this.maxScrollX;\n\t\t\t}\n\n\t\t\tif (newY > 0) {\n\t\t\t\tnewY = 0;\n\t\t\t} else if (newY < this.maxScrollY) {\n\t\t\t\tnewY = this.maxScrollY;\n\t\t\t}\n\n\t\t\tthis.scrollTo(newX, newY, 0);\n\n\t\t\t// INSERT POINT: _wheel\n\t\t},\n\n\t\t_initSnap: function () {\n\t\t\tthis.currentPage = {};\n\n\t\t\tif (typeof this.options.snap == 'string') {\n\t\t\t\tthis.options.snap = this.scroller.querySelectorAll(this.options.snap);\n\t\t\t}\n\n\t\t\tthis.on('refresh', function () {\n\t\t\t\tvar i = 0,\n\t\t\t\t    l,\n\t\t\t\t    m = 0,\n\t\t\t\t    n,\n\t\t\t\t    cx,\n\t\t\t\t    cy,\n\t\t\t\t    x = 0,\n\t\t\t\t    y,\n\t\t\t\t    stepX = this.options.snapStepX || this.wrapperWidth,\n\t\t\t\t    stepY = this.options.snapStepY || this.wrapperHeight,\n\t\t\t\t    el,\n\t\t\t\t    rect;\n\n\t\t\t\tthis.pages = [];\n\n\t\t\t\tif (!this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.options.snap === true) {\n\t\t\t\t\tcx = Math.round(stepX / 2);\n\t\t\t\t\tcy = Math.round(stepY / 2);\n\n\t\t\t\t\twhile (x > -this.scrollerWidth) {\n\t\t\t\t\t\tthis.pages[i] = [];\n\t\t\t\t\t\tl = 0;\n\t\t\t\t\t\ty = 0;\n\n\t\t\t\t\t\twhile (y > -this.scrollerHeight) {\n\t\t\t\t\t\t\tthis.pages[i][l] = {\n\t\t\t\t\t\t\t\tx: Math.max(x, this.maxScrollX),\n\t\t\t\t\t\t\t\ty: Math.max(y, this.maxScrollY),\n\t\t\t\t\t\t\t\twidth: stepX,\n\t\t\t\t\t\t\t\theight: stepY,\n\t\t\t\t\t\t\t\tcx: x - cx,\n\t\t\t\t\t\t\t\tcy: y - cy\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\ty -= stepY;\n\t\t\t\t\t\t\tl++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tx -= stepX;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tel = this.options.snap;\n\t\t\t\t\tl = el.length;\n\t\t\t\t\tn = -1;\n\n\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\trect = utils.getRect(el[i]);\n\t\t\t\t\t\tif (i === 0 || rect.left <= utils.getRect(el[i - 1]).left) {\n\t\t\t\t\t\t\tm = 0;\n\t\t\t\t\t\t\tn++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.pages[m]) {\n\t\t\t\t\t\t\tthis.pages[m] = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tx = Math.max(-rect.left, this.maxScrollX);\n\t\t\t\t\t\ty = Math.max(-rect.top, this.maxScrollY);\n\t\t\t\t\t\tcx = x - Math.round(rect.width / 2);\n\t\t\t\t\t\tcy = y - Math.round(rect.height / 2);\n\n\t\t\t\t\t\tthis.pages[m][n] = {\n\t\t\t\t\t\t\tx: x,\n\t\t\t\t\t\t\ty: y,\n\t\t\t\t\t\t\twidth: rect.width,\n\t\t\t\t\t\t\theight: rect.height,\n\t\t\t\t\t\t\tcx: cx,\n\t\t\t\t\t\t\tcy: cy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (x > this.maxScrollX) {\n\t\t\t\t\t\t\tm++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);\n\n\t\t\t\t// Update snap threshold if needed\n\t\t\t\tif (this.options.snapThreshold % 1 === 0) {\n\t\t\t\t\tthis.snapThresholdX = this.options.snapThreshold;\n\t\t\t\t\tthis.snapThresholdY = this.options.snapThreshold;\n\t\t\t\t} else {\n\t\t\t\t\tthis.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);\n\t\t\t\t\tthis.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.on('flick', function () {\n\t\t\t\tvar time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.x - this.startX), 1000), Math.min(Math.abs(this.y - this.startY), 1000)), 300);\n\n\t\t\t\tthis.goToPage(this.currentPage.pageX + this.directionX, this.currentPage.pageY + this.directionY, time);\n\t\t\t});\n\t\t},\n\n\t\t_nearestSnap: function (x, y) {\n\t\t\tif (!this.pages.length) {\n\t\t\t\treturn { x: 0, y: 0, pageX: 0, pageY: 0 };\n\t\t\t}\n\n\t\t\tvar i = 0,\n\t\t\t    l = this.pages.length,\n\t\t\t    m = 0;\n\n\t\t\t// Check if we exceeded the snap threshold\n\t\t\tif (Math.abs(x - this.absStartX) < this.snapThresholdX && Math.abs(y - this.absStartY) < this.snapThresholdY) {\n\t\t\t\treturn this.currentPage;\n\t\t\t}\n\n\t\t\tif (x > 0) {\n\t\t\t\tx = 0;\n\t\t\t} else if (x < this.maxScrollX) {\n\t\t\t\tx = this.maxScrollX;\n\t\t\t}\n\n\t\t\tif (y > 0) {\n\t\t\t\ty = 0;\n\t\t\t} else if (y < this.maxScrollY) {\n\t\t\t\ty = this.maxScrollY;\n\t\t\t}\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tif (x >= this.pages[i][0].cx) {\n\t\t\t\t\tx = this.pages[i][0].x;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tl = this.pages[i].length;\n\n\t\t\tfor (; m < l; m++) {\n\t\t\t\tif (y >= this.pages[0][m].cy) {\n\t\t\t\t\ty = this.pages[0][m].y;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i == this.currentPage.pageX) {\n\t\t\t\ti += this.directionX;\n\n\t\t\t\tif (i < 0) {\n\t\t\t\t\ti = 0;\n\t\t\t\t} else if (i >= this.pages.length) {\n\t\t\t\t\ti = this.pages.length - 1;\n\t\t\t\t}\n\n\t\t\t\tx = this.pages[i][0].x;\n\t\t\t}\n\n\t\t\tif (m == this.currentPage.pageY) {\n\t\t\t\tm += this.directionY;\n\n\t\t\t\tif (m < 0) {\n\t\t\t\t\tm = 0;\n\t\t\t\t} else if (m >= this.pages[0].length) {\n\t\t\t\t\tm = this.pages[0].length - 1;\n\t\t\t\t}\n\n\t\t\t\ty = this.pages[0][m].y;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\tpageX: i,\n\t\t\t\tpageY: m\n\t\t\t};\n\t\t},\n\n\t\tgoToPage: function (x, y, time, easing) {\n\t\t\teasing = easing || this.options.bounceEasing;\n\n\t\t\tif (x >= this.pages.length) {\n\t\t\t\tx = this.pages.length - 1;\n\t\t\t} else if (x < 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y >= this.pages[x].length) {\n\t\t\t\ty = this.pages[x].length - 1;\n\t\t\t} else if (y < 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tvar posX = this.pages[x][y].x,\n\t\t\t    posY = this.pages[x][y].y;\n\n\t\t\ttime = time === undefined ? this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(posX - this.x), 1000), Math.min(Math.abs(posY - this.y), 1000)), 300) : time;\n\n\t\t\tthis.currentPage = {\n\t\t\t\tx: posX,\n\t\t\t\ty: posY,\n\t\t\t\tpageX: x,\n\t\t\t\tpageY: y\n\t\t\t};\n\n\t\t\tthis.scrollTo(posX, posY, time, easing);\n\t\t},\n\n\t\tnext: function (time, easing) {\n\t\t\tvar x = this.currentPage.pageX,\n\t\t\t    y = this.currentPage.pageY;\n\n\t\t\tx++;\n\n\t\t\tif (x >= this.pages.length && this.hasVerticalScroll) {\n\t\t\t\tx = 0;\n\t\t\t\ty++;\n\t\t\t}\n\n\t\t\tthis.goToPage(x, y, time, easing);\n\t\t},\n\n\t\tprev: function (time, easing) {\n\t\t\tvar x = this.currentPage.pageX,\n\t\t\t    y = this.currentPage.pageY;\n\n\t\t\tx--;\n\n\t\t\tif (x < 0 && this.hasVerticalScroll) {\n\t\t\t\tx = 0;\n\t\t\t\ty--;\n\t\t\t}\n\n\t\t\tthis.goToPage(x, y, time, easing);\n\t\t},\n\n\t\t_initKeys: function (e) {\n\t\t\t// default key bindings\n\t\t\tvar keys = {\n\t\t\t\tpageUp: 33,\n\t\t\t\tpageDown: 34,\n\t\t\t\tend: 35,\n\t\t\t\thome: 36,\n\t\t\t\tleft: 37,\n\t\t\t\tup: 38,\n\t\t\t\tright: 39,\n\t\t\t\tdown: 40\n\t\t\t};\n\t\t\tvar i;\n\n\t\t\t// if you give me characters I give you keycode\n\t\t\tif (typeof this.options.keyBindings == 'object') {\n\t\t\t\tfor (i in this.options.keyBindings) {\n\t\t\t\t\tif (typeof this.options.keyBindings[i] == 'string') {\n\t\t\t\t\t\tthis.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.options.keyBindings = {};\n\t\t\t}\n\n\t\t\tfor (i in keys) {\n\t\t\t\tthis.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];\n\t\t\t}\n\n\t\t\tutils.addEvent(window, 'keydown', this);\n\n\t\t\tthis.on('destroy', function () {\n\t\t\t\tutils.removeEvent(window, 'keydown', this);\n\t\t\t});\n\t\t},\n\n\t\t_key: function (e) {\n\t\t\tif (!this.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar snap = this.options.snap,\n\t\t\t    // we are using this alot, better to cache it\n\t\t\tnewX = snap ? this.currentPage.pageX : this.x,\n\t\t\t    newY = snap ? this.currentPage.pageY : this.y,\n\t\t\t    now = utils.getTime(),\n\t\t\t    prevTime = this.keyTime || 0,\n\t\t\t    acceleration = 0.250,\n\t\t\t    pos;\n\n\t\t\tif (this.options.useTransition && this.isInTransition) {\n\t\t\t\tpos = this.getComputedPosition();\n\n\t\t\t\tthis._translate(Math.round(pos.x), Math.round(pos.y));\n\t\t\t\tthis.isInTransition = false;\n\t\t\t}\n\n\t\t\tthis.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;\n\n\t\t\tswitch (e.keyCode) {\n\t\t\t\tcase this.options.keyBindings.pageUp:\n\t\t\t\t\tif (this.hasHorizontalScroll && !this.hasVerticalScroll) {\n\t\t\t\t\t\tnewX += snap ? 1 : this.wrapperWidth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewY += snap ? 1 : this.wrapperHeight;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.options.keyBindings.pageDown:\n\t\t\t\t\tif (this.hasHorizontalScroll && !this.hasVerticalScroll) {\n\t\t\t\t\t\tnewX -= snap ? 1 : this.wrapperWidth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewY -= snap ? 1 : this.wrapperHeight;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.options.keyBindings.end:\n\t\t\t\t\tnewX = snap ? this.pages.length - 1 : this.maxScrollX;\n\t\t\t\t\tnewY = snap ? this.pages[0].length - 1 : this.maxScrollY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.options.keyBindings.home:\n\t\t\t\t\tnewX = 0;\n\t\t\t\t\tnewY = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.options.keyBindings.left:\n\t\t\t\t\tnewX += snap ? -1 : 5 + this.keyAcceleration >> 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.options.keyBindings.up:\n\t\t\t\t\tnewY += snap ? 1 : 5 + this.keyAcceleration >> 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.options.keyBindings.right:\n\t\t\t\t\tnewX -= snap ? -1 : 5 + this.keyAcceleration >> 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.options.keyBindings.down:\n\t\t\t\t\tnewY -= snap ? 1 : 5 + this.keyAcceleration >> 0;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (snap) {\n\t\t\t\tthis.goToPage(newX, newY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (newX > 0) {\n\t\t\t\tnewX = 0;\n\t\t\t\tthis.keyAcceleration = 0;\n\t\t\t} else if (newX < this.maxScrollX) {\n\t\t\t\tnewX = this.maxScrollX;\n\t\t\t\tthis.keyAcceleration = 0;\n\t\t\t}\n\n\t\t\tif (newY > 0) {\n\t\t\t\tnewY = 0;\n\t\t\t\tthis.keyAcceleration = 0;\n\t\t\t} else if (newY < this.maxScrollY) {\n\t\t\t\tnewY = this.maxScrollY;\n\t\t\t\tthis.keyAcceleration = 0;\n\t\t\t}\n\n\t\t\tthis.scrollTo(newX, newY, 0);\n\n\t\t\tthis.keyTime = now;\n\t\t},\n\n\t\t_animate: function (destX, destY, duration, easingFn) {\n\t\t\tvar that = this,\n\t\t\t    startX = this.x,\n\t\t\t    startY = this.y,\n\t\t\t    startTime = utils.getTime(),\n\t\t\t    destTime = startTime + duration;\n\n\t\t\tfunction step() {\n\t\t\t\tvar now = utils.getTime(),\n\t\t\t\t    newX,\n\t\t\t\t    newY,\n\t\t\t\t    easing;\n\n\t\t\t\tif (now >= destTime) {\n\t\t\t\t\tthat.isAnimating = false;\n\t\t\t\t\tthat._translate(destX, destY);\n\n\t\t\t\t\tif (!that.resetPosition(that.options.bounceTime)) {\n\t\t\t\t\t\tthat._execEvent('scrollEnd');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnow = (now - startTime) / duration;\n\t\t\t\teasing = easingFn(now);\n\t\t\t\tnewX = (destX - startX) * easing + startX;\n\t\t\t\tnewY = (destY - startY) * easing + startY;\n\t\t\t\tthat._translate(newX, newY);\n\n\t\t\t\tif (that.isAnimating) {\n\t\t\t\t\trAF(step);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.isAnimating = true;\n\t\t\tstep();\n\t\t},\n\t\thandleEvent: function (e) {\n\t\t\tswitch (e.type) {\n\t\t\t\tcase 'touchstart':\n\t\t\t\tcase 'pointerdown':\n\t\t\t\tcase 'MSPointerDown':\n\t\t\t\tcase 'mousedown':\n\t\t\t\t\tthis._start(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'touchmove':\n\t\t\t\tcase 'pointermove':\n\t\t\t\tcase 'MSPointerMove':\n\t\t\t\tcase 'mousemove':\n\t\t\t\t\tthis._move(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'touchend':\n\t\t\t\tcase 'pointerup':\n\t\t\t\tcase 'MSPointerUp':\n\t\t\t\tcase 'mouseup':\n\t\t\t\tcase 'touchcancel':\n\t\t\t\tcase 'pointercancel':\n\t\t\t\tcase 'MSPointerCancel':\n\t\t\t\tcase 'mousecancel':\n\t\t\t\t\tthis._end(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'orientationchange':\n\t\t\t\tcase 'resize':\n\t\t\t\t\tthis._resize();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'transitionend':\n\t\t\t\tcase 'webkitTransitionEnd':\n\t\t\t\tcase 'oTransitionEnd':\n\t\t\t\tcase 'MSTransitionEnd':\n\t\t\t\t\tthis._transitionEnd(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'wheel':\n\t\t\t\tcase 'DOMMouseScroll':\n\t\t\t\tcase 'mousewheel':\n\t\t\t\t\tthis._wheel(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'keydown':\n\t\t\t\t\tthis._key(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'click':\n\t\t\t\t\tif (this.enabled && !e._constructed) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\tfunction createDefaultScrollbar(direction, interactive, type) {\n\t\tvar scrollbar = document.createElement('div'),\n\t\t    indicator = document.createElement('div');\n\n\t\tif (type === true) {\n\t\t\tscrollbar.style.cssText = 'position:absolute;z-index:9999';\n\t\t\tindicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';\n\t\t}\n\n\t\tindicator.className = 'iScrollIndicator';\n\n\t\tif (direction == 'h') {\n\t\t\tif (type === true) {\n\t\t\t\tscrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';\n\t\t\t\tindicator.style.height = '100%';\n\t\t\t}\n\t\t\tscrollbar.className = 'iScrollHorizontalScrollbar';\n\t\t} else {\n\t\t\tif (type === true) {\n\t\t\t\tscrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';\n\t\t\t\tindicator.style.width = '100%';\n\t\t\t}\n\t\t\tscrollbar.className = 'iScrollVerticalScrollbar';\n\t\t}\n\n\t\tscrollbar.style.cssText += ';overflow:hidden';\n\n\t\tif (!interactive) {\n\t\t\tscrollbar.style.pointerEvents = 'none';\n\t\t}\n\n\t\tscrollbar.appendChild(indicator);\n\n\t\treturn scrollbar;\n\t}\n\n\tfunction Indicator(scroller, options) {\n\t\tthis.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;\n\t\tthis.wrapperStyle = this.wrapper.style;\n\t\tthis.indicator = this.wrapper.children[0];\n\t\tthis.indicatorStyle = this.indicator.style;\n\t\tthis.scroller = scroller;\n\n\t\tthis.options = {\n\t\t\tlistenX: true,\n\t\t\tlistenY: true,\n\t\t\tinteractive: false,\n\t\t\tresize: true,\n\t\t\tdefaultScrollbars: false,\n\t\t\tshrink: false,\n\t\t\tfade: false,\n\t\t\tspeedRatioX: 0,\n\t\t\tspeedRatioY: 0\n\t\t};\n\n\t\tfor (var i in options) {\n\t\t\tthis.options[i] = options[i];\n\t\t}\n\n\t\tthis.sizeRatioX = 1;\n\t\tthis.sizeRatioY = 1;\n\t\tthis.maxPosX = 0;\n\t\tthis.maxPosY = 0;\n\n\t\tif (this.options.interactive) {\n\t\t\tif (!this.options.disableTouch) {\n\t\t\t\tutils.addEvent(this.indicator, 'touchstart', this);\n\t\t\t\tutils.addEvent(window, 'touchend', this);\n\t\t\t}\n\t\t\tif (!this.options.disablePointer) {\n\t\t\t\tutils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);\n\t\t\t\tutils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);\n\t\t\t}\n\t\t\tif (!this.options.disableMouse) {\n\t\t\t\tutils.addEvent(this.indicator, 'mousedown', this);\n\t\t\t\tutils.addEvent(window, 'mouseup', this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.fade) {\n\t\t\tthis.wrapperStyle[utils.style.transform] = this.scroller.translateZ;\n\t\t\tvar durationProp = utils.style.transitionDuration;\n\t\t\tif (!durationProp) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.wrapperStyle[durationProp] = utils.isBadAndroid ? '0.0001ms' : '0ms';\n\t\t\t// remove 0.0001ms\n\t\t\tvar self = this;\n\t\t\tif (utils.isBadAndroid) {\n\t\t\t\trAF(function () {\n\t\t\t\t\tif (self.wrapperStyle[durationProp] === '0.0001ms') {\n\t\t\t\t\t\tself.wrapperStyle[durationProp] = '0s';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.wrapperStyle.opacity = '0';\n\t\t}\n\t}\n\n\tIndicator.prototype = {\n\t\thandleEvent: function (e) {\n\t\t\tswitch (e.type) {\n\t\t\t\tcase 'touchstart':\n\t\t\t\tcase 'pointerdown':\n\t\t\t\tcase 'MSPointerDown':\n\t\t\t\tcase 'mousedown':\n\t\t\t\t\tthis._start(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'touchmove':\n\t\t\t\tcase 'pointermove':\n\t\t\t\tcase 'MSPointerMove':\n\t\t\t\tcase 'mousemove':\n\t\t\t\t\tthis._move(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'touchend':\n\t\t\t\tcase 'pointerup':\n\t\t\t\tcase 'MSPointerUp':\n\t\t\t\tcase 'mouseup':\n\t\t\t\tcase 'touchcancel':\n\t\t\t\tcase 'pointercancel':\n\t\t\t\tcase 'MSPointerCancel':\n\t\t\t\tcase 'mousecancel':\n\t\t\t\t\tthis._end(e);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\tdestroy: function () {\n\t\t\tif (this.options.fadeScrollbars) {\n\t\t\t\tclearTimeout(this.fadeTimeout);\n\t\t\t\tthis.fadeTimeout = null;\n\t\t\t}\n\t\t\tif (this.options.interactive) {\n\t\t\t\tutils.removeEvent(this.indicator, 'touchstart', this);\n\t\t\t\tutils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);\n\t\t\t\tutils.removeEvent(this.indicator, 'mousedown', this);\n\n\t\t\t\tutils.removeEvent(window, 'touchmove', this);\n\t\t\t\tutils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);\n\t\t\t\tutils.removeEvent(window, 'mousemove', this);\n\n\t\t\t\tutils.removeEvent(window, 'touchend', this);\n\t\t\t\tutils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);\n\t\t\t\tutils.removeEvent(window, 'mouseup', this);\n\t\t\t}\n\n\t\t\tif (this.options.defaultScrollbars && this.wrapper.parentNode) {\n\t\t\t\tthis.wrapper.parentNode.removeChild(this.wrapper);\n\t\t\t}\n\t\t},\n\n\t\t_start: function (e) {\n\t\t\tvar point = e.touches ? e.touches[0] : e;\n\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\n\t\t\tthis.transitionTime();\n\n\t\t\tthis.initiated = true;\n\t\t\tthis.moved = false;\n\t\t\tthis.lastPointX = point.pageX;\n\t\t\tthis.lastPointY = point.pageY;\n\n\t\t\tthis.startTime = utils.getTime();\n\n\t\t\tif (!this.options.disableTouch) {\n\t\t\t\tutils.addEvent(window, 'touchmove', this);\n\t\t\t}\n\t\t\tif (!this.options.disablePointer) {\n\t\t\t\tutils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);\n\t\t\t}\n\t\t\tif (!this.options.disableMouse) {\n\t\t\t\tutils.addEvent(window, 'mousemove', this);\n\t\t\t}\n\n\t\t\tthis.scroller._execEvent('beforeScrollStart');\n\t\t},\n\n\t\t_move: function (e) {\n\t\t\tvar point = e.touches ? e.touches[0] : e,\n\t\t\t    deltaX,\n\t\t\t    deltaY,\n\t\t\t    newX,\n\t\t\t    newY,\n\t\t\t    timestamp = utils.getTime();\n\n\t\t\tif (!this.moved) {\n\t\t\t\tthis.scroller._execEvent('scrollStart');\n\t\t\t}\n\n\t\t\tthis.moved = true;\n\n\t\t\tdeltaX = point.pageX - this.lastPointX;\n\t\t\tthis.lastPointX = point.pageX;\n\n\t\t\tdeltaY = point.pageY - this.lastPointY;\n\t\t\tthis.lastPointY = point.pageY;\n\n\t\t\tnewX = this.x + deltaX;\n\t\t\tnewY = this.y + deltaY;\n\n\t\t\tthis._pos(newX, newY);\n\n\t\t\t// INSERT POINT: indicator._move\n\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t},\n\n\t\t_end: function (e) {\n\t\t\tif (!this.initiated) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.initiated = false;\n\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\n\t\t\tutils.removeEvent(window, 'touchmove', this);\n\t\t\tutils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);\n\t\t\tutils.removeEvent(window, 'mousemove', this);\n\n\t\t\tif (this.scroller.options.snap) {\n\t\t\t\tvar snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);\n\n\t\t\t\tvar time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.scroller.x - snap.x), 1000), Math.min(Math.abs(this.scroller.y - snap.y), 1000)), 300);\n\n\t\t\t\tif (this.scroller.x != snap.x || this.scroller.y != snap.y) {\n\t\t\t\t\tthis.scroller.directionX = 0;\n\t\t\t\t\tthis.scroller.directionY = 0;\n\t\t\t\t\tthis.scroller.currentPage = snap;\n\t\t\t\t\tthis.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.moved) {\n\t\t\t\tthis.scroller._execEvent('scrollEnd');\n\t\t\t}\n\t\t},\n\n\t\ttransitionTime: function (time) {\n\t\t\ttime = time || 0;\n\t\t\tvar durationProp = utils.style.transitionDuration;\n\t\t\tif (!durationProp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.indicatorStyle[durationProp] = time + 'ms';\n\n\t\t\tif (!time && utils.isBadAndroid) {\n\t\t\t\tthis.indicatorStyle[durationProp] = '0.0001ms';\n\t\t\t\t// remove 0.0001ms\n\t\t\t\tvar self = this;\n\t\t\t\trAF(function () {\n\t\t\t\t\tif (self.indicatorStyle[durationProp] === '0.0001ms') {\n\t\t\t\t\t\tself.indicatorStyle[durationProp] = '0s';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\ttransitionTimingFunction: function (easing) {\n\t\t\tthis.indicatorStyle[utils.style.transitionTimingFunction] = easing;\n\t\t},\n\n\t\trefresh: function () {\n\t\t\tthis.transitionTime();\n\n\t\t\tif (this.options.listenX && !this.options.listenY) {\n\t\t\t\tthis.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';\n\t\t\t} else if (this.options.listenY && !this.options.listenX) {\n\t\t\t\tthis.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';\n\t\t\t} else {\n\t\t\t\tthis.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';\n\t\t\t}\n\n\t\t\tif (this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {\n\t\t\t\tutils.addClass(this.wrapper, 'iScrollBothScrollbars');\n\t\t\t\tutils.removeClass(this.wrapper, 'iScrollLoneScrollbar');\n\n\t\t\t\tif (this.options.defaultScrollbars && this.options.customStyle) {\n\t\t\t\t\tif (this.options.listenX) {\n\t\t\t\t\t\tthis.wrapper.style.right = '8px';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.wrapper.style.bottom = '8px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tutils.removeClass(this.wrapper, 'iScrollBothScrollbars');\n\t\t\t\tutils.addClass(this.wrapper, 'iScrollLoneScrollbar');\n\n\t\t\t\tif (this.options.defaultScrollbars && this.options.customStyle) {\n\t\t\t\t\tif (this.options.listenX) {\n\t\t\t\t\t\tthis.wrapper.style.right = '2px';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.wrapper.style.bottom = '2px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tutils.getRect(this.wrapper); // force refresh\n\n\t\t\tif (this.options.listenX) {\n\t\t\t\tthis.wrapperWidth = this.wrapper.clientWidth;\n\t\t\t\tif (this.options.resize) {\n\t\t\t\t\tthis.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);\n\t\t\t\t\tthis.indicatorStyle.width = this.indicatorWidth + 'px';\n\t\t\t\t} else {\n\t\t\t\t\tthis.indicatorWidth = this.indicator.clientWidth;\n\t\t\t\t}\n\n\t\t\t\tthis.maxPosX = this.wrapperWidth - this.indicatorWidth;\n\n\t\t\t\tif (this.options.shrink == 'clip') {\n\t\t\t\t\tthis.minBoundaryX = -this.indicatorWidth + 8;\n\t\t\t\t\tthis.maxBoundaryX = this.wrapperWidth - 8;\n\t\t\t\t} else {\n\t\t\t\t\tthis.minBoundaryX = 0;\n\t\t\t\t\tthis.maxBoundaryX = this.maxPosX;\n\t\t\t\t}\n\n\t\t\t\tthis.sizeRatioX = this.options.speedRatioX || this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX;\n\t\t\t}\n\n\t\t\tif (this.options.listenY) {\n\t\t\t\tthis.wrapperHeight = this.wrapper.clientHeight;\n\t\t\t\tif (this.options.resize) {\n\t\t\t\t\tthis.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);\n\t\t\t\t\tthis.indicatorStyle.height = this.indicatorHeight + 'px';\n\t\t\t\t} else {\n\t\t\t\t\tthis.indicatorHeight = this.indicator.clientHeight;\n\t\t\t\t}\n\n\t\t\t\tthis.maxPosY = this.wrapperHeight - this.indicatorHeight;\n\n\t\t\t\tif (this.options.shrink == 'clip') {\n\t\t\t\t\tthis.minBoundaryY = -this.indicatorHeight + 8;\n\t\t\t\t\tthis.maxBoundaryY = this.wrapperHeight - 8;\n\t\t\t\t} else {\n\t\t\t\t\tthis.minBoundaryY = 0;\n\t\t\t\t\tthis.maxBoundaryY = this.maxPosY;\n\t\t\t\t}\n\n\t\t\t\tthis.maxPosY = this.wrapperHeight - this.indicatorHeight;\n\t\t\t\tthis.sizeRatioY = this.options.speedRatioY || this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY;\n\t\t\t}\n\n\t\t\tthis.updatePosition();\n\t\t},\n\n\t\tupdatePosition: function () {\n\t\t\tvar x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,\n\t\t\t    y = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;\n\n\t\t\tif (!this.options.ignoreBoundaries) {\n\t\t\t\tif (x < this.minBoundaryX) {\n\t\t\t\t\tif (this.options.shrink == 'scale') {\n\t\t\t\t\t\tthis.width = Math.max(this.indicatorWidth + x, 8);\n\t\t\t\t\t\tthis.indicatorStyle.width = this.width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\tx = this.minBoundaryX;\n\t\t\t\t} else if (x > this.maxBoundaryX) {\n\t\t\t\t\tif (this.options.shrink == 'scale') {\n\t\t\t\t\t\tthis.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);\n\t\t\t\t\t\tthis.indicatorStyle.width = this.width + 'px';\n\t\t\t\t\t\tx = this.maxPosX + this.indicatorWidth - this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = this.maxBoundaryX;\n\t\t\t\t\t}\n\t\t\t\t} else if (this.options.shrink == 'scale' && this.width != this.indicatorWidth) {\n\t\t\t\t\tthis.width = this.indicatorWidth;\n\t\t\t\t\tthis.indicatorStyle.width = this.width + 'px';\n\t\t\t\t}\n\n\t\t\t\tif (y < this.minBoundaryY) {\n\t\t\t\t\tif (this.options.shrink == 'scale') {\n\t\t\t\t\t\tthis.height = Math.max(this.indicatorHeight + y * 3, 8);\n\t\t\t\t\t\tthis.indicatorStyle.height = this.height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\ty = this.minBoundaryY;\n\t\t\t\t} else if (y > this.maxBoundaryY) {\n\t\t\t\t\tif (this.options.shrink == 'scale') {\n\t\t\t\t\t\tthis.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);\n\t\t\t\t\t\tthis.indicatorStyle.height = this.height + 'px';\n\t\t\t\t\t\ty = this.maxPosY + this.indicatorHeight - this.height;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = this.maxBoundaryY;\n\t\t\t\t\t}\n\t\t\t\t} else if (this.options.shrink == 'scale' && this.height != this.indicatorHeight) {\n\t\t\t\t\tthis.height = this.indicatorHeight;\n\t\t\t\t\tthis.indicatorStyle.height = this.height + 'px';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\tif (this.scroller.options.useTransform) {\n\t\t\t\tthis.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;\n\t\t\t} else {\n\t\t\t\tthis.indicatorStyle.left = x + 'px';\n\t\t\t\tthis.indicatorStyle.top = y + 'px';\n\t\t\t}\n\t\t},\n\n\t\t_pos: function (x, y) {\n\t\t\tif (x < 0) {\n\t\t\t\tx = 0;\n\t\t\t} else if (x > this.maxPosX) {\n\t\t\t\tx = this.maxPosX;\n\t\t\t}\n\n\t\t\tif (y < 0) {\n\t\t\t\ty = 0;\n\t\t\t} else if (y > this.maxPosY) {\n\t\t\t\ty = this.maxPosY;\n\t\t\t}\n\n\t\t\tx = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;\n\t\t\ty = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;\n\n\t\t\tthis.scroller.scrollTo(x, y);\n\t\t},\n\n\t\tfade: function (val, hold) {\n\t\t\tif (hold && !this.visible) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(this.fadeTimeout);\n\t\t\tthis.fadeTimeout = null;\n\n\t\t\tvar time = val ? 250 : 500,\n\t\t\t    delay = val ? 0 : 300;\n\n\t\t\tval = val ? '1' : '0';\n\n\t\t\tthis.wrapperStyle[utils.style.transitionDuration] = time + 'ms';\n\n\t\t\tthis.fadeTimeout = setTimeout(function (val) {\n\t\t\t\tthis.wrapperStyle.opacity = val;\n\t\t\t\tthis.visible = +val;\n\t\t\t}.bind(this, val), delay);\n\t\t}\n\t};\n\n\tIScroll.utils = utils;\n\n\tif (typeof module != 'undefined' && module.exports) {\n\t\tmodule.exports = IScroll;\n\t} else if (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn IScroll;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {\n\t\twindow.IScroll = IScroll;\n\t}\n})(window, document, Math);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
module.exports = __webpack_require__(1);


/***/ })
/******/ ]);